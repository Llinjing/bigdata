/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.inveno.feeder.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-18")
public class AcsService {

  public interface Iface {

    public Status checkAndInsert(SysType type, String key, int timeout_usec) throws org.apache.thrift.TException;

    public List<Status> checkAndInsertMul(SysType type, List<String> keys, int timeout_usec) throws org.apache.thrift.TException;

    public List<Status> existMul(SysType type, List<String> keys, int timeout_usec) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void checkAndInsert(SysType type, String key, int timeout_usec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkAndInsertMul(SysType type, List<String> keys, int timeout_usec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void existMul(SysType type, List<String> keys, int timeout_usec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Status checkAndInsert(SysType type, String key, int timeout_usec) throws org.apache.thrift.TException
    {
      send_checkAndInsert(type, key, timeout_usec);
      return recv_checkAndInsert();
    }

    public void send_checkAndInsert(SysType type, String key, int timeout_usec) throws org.apache.thrift.TException
    {
      checkAndInsert_args args = new checkAndInsert_args();
      args.setType(type);
      args.setKey(key);
      args.setTimeout_usec(timeout_usec);
      sendBase("checkAndInsert", args);
    }

    public Status recv_checkAndInsert() throws org.apache.thrift.TException
    {
      checkAndInsert_result result = new checkAndInsert_result();
      receiveBase(result, "checkAndInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkAndInsert failed: unknown result");
    }

    public List<Status> checkAndInsertMul(SysType type, List<String> keys, int timeout_usec) throws org.apache.thrift.TException
    {
      send_checkAndInsertMul(type, keys, timeout_usec);
      return recv_checkAndInsertMul();
    }

    public void send_checkAndInsertMul(SysType type, List<String> keys, int timeout_usec) throws org.apache.thrift.TException
    {
      checkAndInsertMul_args args = new checkAndInsertMul_args();
      args.setType(type);
      args.setKeys(keys);
      args.setTimeout_usec(timeout_usec);
      sendBase("checkAndInsertMul", args);
    }

    public List<Status> recv_checkAndInsertMul() throws org.apache.thrift.TException
    {
      checkAndInsertMul_result result = new checkAndInsertMul_result();
      receiveBase(result, "checkAndInsertMul");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkAndInsertMul failed: unknown result");
    }

    public List<Status> existMul(SysType type, List<String> keys, int timeout_usec) throws org.apache.thrift.TException
    {
      send_existMul(type, keys, timeout_usec);
      return recv_existMul();
    }

    public void send_existMul(SysType type, List<String> keys, int timeout_usec) throws org.apache.thrift.TException
    {
      existMul_args args = new existMul_args();
      args.setType(type);
      args.setKeys(keys);
      args.setTimeout_usec(timeout_usec);
      sendBase("existMul", args);
    }

    public List<Status> recv_existMul() throws org.apache.thrift.TException
    {
      existMul_result result = new existMul_result();
      receiveBase(result, "existMul");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "existMul failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void checkAndInsert(SysType type, String key, int timeout_usec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkAndInsert_call method_call = new checkAndInsert_call(type, key, timeout_usec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkAndInsert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysType type;
      private String key;
      private int timeout_usec;
      public checkAndInsert_call(SysType type, String key, int timeout_usec, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.key = key;
        this.timeout_usec = timeout_usec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkAndInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkAndInsert_args args = new checkAndInsert_args();
        args.setType(type);
        args.setKey(key);
        args.setTimeout_usec(timeout_usec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkAndInsert();
      }
    }

    public void checkAndInsertMul(SysType type, List<String> keys, int timeout_usec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkAndInsertMul_call method_call = new checkAndInsertMul_call(type, keys, timeout_usec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkAndInsertMul_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysType type;
      private List<String> keys;
      private int timeout_usec;
      public checkAndInsertMul_call(SysType type, List<String> keys, int timeout_usec, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.keys = keys;
        this.timeout_usec = timeout_usec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkAndInsertMul", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkAndInsertMul_args args = new checkAndInsertMul_args();
        args.setType(type);
        args.setKeys(keys);
        args.setTimeout_usec(timeout_usec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Status> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkAndInsertMul();
      }
    }

    public void existMul(SysType type, List<String> keys, int timeout_usec, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      existMul_call method_call = new existMul_call(type, keys, timeout_usec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class existMul_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SysType type;
      private List<String> keys;
      private int timeout_usec;
      public existMul_call(SysType type, List<String> keys, int timeout_usec, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.keys = keys;
        this.timeout_usec = timeout_usec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("existMul", org.apache.thrift.protocol.TMessageType.CALL, 0));
        existMul_args args = new existMul_args();
        args.setType(type);
        args.setKeys(keys);
        args.setTimeout_usec(timeout_usec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Status> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_existMul();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("checkAndInsert", new checkAndInsert());
      processMap.put("checkAndInsertMul", new checkAndInsertMul());
      processMap.put("existMul", new existMul());
      return processMap;
    }

    public static class checkAndInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkAndInsert_args> {
      public checkAndInsert() {
        super("checkAndInsert");
      }

      public checkAndInsert_args getEmptyArgsInstance() {
        return new checkAndInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkAndInsert_result getResult(I iface, checkAndInsert_args args) throws org.apache.thrift.TException {
        checkAndInsert_result result = new checkAndInsert_result();
        result.success = iface.checkAndInsert(args.type, args.key, args.timeout_usec);
        return result;
      }
    }

    public static class checkAndInsertMul<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkAndInsertMul_args> {
      public checkAndInsertMul() {
        super("checkAndInsertMul");
      }

      public checkAndInsertMul_args getEmptyArgsInstance() {
        return new checkAndInsertMul_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkAndInsertMul_result getResult(I iface, checkAndInsertMul_args args) throws org.apache.thrift.TException {
        checkAndInsertMul_result result = new checkAndInsertMul_result();
        result.success = iface.checkAndInsertMul(args.type, args.keys, args.timeout_usec);
        return result;
      }
    }

    public static class existMul<I extends Iface> extends org.apache.thrift.ProcessFunction<I, existMul_args> {
      public existMul() {
        super("existMul");
      }

      public existMul_args getEmptyArgsInstance() {
        return new existMul_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public existMul_result getResult(I iface, existMul_args args) throws org.apache.thrift.TException {
        existMul_result result = new existMul_result();
        result.success = iface.existMul(args.type, args.keys, args.timeout_usec);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("checkAndInsert", new checkAndInsert());
      processMap.put("checkAndInsertMul", new checkAndInsertMul());
      processMap.put("existMul", new existMul());
      return processMap;
    }

    public static class checkAndInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkAndInsert_args, Status> {
      public checkAndInsert() {
        super("checkAndInsert");
      }

      public checkAndInsert_args getEmptyArgsInstance() {
        return new checkAndInsert_args();
      }

      public AsyncMethodCallback<Status> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            checkAndInsert_result result = new checkAndInsert_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkAndInsert_result result = new checkAndInsert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkAndInsert_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws TException {
        iface.checkAndInsert(args.type, args.key, args.timeout_usec,resultHandler);
      }
    }

    public static class checkAndInsertMul<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkAndInsertMul_args, List<Status>> {
      public checkAndInsertMul() {
        super("checkAndInsertMul");
      }

      public checkAndInsertMul_args getEmptyArgsInstance() {
        return new checkAndInsertMul_args();
      }

      public AsyncMethodCallback<List<Status>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Status>>() { 
          public void onComplete(List<Status> o) {
            checkAndInsertMul_result result = new checkAndInsertMul_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkAndInsertMul_result result = new checkAndInsertMul_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkAndInsertMul_args args, org.apache.thrift.async.AsyncMethodCallback<List<Status>> resultHandler) throws TException {
        iface.checkAndInsertMul(args.type, args.keys, args.timeout_usec,resultHandler);
      }
    }

    public static class existMul<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, existMul_args, List<Status>> {
      public existMul() {
        super("existMul");
      }

      public existMul_args getEmptyArgsInstance() {
        return new existMul_args();
      }

      public AsyncMethodCallback<List<Status>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Status>>() { 
          public void onComplete(List<Status> o) {
            existMul_result result = new existMul_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            existMul_result result = new existMul_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, existMul_args args, org.apache.thrift.async.AsyncMethodCallback<List<Status>> resultHandler) throws TException {
        iface.existMul(args.type, args.keys, args.timeout_usec,resultHandler);
      }
    }

  }

  public static class checkAndInsert_args implements org.apache.thrift.TBase<checkAndInsert_args, checkAndInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAndInsert_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIMEOUT_USEC_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_usec", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkAndInsert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkAndInsert_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see SysType
     */
    public SysType type; // required
    public String key; // required
    public int timeout_usec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see SysType
       */
      TYPE((short)1, "type"),
      KEY((short)2, "key"),
      TIMEOUT_USEC((short)3, "timeout_usec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // KEY
            return KEY;
          case 3: // TIMEOUT_USEC
            return TIMEOUT_USEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUT_USEC_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SysType.class)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMEOUT_USEC, new org.apache.thrift.meta_data.FieldMetaData("timeout_usec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAndInsert_args.class, metaDataMap);
    }

    public checkAndInsert_args() {
    }

    public checkAndInsert_args(
      SysType type,
      String key,
      int timeout_usec)
    {
      this();
      this.type = type;
      this.key = key;
      this.timeout_usec = timeout_usec;
      setTimeout_usecIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAndInsert_args(checkAndInsert_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.timeout_usec = other.timeout_usec;
    }

    public checkAndInsert_args deepCopy() {
      return new checkAndInsert_args(this);
    }

    @Override
    public void clear() {
      this.type = null;
      this.key = null;
      setTimeout_usecIsSet(false);
      this.timeout_usec = 0;
    }

    /**
     * 
     * @see SysType
     */
    public SysType getType() {
      return this.type;
    }

    /**
     * 
     * @see SysType
     */
    public checkAndInsert_args setType(SysType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public checkAndInsert_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getTimeout_usec() {
      return this.timeout_usec;
    }

    public checkAndInsert_args setTimeout_usec(int timeout_usec) {
      this.timeout_usec = timeout_usec;
      setTimeout_usecIsSet(true);
      return this;
    }

    public void unsetTimeout_usec() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_USEC_ISSET_ID);
    }

    /** Returns true if field timeout_usec is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_usec() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_USEC_ISSET_ID);
    }

    public void setTimeout_usecIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_USEC_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((SysType)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case TIMEOUT_USEC:
        if (value == null) {
          unsetTimeout_usec();
        } else {
          setTimeout_usec((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case KEY:
        return getKey();

      case TIMEOUT_USEC:
        return getTimeout_usec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case KEY:
        return isSetKey();
      case TIMEOUT_USEC:
        return isSetTimeout_usec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAndInsert_args)
        return this.equals((checkAndInsert_args)that);
      return false;
    }

    public boolean equals(checkAndInsert_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_timeout_usec = true;
      boolean that_present_timeout_usec = true;
      if (this_present_timeout_usec || that_present_timeout_usec) {
        if (!(this_present_timeout_usec && that_present_timeout_usec))
          return false;
        if (this.timeout_usec != that.timeout_usec)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type.getValue());

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_timeout_usec = true;
      list.add(present_timeout_usec);
      if (present_timeout_usec)
        list.add(timeout_usec);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkAndInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_usec()).compareTo(other.isSetTimeout_usec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_usec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_usec, other.timeout_usec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkAndInsert_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_usec:");
      sb.append(this.timeout_usec);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAndInsert_argsStandardSchemeFactory implements SchemeFactory {
      public checkAndInsert_argsStandardScheme getScheme() {
        return new checkAndInsert_argsStandardScheme();
      }
    }

    private static class checkAndInsert_argsStandardScheme extends StandardScheme<checkAndInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkAndInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = SysType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMEOUT_USEC
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeout_usec = iprot.readI32();
                struct.setTimeout_usecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkAndInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMEOUT_USEC_FIELD_DESC);
        oprot.writeI32(struct.timeout_usec);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAndInsert_argsTupleSchemeFactory implements SchemeFactory {
      public checkAndInsert_argsTupleScheme getScheme() {
        return new checkAndInsert_argsTupleScheme();
      }
    }

    private static class checkAndInsert_argsTupleScheme extends TupleScheme<checkAndInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkAndInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetTimeout_usec()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetTimeout_usec()) {
          oprot.writeI32(struct.timeout_usec);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkAndInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.type = SysType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeout_usec = iprot.readI32();
          struct.setTimeout_usecIsSet(true);
        }
      }
    }

  }

  public static class checkAndInsert_result implements org.apache.thrift.TBase<checkAndInsert_result, checkAndInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAndInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkAndInsert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkAndInsert_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see Status
     */
    public Status success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAndInsert_result.class, metaDataMap);
    }

    public checkAndInsert_result() {
    }

    public checkAndInsert_result(
      Status success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAndInsert_result(checkAndInsert_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public checkAndInsert_result deepCopy() {
      return new checkAndInsert_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see Status
     */
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public checkAndInsert_result setSuccess(Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAndInsert_result)
        return this.equals((checkAndInsert_result)that);
      return false;
    }

    public boolean equals(checkAndInsert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(checkAndInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkAndInsert_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAndInsert_resultStandardSchemeFactory implements SchemeFactory {
      public checkAndInsert_resultStandardScheme getScheme() {
        return new checkAndInsert_resultStandardScheme();
      }
    }

    private static class checkAndInsert_resultStandardScheme extends StandardScheme<checkAndInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkAndInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkAndInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAndInsert_resultTupleSchemeFactory implements SchemeFactory {
      public checkAndInsert_resultTupleScheme getScheme() {
        return new checkAndInsert_resultTupleScheme();
      }
    }

    private static class checkAndInsert_resultTupleScheme extends TupleScheme<checkAndInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkAndInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkAndInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.inveno.feeder.thrift.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkAndInsertMul_args implements org.apache.thrift.TBase<checkAndInsertMul_args, checkAndInsertMul_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndInsertMul_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAndInsertMul_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TIMEOUT_USEC_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_usec", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkAndInsertMul_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkAndInsertMul_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see SysType
     */
    public SysType type; // required
    public List<String> keys; // required
    public int timeout_usec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see SysType
       */
      TYPE((short)1, "type"),
      KEYS((short)2, "keys"),
      TIMEOUT_USEC((short)3, "timeout_usec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // KEYS
            return KEYS;
          case 3: // TIMEOUT_USEC
            return TIMEOUT_USEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUT_USEC_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SysType.class)));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIMEOUT_USEC, new org.apache.thrift.meta_data.FieldMetaData("timeout_usec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAndInsertMul_args.class, metaDataMap);
    }

    public checkAndInsertMul_args() {
    }

    public checkAndInsertMul_args(
      SysType type,
      List<String> keys,
      int timeout_usec)
    {
      this();
      this.type = type;
      this.keys = keys;
      this.timeout_usec = timeout_usec;
      setTimeout_usecIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAndInsertMul_args(checkAndInsertMul_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.timeout_usec = other.timeout_usec;
    }

    public checkAndInsertMul_args deepCopy() {
      return new checkAndInsertMul_args(this);
    }

    @Override
    public void clear() {
      this.type = null;
      this.keys = null;
      setTimeout_usecIsSet(false);
      this.timeout_usec = 0;
    }

    /**
     * 
     * @see SysType
     */
    public SysType getType() {
      return this.type;
    }

    /**
     * 
     * @see SysType
     */
    public checkAndInsertMul_args setType(SysType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public checkAndInsertMul_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public int getTimeout_usec() {
      return this.timeout_usec;
    }

    public checkAndInsertMul_args setTimeout_usec(int timeout_usec) {
      this.timeout_usec = timeout_usec;
      setTimeout_usecIsSet(true);
      return this;
    }

    public void unsetTimeout_usec() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_USEC_ISSET_ID);
    }

    /** Returns true if field timeout_usec is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_usec() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_USEC_ISSET_ID);
    }

    public void setTimeout_usecIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_USEC_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((SysType)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case TIMEOUT_USEC:
        if (value == null) {
          unsetTimeout_usec();
        } else {
          setTimeout_usec((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case KEYS:
        return getKeys();

      case TIMEOUT_USEC:
        return getTimeout_usec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case KEYS:
        return isSetKeys();
      case TIMEOUT_USEC:
        return isSetTimeout_usec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAndInsertMul_args)
        return this.equals((checkAndInsertMul_args)that);
      return false;
    }

    public boolean equals(checkAndInsertMul_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_timeout_usec = true;
      boolean that_present_timeout_usec = true;
      if (this_present_timeout_usec || that_present_timeout_usec) {
        if (!(this_present_timeout_usec && that_present_timeout_usec))
          return false;
        if (this.timeout_usec != that.timeout_usec)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type.getValue());

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_timeout_usec = true;
      list.add(present_timeout_usec);
      if (present_timeout_usec)
        list.add(timeout_usec);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkAndInsertMul_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_usec()).compareTo(other.isSetTimeout_usec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_usec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_usec, other.timeout_usec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkAndInsertMul_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_usec:");
      sb.append(this.timeout_usec);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAndInsertMul_argsStandardSchemeFactory implements SchemeFactory {
      public checkAndInsertMul_argsStandardScheme getScheme() {
        return new checkAndInsertMul_argsStandardScheme();
      }
    }

    private static class checkAndInsertMul_argsStandardScheme extends StandardScheme<checkAndInsertMul_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkAndInsertMul_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = com.inveno.feeder.thrift.SysType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.keys.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMEOUT_USEC
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeout_usec = iprot.readI32();
                struct.setTimeout_usecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkAndInsertMul_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter3 : struct.keys)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMEOUT_USEC_FIELD_DESC);
        oprot.writeI32(struct.timeout_usec);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAndInsertMul_argsTupleSchemeFactory implements SchemeFactory {
      public checkAndInsertMul_argsTupleScheme getScheme() {
        return new checkAndInsertMul_argsTupleScheme();
      }
    }

    private static class checkAndInsertMul_argsTupleScheme extends TupleScheme<checkAndInsertMul_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkAndInsertMul_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetTimeout_usec()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter4 : struct.keys)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetTimeout_usec()) {
          oprot.writeI32(struct.timeout_usec);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkAndInsertMul_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.type = com.inveno.feeder.thrift.SysType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.keys.add(_elem6);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeout_usec = iprot.readI32();
          struct.setTimeout_usecIsSet(true);
        }
      }
    }

  }

  public static class checkAndInsertMul_result implements org.apache.thrift.TBase<checkAndInsertMul_result, checkAndInsertMul_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkAndInsertMul_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAndInsertMul_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkAndInsertMul_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkAndInsertMul_resultTupleSchemeFactory());
    }

    public List<Status> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAndInsertMul_result.class, metaDataMap);
    }

    public checkAndInsertMul_result() {
    }

    public checkAndInsertMul_result(
      List<Status> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAndInsertMul_result(checkAndInsertMul_result other) {
      if (other.isSetSuccess()) {
        List<Status> __this__success = new ArrayList<Status>(other.success.size());
        for (Status other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public checkAndInsertMul_result deepCopy() {
      return new checkAndInsertMul_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Status> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Status elem) {
      if (this.success == null) {
        this.success = new ArrayList<Status>();
      }
      this.success.add(elem);
    }

    public List<Status> getSuccess() {
      return this.success;
    }

    public checkAndInsertMul_result setSuccess(List<Status> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Status>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAndInsertMul_result)
        return this.equals((checkAndInsertMul_result)that);
      return false;
    }

    public boolean equals(checkAndInsertMul_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkAndInsertMul_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkAndInsertMul_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAndInsertMul_resultStandardSchemeFactory implements SchemeFactory {
      public checkAndInsertMul_resultStandardScheme getScheme() {
        return new checkAndInsertMul_resultStandardScheme();
      }
    }

    private static class checkAndInsertMul_resultStandardScheme extends StandardScheme<checkAndInsertMul_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkAndInsertMul_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Status>(_list8.size);
                  Status _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = com.inveno.feeder.thrift.Status.findByValue(iprot.readI32());
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkAndInsertMul_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (Status _iter11 : struct.success)
            {
              oprot.writeI32(_iter11.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAndInsertMul_resultTupleSchemeFactory implements SchemeFactory {
      public checkAndInsertMul_resultTupleScheme getScheme() {
        return new checkAndInsertMul_resultTupleScheme();
      }
    }

    private static class checkAndInsertMul_resultTupleScheme extends TupleScheme<checkAndInsertMul_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkAndInsertMul_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Status _iter12 : struct.success)
            {
              oprot.writeI32(_iter12.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkAndInsertMul_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Status>(_list13.size);
            Status _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = com.inveno.feeder.thrift.Status.findByValue(iprot.readI32());
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class existMul_args implements org.apache.thrift.TBase<existMul_args, existMul_args._Fields>, java.io.Serializable, Cloneable, Comparable<existMul_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("existMul_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TIMEOUT_USEC_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_usec", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new existMul_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new existMul_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see SysType
     */
    public SysType type; // required
    public List<String> keys; // required
    public int timeout_usec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see SysType
       */
      TYPE((short)1, "type"),
      KEYS((short)2, "keys"),
      TIMEOUT_USEC((short)3, "timeout_usec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // KEYS
            return KEYS;
          case 3: // TIMEOUT_USEC
            return TIMEOUT_USEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUT_USEC_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SysType.class)));
      tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIMEOUT_USEC, new org.apache.thrift.meta_data.FieldMetaData("timeout_usec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existMul_args.class, metaDataMap);
    }

    public existMul_args() {
    }

    public existMul_args(
      SysType type,
      List<String> keys,
      int timeout_usec)
    {
      this();
      this.type = type;
      this.keys = keys;
      this.timeout_usec = timeout_usec;
      setTimeout_usecIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public existMul_args(existMul_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetKeys()) {
        List<String> __this__keys = new ArrayList<String>(other.keys);
        this.keys = __this__keys;
      }
      this.timeout_usec = other.timeout_usec;
    }

    public existMul_args deepCopy() {
      return new existMul_args(this);
    }

    @Override
    public void clear() {
      this.type = null;
      this.keys = null;
      setTimeout_usecIsSet(false);
      this.timeout_usec = 0;
    }

    /**
     * 
     * @see SysType
     */
    public SysType getType() {
      return this.type;
    }

    /**
     * 
     * @see SysType
     */
    public existMul_args setType(SysType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public int getKeysSize() {
      return (this.keys == null) ? 0 : this.keys.size();
    }

    public java.util.Iterator<String> getKeysIterator() {
      return (this.keys == null) ? null : this.keys.iterator();
    }

    public void addToKeys(String elem) {
      if (this.keys == null) {
        this.keys = new ArrayList<String>();
      }
      this.keys.add(elem);
    }

    public List<String> getKeys() {
      return this.keys;
    }

    public existMul_args setKeys(List<String> keys) {
      this.keys = keys;
      return this;
    }

    public void unsetKeys() {
      this.keys = null;
    }

    /** Returns true if field keys is set (has been assigned a value) and false otherwise */
    public boolean isSetKeys() {
      return this.keys != null;
    }

    public void setKeysIsSet(boolean value) {
      if (!value) {
        this.keys = null;
      }
    }

    public int getTimeout_usec() {
      return this.timeout_usec;
    }

    public existMul_args setTimeout_usec(int timeout_usec) {
      this.timeout_usec = timeout_usec;
      setTimeout_usecIsSet(true);
      return this;
    }

    public void unsetTimeout_usec() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_USEC_ISSET_ID);
    }

    /** Returns true if field timeout_usec is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_usec() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_USEC_ISSET_ID);
    }

    public void setTimeout_usecIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_USEC_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((SysType)value);
        }
        break;

      case KEYS:
        if (value == null) {
          unsetKeys();
        } else {
          setKeys((List<String>)value);
        }
        break;

      case TIMEOUT_USEC:
        if (value == null) {
          unsetTimeout_usec();
        } else {
          setTimeout_usec((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case KEYS:
        return getKeys();

      case TIMEOUT_USEC:
        return getTimeout_usec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case KEYS:
        return isSetKeys();
      case TIMEOUT_USEC:
        return isSetTimeout_usec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof existMul_args)
        return this.equals((existMul_args)that);
      return false;
    }

    public boolean equals(existMul_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_keys = true && this.isSetKeys();
      boolean that_present_keys = true && that.isSetKeys();
      if (this_present_keys || that_present_keys) {
        if (!(this_present_keys && that_present_keys))
          return false;
        if (!this.keys.equals(that.keys))
          return false;
      }

      boolean this_present_timeout_usec = true;
      boolean that_present_timeout_usec = true;
      if (this_present_timeout_usec || that_present_timeout_usec) {
        if (!(this_present_timeout_usec && that_present_timeout_usec))
          return false;
        if (this.timeout_usec != that.timeout_usec)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type.getValue());

      boolean present_keys = true && (isSetKeys());
      list.add(present_keys);
      if (present_keys)
        list.add(keys);

      boolean present_timeout_usec = true;
      list.add(present_timeout_usec);
      if (present_timeout_usec)
        list.add(timeout_usec);

      return list.hashCode();
    }

    @Override
    public int compareTo(existMul_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_usec()).compareTo(other.isSetTimeout_usec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_usec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_usec, other.timeout_usec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("existMul_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keys:");
      if (this.keys == null) {
        sb.append("null");
      } else {
        sb.append(this.keys);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_usec:");
      sb.append(this.timeout_usec);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class existMul_argsStandardSchemeFactory implements SchemeFactory {
      public existMul_argsStandardScheme getScheme() {
        return new existMul_argsStandardScheme();
      }
    }

    private static class existMul_argsStandardScheme extends StandardScheme<existMul_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, existMul_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = com.inveno.feeder.thrift.SysType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.keys = new ArrayList<String>(_list16.size);
                  String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.keys.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMEOUT_USEC
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeout_usec = iprot.readI32();
                struct.setTimeout_usecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, existMul_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.keys != null) {
          oprot.writeFieldBegin(KEYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
            for (String _iter19 : struct.keys)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMEOUT_USEC_FIELD_DESC);
        oprot.writeI32(struct.timeout_usec);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class existMul_argsTupleSchemeFactory implements SchemeFactory {
      public existMul_argsTupleScheme getScheme() {
        return new existMul_argsTupleScheme();
      }
    }

    private static class existMul_argsTupleScheme extends TupleScheme<existMul_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, existMul_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetKeys()) {
          optionals.set(1);
        }
        if (struct.isSetTimeout_usec()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetKeys()) {
          {
            oprot.writeI32(struct.keys.size());
            for (String _iter20 : struct.keys)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetTimeout_usec()) {
          oprot.writeI32(struct.timeout_usec);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, existMul_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.type = com.inveno.feeder.thrift.SysType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keys = new ArrayList<String>(_list21.size);
            String _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readString();
              struct.keys.add(_elem22);
            }
          }
          struct.setKeysIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeout_usec = iprot.readI32();
          struct.setTimeout_usecIsSet(true);
        }
      }
    }

  }

  public static class existMul_result implements org.apache.thrift.TBase<existMul_result, existMul_result._Fields>, java.io.Serializable, Cloneable, Comparable<existMul_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("existMul_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new existMul_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new existMul_resultTupleSchemeFactory());
    }

    public List<Status> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existMul_result.class, metaDataMap);
    }

    public existMul_result() {
    }

    public existMul_result(
      List<Status> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public existMul_result(existMul_result other) {
      if (other.isSetSuccess()) {
        List<Status> __this__success = new ArrayList<Status>(other.success.size());
        for (Status other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public existMul_result deepCopy() {
      return new existMul_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Status> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Status elem) {
      if (this.success == null) {
        this.success = new ArrayList<Status>();
      }
      this.success.add(elem);
    }

    public List<Status> getSuccess() {
      return this.success;
    }

    public existMul_result setSuccess(List<Status> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Status>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof existMul_result)
        return this.equals((existMul_result)that);
      return false;
    }

    public boolean equals(existMul_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(existMul_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("existMul_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class existMul_resultStandardSchemeFactory implements SchemeFactory {
      public existMul_resultStandardScheme getScheme() {
        return new existMul_resultStandardScheme();
      }
    }

    private static class existMul_resultStandardScheme extends StandardScheme<existMul_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, existMul_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Status>(_list24.size);
                  Status _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = com.inveno.feeder.thrift.Status.findByValue(iprot.readI32());
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, existMul_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (Status _iter27 : struct.success)
            {
              oprot.writeI32(_iter27.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class existMul_resultTupleSchemeFactory implements SchemeFactory {
      public existMul_resultTupleScheme getScheme() {
        return new existMul_resultTupleScheme();
      }
    }

    private static class existMul_resultTupleScheme extends TupleScheme<existMul_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, existMul_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Status _iter28 : struct.success)
            {
              oprot.writeI32(_iter28.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, existMul_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Status>(_list29.size);
            Status _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = com.inveno.feeder.thrift.Status.findByValue(iprot.readI32());
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
