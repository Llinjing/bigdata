/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.inveno.bigdata.query.data.util.thrift.ufs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-25")
public class UserInfo implements org.apache.thrift.TBase<UserInfo, UserInfo._Fields>, java.io.Serializable, Cloneable,
		Comparable<UserInfo> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"UserInfo");

	private static final org.apache.thrift.protocol.TField WEIGHTED_CATEGORIES_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"weightedCategories", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField WEIGHTED_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"weightedTags", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField IMPRESSION_TITLE_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"impressionTitleTags", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField LDA_TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"ldaTopic", org.apache.thrift.protocol.TType.STRING, (short) 8);
	private static final org.apache.thrift.protocol.TField LAST_CLICK_TIME_OF_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"lastClickTimeOfCategory", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField LAST_IMPRESSION_TIME_OF_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"lastImpressionTimeOfCategory", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField USER_GMP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"userGmp", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField USERPROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"userprofile", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new UserInfoStandardSchemeFactory());
		schemes.put(TupleScheme.class, new UserInfoTupleSchemeFactory());
	}

	public String weightedCategories; // required
	public String weightedTags; // required
	public String impressionTitleTags; // optional
	public String ldaTopic; // optional
	public String lastClickTimeOfCategory; // optional
	public String lastImpressionTimeOfCategory; // optional
	public String userGmp; // optional
	public String userprofile; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		WEIGHTED_CATEGORIES((short) 1, "weightedCategories"), WEIGHTED_TAGS((short) 2,
				"weightedTags"), IMPRESSION_TITLE_TAGS((short) 3, "impressionTitleTags"), LDA_TOPIC((short) 8,
						"ldaTopic"), LAST_CLICK_TIME_OF_CATEGORY((short) 4,
								"lastClickTimeOfCategory"), LAST_IMPRESSION_TIME_OF_CATEGORY((short) 5,
										"lastImpressionTimeOfCategory"), USER_GMP((short) 6,
												"userGmp"), USERPROFILE((short) 7, "userprofile");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // WEIGHTED_CATEGORIES
				return WEIGHTED_CATEGORIES;
			case 2: // WEIGHTED_TAGS
				return WEIGHTED_TAGS;
			case 3: // IMPRESSION_TITLE_TAGS
				return IMPRESSION_TITLE_TAGS;
			case 8: // LDA_TOPIC
				return LDA_TOPIC;
			case 4: // LAST_CLICK_TIME_OF_CATEGORY
				return LAST_CLICK_TIME_OF_CATEGORY;
			case 5: // LAST_IMPRESSION_TIME_OF_CATEGORY
				return LAST_IMPRESSION_TIME_OF_CATEGORY;
			case 6: // USER_GMP
				return USER_GMP;
			case 7: // USERPROFILE
				return USERPROFILE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	@SuppressWarnings("unused")
	private static final _Fields optionals[] = { _Fields.IMPRESSION_TITLE_TAGS, _Fields.LDA_TOPIC,
			_Fields.LAST_CLICK_TIME_OF_CATEGORY, _Fields.LAST_IMPRESSION_TIME_OF_CATEGORY, _Fields.USER_GMP,
			_Fields.USERPROFILE };
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.WEIGHTED_CATEGORIES,
				new org.apache.thrift.meta_data.FieldMetaData("weightedCategories",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WEIGHTED_TAGS,
				new org.apache.thrift.meta_data.FieldMetaData("weightedTags",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IMPRESSION_TITLE_TAGS,
				new org.apache.thrift.meta_data.FieldMetaData("impressionTitleTags",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LDA_TOPIC,
				new org.apache.thrift.meta_data.FieldMetaData("ldaTopic",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LAST_CLICK_TIME_OF_CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("lastClickTimeOfCategory",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LAST_IMPRESSION_TIME_OF_CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("lastImpressionTimeOfCategory",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.USER_GMP,
				new org.apache.thrift.meta_data.FieldMetaData("userGmp",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.USERPROFILE,
				new org.apache.thrift.meta_data.FieldMetaData("userprofile",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo.class, metaDataMap);
	}

	public UserInfo() {
	}

	public UserInfo(String weightedCategories, String weightedTags) {
		this();
		this.weightedCategories = weightedCategories;
		this.weightedTags = weightedTags;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public UserInfo(UserInfo other) {
		if (other.isSetWeightedCategories()) {
			this.weightedCategories = other.weightedCategories;
		}
		if (other.isSetWeightedTags()) {
			this.weightedTags = other.weightedTags;
		}
		if (other.isSetImpressionTitleTags()) {
			this.impressionTitleTags = other.impressionTitleTags;
		}
		if (other.isSetLdaTopic()) {
			this.ldaTopic = other.ldaTopic;
		}
		if (other.isSetLastClickTimeOfCategory()) {
			this.lastClickTimeOfCategory = other.lastClickTimeOfCategory;
		}
		if (other.isSetLastImpressionTimeOfCategory()) {
			this.lastImpressionTimeOfCategory = other.lastImpressionTimeOfCategory;
		}
		if (other.isSetUserGmp()) {
			this.userGmp = other.userGmp;
		}
		if (other.isSetUserprofile()) {
			this.userprofile = other.userprofile;
		}
	}

	public UserInfo deepCopy() {
		return new UserInfo(this);
	}

	@Override
	public void clear() {
		this.weightedCategories = null;
		this.weightedTags = null;
		this.impressionTitleTags = null;
		this.ldaTopic = null;
		this.lastClickTimeOfCategory = null;
		this.lastImpressionTimeOfCategory = null;
		this.userGmp = null;
		this.userprofile = null;
	}

	public String getWeightedCategories() {
		return this.weightedCategories;
	}

	public UserInfo setWeightedCategories(String weightedCategories) {
		this.weightedCategories = weightedCategories;
		return this;
	}

	public void unsetWeightedCategories() {
		this.weightedCategories = null;
	}

	/**
	 * Returns true if field weightedCategories is set (has been assigned a
	 * value) and false otherwise
	 */
	public boolean isSetWeightedCategories() {
		return this.weightedCategories != null;
	}

	public void setWeightedCategoriesIsSet(boolean value) {
		if (!value) {
			this.weightedCategories = null;
		}
	}

	public String getWeightedTags() {
		return this.weightedTags;
	}

	public UserInfo setWeightedTags(String weightedTags) {
		this.weightedTags = weightedTags;
		return this;
	}

	public void unsetWeightedTags() {
		this.weightedTags = null;
	}

	/**
	 * Returns true if field weightedTags is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetWeightedTags() {
		return this.weightedTags != null;
	}

	public void setWeightedTagsIsSet(boolean value) {
		if (!value) {
			this.weightedTags = null;
		}
	}

	public String getImpressionTitleTags() {
		return this.impressionTitleTags;
	}

	public UserInfo setImpressionTitleTags(String impressionTitleTags) {
		this.impressionTitleTags = impressionTitleTags;
		return this;
	}

	public void unsetImpressionTitleTags() {
		this.impressionTitleTags = null;
	}

	/**
	 * Returns true if field impressionTitleTags is set (has been assigned a
	 * value) and false otherwise
	 */
	public boolean isSetImpressionTitleTags() {
		return this.impressionTitleTags != null;
	}

	public void setImpressionTitleTagsIsSet(boolean value) {
		if (!value) {
			this.impressionTitleTags = null;
		}
	}

	public String getLdaTopic() {
		return this.ldaTopic;
	}

	public UserInfo setLdaTopic(String ldaTopic) {
		this.ldaTopic = ldaTopic;
		return this;
	}

	public void unsetLdaTopic() {
		this.ldaTopic = null;
	}

	/**
	 * Returns true if field ldaTopic is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetLdaTopic() {
		return this.ldaTopic != null;
	}

	public void setLdaTopicIsSet(boolean value) {
		if (!value) {
			this.ldaTopic = null;
		}
	}

	public String getLastClickTimeOfCategory() {
		return this.lastClickTimeOfCategory;
	}

	public UserInfo setLastClickTimeOfCategory(String lastClickTimeOfCategory) {
		this.lastClickTimeOfCategory = lastClickTimeOfCategory;
		return this;
	}

	public void unsetLastClickTimeOfCategory() {
		this.lastClickTimeOfCategory = null;
	}

	/**
	 * Returns true if field lastClickTimeOfCategory is set (has been assigned a
	 * value) and false otherwise
	 */
	public boolean isSetLastClickTimeOfCategory() {
		return this.lastClickTimeOfCategory != null;
	}

	public void setLastClickTimeOfCategoryIsSet(boolean value) {
		if (!value) {
			this.lastClickTimeOfCategory = null;
		}
	}

	public String getLastImpressionTimeOfCategory() {
		return this.lastImpressionTimeOfCategory;
	}

	public UserInfo setLastImpressionTimeOfCategory(String lastImpressionTimeOfCategory) {
		this.lastImpressionTimeOfCategory = lastImpressionTimeOfCategory;
		return this;
	}

	public void unsetLastImpressionTimeOfCategory() {
		this.lastImpressionTimeOfCategory = null;
	}

	/**
	 * Returns true if field lastImpressionTimeOfCategory is set (has been
	 * assigned a value) and false otherwise
	 */
	public boolean isSetLastImpressionTimeOfCategory() {
		return this.lastImpressionTimeOfCategory != null;
	}

	public void setLastImpressionTimeOfCategoryIsSet(boolean value) {
		if (!value) {
			this.lastImpressionTimeOfCategory = null;
		}
	}

	public String getUserGmp() {
		return this.userGmp;
	}

	public UserInfo setUserGmp(String userGmp) {
		this.userGmp = userGmp;
		return this;
	}

	public void unsetUserGmp() {
		this.userGmp = null;
	}

	/**
	 * Returns true if field userGmp is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetUserGmp() {
		return this.userGmp != null;
	}

	public void setUserGmpIsSet(boolean value) {
		if (!value) {
			this.userGmp = null;
		}
	}

	public String getUserprofile() {
		return this.userprofile;
	}

	public UserInfo setUserprofile(String userprofile) {
		this.userprofile = userprofile;
		return this;
	}

	public void unsetUserprofile() {
		this.userprofile = null;
	}

	/**
	 * Returns true if field userprofile is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetUserprofile() {
		return this.userprofile != null;
	}

	public void setUserprofileIsSet(boolean value) {
		if (!value) {
			this.userprofile = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case WEIGHTED_CATEGORIES:
			if (value == null) {
				unsetWeightedCategories();
			} else {
				setWeightedCategories((String) value);
			}
			break;

		case WEIGHTED_TAGS:
			if (value == null) {
				unsetWeightedTags();
			} else {
				setWeightedTags((String) value);
			}
			break;

		case IMPRESSION_TITLE_TAGS:
			if (value == null) {
				unsetImpressionTitleTags();
			} else {
				setImpressionTitleTags((String) value);
			}
			break;

		case LDA_TOPIC:
			if (value == null) {
				unsetLdaTopic();
			} else {
				setLdaTopic((String) value);
			}
			break;

		case LAST_CLICK_TIME_OF_CATEGORY:
			if (value == null) {
				unsetLastClickTimeOfCategory();
			} else {
				setLastClickTimeOfCategory((String) value);
			}
			break;

		case LAST_IMPRESSION_TIME_OF_CATEGORY:
			if (value == null) {
				unsetLastImpressionTimeOfCategory();
			} else {
				setLastImpressionTimeOfCategory((String) value);
			}
			break;

		case USER_GMP:
			if (value == null) {
				unsetUserGmp();
			} else {
				setUserGmp((String) value);
			}
			break;

		case USERPROFILE:
			if (value == null) {
				unsetUserprofile();
			} else {
				setUserprofile((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case WEIGHTED_CATEGORIES:
			return getWeightedCategories();

		case WEIGHTED_TAGS:
			return getWeightedTags();

		case IMPRESSION_TITLE_TAGS:
			return getImpressionTitleTags();

		case LDA_TOPIC:
			return getLdaTopic();

		case LAST_CLICK_TIME_OF_CATEGORY:
			return getLastClickTimeOfCategory();

		case LAST_IMPRESSION_TIME_OF_CATEGORY:
			return getLastImpressionTimeOfCategory();

		case USER_GMP:
			return getUserGmp();

		case USERPROFILE:
			return getUserprofile();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case WEIGHTED_CATEGORIES:
			return isSetWeightedCategories();
		case WEIGHTED_TAGS:
			return isSetWeightedTags();
		case IMPRESSION_TITLE_TAGS:
			return isSetImpressionTitleTags();
		case LDA_TOPIC:
			return isSetLdaTopic();
		case LAST_CLICK_TIME_OF_CATEGORY:
			return isSetLastClickTimeOfCategory();
		case LAST_IMPRESSION_TIME_OF_CATEGORY:
			return isSetLastImpressionTimeOfCategory();
		case USER_GMP:
			return isSetUserGmp();
		case USERPROFILE:
			return isSetUserprofile();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof UserInfo)
			return this.equals((UserInfo) that);
		return false;
	}

	public boolean equals(UserInfo that) {
		if (that == null)
			return false;

		boolean this_present_weightedCategories = true && this.isSetWeightedCategories();
		boolean that_present_weightedCategories = true && that.isSetWeightedCategories();
		if (this_present_weightedCategories || that_present_weightedCategories) {
			if (!(this_present_weightedCategories && that_present_weightedCategories))
				return false;
			if (!this.weightedCategories.equals(that.weightedCategories))
				return false;
		}

		boolean this_present_weightedTags = true && this.isSetWeightedTags();
		boolean that_present_weightedTags = true && that.isSetWeightedTags();
		if (this_present_weightedTags || that_present_weightedTags) {
			if (!(this_present_weightedTags && that_present_weightedTags))
				return false;
			if (!this.weightedTags.equals(that.weightedTags))
				return false;
		}

		boolean this_present_impressionTitleTags = true && this.isSetImpressionTitleTags();
		boolean that_present_impressionTitleTags = true && that.isSetImpressionTitleTags();
		if (this_present_impressionTitleTags || that_present_impressionTitleTags) {
			if (!(this_present_impressionTitleTags && that_present_impressionTitleTags))
				return false;
			if (!this.impressionTitleTags.equals(that.impressionTitleTags))
				return false;
		}

		boolean this_present_ldaTopic = true && this.isSetLdaTopic();
		boolean that_present_ldaTopic = true && that.isSetLdaTopic();
		if (this_present_ldaTopic || that_present_ldaTopic) {
			if (!(this_present_ldaTopic && that_present_ldaTopic))
				return false;
			if (!this.ldaTopic.equals(that.ldaTopic))
				return false;
		}

		boolean this_present_lastClickTimeOfCategory = true && this.isSetLastClickTimeOfCategory();
		boolean that_present_lastClickTimeOfCategory = true && that.isSetLastClickTimeOfCategory();
		if (this_present_lastClickTimeOfCategory || that_present_lastClickTimeOfCategory) {
			if (!(this_present_lastClickTimeOfCategory && that_present_lastClickTimeOfCategory))
				return false;
			if (!this.lastClickTimeOfCategory.equals(that.lastClickTimeOfCategory))
				return false;
		}

		boolean this_present_lastImpressionTimeOfCategory = true && this.isSetLastImpressionTimeOfCategory();
		boolean that_present_lastImpressionTimeOfCategory = true && that.isSetLastImpressionTimeOfCategory();
		if (this_present_lastImpressionTimeOfCategory || that_present_lastImpressionTimeOfCategory) {
			if (!(this_present_lastImpressionTimeOfCategory && that_present_lastImpressionTimeOfCategory))
				return false;
			if (!this.lastImpressionTimeOfCategory.equals(that.lastImpressionTimeOfCategory))
				return false;
		}

		boolean this_present_userGmp = true && this.isSetUserGmp();
		boolean that_present_userGmp = true && that.isSetUserGmp();
		if (this_present_userGmp || that_present_userGmp) {
			if (!(this_present_userGmp && that_present_userGmp))
				return false;
			if (!this.userGmp.equals(that.userGmp))
				return false;
		}

		boolean this_present_userprofile = true && this.isSetUserprofile();
		boolean that_present_userprofile = true && that.isSetUserprofile();
		if (this_present_userprofile || that_present_userprofile) {
			if (!(this_present_userprofile && that_present_userprofile))
				return false;
			if (!this.userprofile.equals(that.userprofile))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_weightedCategories = true && (isSetWeightedCategories());
		list.add(present_weightedCategories);
		if (present_weightedCategories)
			list.add(weightedCategories);

		boolean present_weightedTags = true && (isSetWeightedTags());
		list.add(present_weightedTags);
		if (present_weightedTags)
			list.add(weightedTags);

		boolean present_impressionTitleTags = true && (isSetImpressionTitleTags());
		list.add(present_impressionTitleTags);
		if (present_impressionTitleTags)
			list.add(impressionTitleTags);

		boolean present_ldaTopic = true && (isSetLdaTopic());
		list.add(present_ldaTopic);
		if (present_ldaTopic)
			list.add(ldaTopic);

		boolean present_lastClickTimeOfCategory = true && (isSetLastClickTimeOfCategory());
		list.add(present_lastClickTimeOfCategory);
		if (present_lastClickTimeOfCategory)
			list.add(lastClickTimeOfCategory);

		boolean present_lastImpressionTimeOfCategory = true && (isSetLastImpressionTimeOfCategory());
		list.add(present_lastImpressionTimeOfCategory);
		if (present_lastImpressionTimeOfCategory)
			list.add(lastImpressionTimeOfCategory);

		boolean present_userGmp = true && (isSetUserGmp());
		list.add(present_userGmp);
		if (present_userGmp)
			list.add(userGmp);

		boolean present_userprofile = true && (isSetUserprofile());
		list.add(present_userprofile);
		if (present_userprofile)
			list.add(userprofile);

		return list.hashCode();
	}

	@Override
	public int compareTo(UserInfo other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetWeightedCategories()).compareTo(other.isSetWeightedCategories());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWeightedCategories()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weightedCategories, other.weightedCategories);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetWeightedTags()).compareTo(other.isSetWeightedTags());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWeightedTags()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weightedTags, other.weightedTags);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetImpressionTitleTags()).compareTo(other.isSetImpressionTitleTags());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetImpressionTitleTags()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impressionTitleTags,
					other.impressionTitleTags);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLdaTopic()).compareTo(other.isSetLdaTopic());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLdaTopic()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ldaTopic, other.ldaTopic);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLastClickTimeOfCategory())
				.compareTo(other.isSetLastClickTimeOfCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLastClickTimeOfCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastClickTimeOfCategory,
					other.lastClickTimeOfCategory);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLastImpressionTimeOfCategory())
				.compareTo(other.isSetLastImpressionTimeOfCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLastImpressionTimeOfCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastImpressionTimeOfCategory,
					other.lastImpressionTimeOfCategory);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUserGmp()).compareTo(other.isSetUserGmp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUserGmp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userGmp, other.userGmp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUserprofile()).compareTo(other.isSetUserprofile());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUserprofile()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userprofile, other.userprofile);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("UserInfo(");
		boolean first = true;

		sb.append("weightedCategories:");
		if (this.weightedCategories == null) {
			sb.append("null");
		} else {
			sb.append(this.weightedCategories);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("weightedTags:");
		if (this.weightedTags == null) {
			sb.append("null");
		} else {
			sb.append(this.weightedTags);
		}
		first = false;
		if (isSetImpressionTitleTags()) {
			if (!first)
				sb.append(", ");
			sb.append("impressionTitleTags:");
			if (this.impressionTitleTags == null) {
				sb.append("null");
			} else {
				sb.append(this.impressionTitleTags);
			}
			first = false;
		}
		if (isSetLdaTopic()) {
			if (!first)
				sb.append(", ");
			sb.append("ldaTopic:");
			if (this.ldaTopic == null) {
				sb.append("null");
			} else {
				sb.append(this.ldaTopic);
			}
			first = false;
		}
		if (isSetLastClickTimeOfCategory()) {
			if (!first)
				sb.append(", ");
			sb.append("lastClickTimeOfCategory:");
			if (this.lastClickTimeOfCategory == null) {
				sb.append("null");
			} else {
				sb.append(this.lastClickTimeOfCategory);
			}
			first = false;
		}
		if (isSetLastImpressionTimeOfCategory()) {
			if (!first)
				sb.append(", ");
			sb.append("lastImpressionTimeOfCategory:");
			if (this.lastImpressionTimeOfCategory == null) {
				sb.append("null");
			} else {
				sb.append(this.lastImpressionTimeOfCategory);
			}
			first = false;
		}
		if (isSetUserGmp()) {
			if (!first)
				sb.append(", ");
			sb.append("userGmp:");
			if (this.userGmp == null) {
				sb.append("null");
			} else {
				sb.append(this.userGmp);
			}
			first = false;
		}
		if (isSetUserprofile()) {
			if (!first)
				sb.append(", ");
			sb.append("userprofile:");
			if (this.userprofile == null) {
				sb.append("null");
			} else {
				sb.append(this.userprofile);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (weightedCategories == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'weightedCategories' was not present! Struct: " + toString());
		}
		if (weightedTags == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'weightedTags' was not present! Struct: " + toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class UserInfoStandardSchemeFactory implements SchemeFactory {
		public UserInfoStandardScheme getScheme() {
			return new UserInfoStandardScheme();
		}
	}

	private static class UserInfoStandardScheme extends StandardScheme<UserInfo> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // WEIGHTED_CATEGORIES
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.weightedCategories = iprot.readString();
						struct.setWeightedCategoriesIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // WEIGHTED_TAGS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.weightedTags = iprot.readString();
						struct.setWeightedTagsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // IMPRESSION_TITLE_TAGS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.impressionTitleTags = iprot.readString();
						struct.setImpressionTitleTagsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // LDA_TOPIC
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.ldaTopic = iprot.readString();
						struct.setLdaTopicIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // LAST_CLICK_TIME_OF_CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.lastClickTimeOfCategory = iprot.readString();
						struct.setLastClickTimeOfCategoryIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // LAST_IMPRESSION_TIME_OF_CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.lastImpressionTimeOfCategory = iprot.readString();
						struct.setLastImpressionTimeOfCategoryIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // USER_GMP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.userGmp = iprot.readString();
						struct.setUserGmpIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // USERPROFILE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.userprofile = iprot.readString();
						struct.setUserprofileIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.weightedCategories != null) {
				oprot.writeFieldBegin(WEIGHTED_CATEGORIES_FIELD_DESC);
				oprot.writeString(struct.weightedCategories);
				oprot.writeFieldEnd();
			}
			if (struct.weightedTags != null) {
				oprot.writeFieldBegin(WEIGHTED_TAGS_FIELD_DESC);
				oprot.writeString(struct.weightedTags);
				oprot.writeFieldEnd();
			}
			if (struct.impressionTitleTags != null) {
				if (struct.isSetImpressionTitleTags()) {
					oprot.writeFieldBegin(IMPRESSION_TITLE_TAGS_FIELD_DESC);
					oprot.writeString(struct.impressionTitleTags);
					oprot.writeFieldEnd();
				}
			}
			if (struct.lastClickTimeOfCategory != null) {
				if (struct.isSetLastClickTimeOfCategory()) {
					oprot.writeFieldBegin(LAST_CLICK_TIME_OF_CATEGORY_FIELD_DESC);
					oprot.writeString(struct.lastClickTimeOfCategory);
					oprot.writeFieldEnd();
				}
			}
			if (struct.lastImpressionTimeOfCategory != null) {
				if (struct.isSetLastImpressionTimeOfCategory()) {
					oprot.writeFieldBegin(LAST_IMPRESSION_TIME_OF_CATEGORY_FIELD_DESC);
					oprot.writeString(struct.lastImpressionTimeOfCategory);
					oprot.writeFieldEnd();
				}
			}
			if (struct.userGmp != null) {
				if (struct.isSetUserGmp()) {
					oprot.writeFieldBegin(USER_GMP_FIELD_DESC);
					oprot.writeString(struct.userGmp);
					oprot.writeFieldEnd();
				}
			}
			if (struct.userprofile != null) {
				if (struct.isSetUserprofile()) {
					oprot.writeFieldBegin(USERPROFILE_FIELD_DESC);
					oprot.writeString(struct.userprofile);
					oprot.writeFieldEnd();
				}
			}
			if (struct.ldaTopic != null) {
				if (struct.isSetLdaTopic()) {
					oprot.writeFieldBegin(LDA_TOPIC_FIELD_DESC);
					oprot.writeString(struct.ldaTopic);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class UserInfoTupleSchemeFactory implements SchemeFactory {
		public UserInfoTupleScheme getScheme() {
			return new UserInfoTupleScheme();
		}
	}

	private static class UserInfoTupleScheme extends TupleScheme<UserInfo> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.weightedCategories);
			oprot.writeString(struct.weightedTags);
			BitSet optionals = new BitSet();
			if (struct.isSetImpressionTitleTags()) {
				optionals.set(0);
			}
			if (struct.isSetLdaTopic()) {
				optionals.set(1);
			}
			if (struct.isSetLastClickTimeOfCategory()) {
				optionals.set(2);
			}
			if (struct.isSetLastImpressionTimeOfCategory()) {
				optionals.set(3);
			}
			if (struct.isSetUserGmp()) {
				optionals.set(4);
			}
			if (struct.isSetUserprofile()) {
				optionals.set(5);
			}
			oprot.writeBitSet(optionals, 6);
			if (struct.isSetImpressionTitleTags()) {
				oprot.writeString(struct.impressionTitleTags);
			}
			if (struct.isSetLdaTopic()) {
				oprot.writeString(struct.ldaTopic);
			}
			if (struct.isSetLastClickTimeOfCategory()) {
				oprot.writeString(struct.lastClickTimeOfCategory);
			}
			if (struct.isSetLastImpressionTimeOfCategory()) {
				oprot.writeString(struct.lastImpressionTimeOfCategory);
			}
			if (struct.isSetUserGmp()) {
				oprot.writeString(struct.userGmp);
			}
			if (struct.isSetUserprofile()) {
				oprot.writeString(struct.userprofile);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.weightedCategories = iprot.readString();
			struct.setWeightedCategoriesIsSet(true);
			struct.weightedTags = iprot.readString();
			struct.setWeightedTagsIsSet(true);
			BitSet incoming = iprot.readBitSet(6);
			if (incoming.get(0)) {
				struct.impressionTitleTags = iprot.readString();
				struct.setImpressionTitleTagsIsSet(true);
			}
			if (incoming.get(1)) {
				struct.ldaTopic = iprot.readString();
				struct.setLdaTopicIsSet(true);
			}
			if (incoming.get(2)) {
				struct.lastClickTimeOfCategory = iprot.readString();
				struct.setLastClickTimeOfCategoryIsSet(true);
			}
			if (incoming.get(3)) {
				struct.lastImpressionTimeOfCategory = iprot.readString();
				struct.setLastImpressionTimeOfCategoryIsSet(true);
			}
			if (incoming.get(4)) {
				struct.userGmp = iprot.readString();
				struct.setUserGmpIsSet(true);
			}
			if (incoming.get(5)) {
				struct.userprofile = iprot.readString();
				struct.setUserprofileIsSet(true);
			}
		}
	}

}
