/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.inveno.bigdata.query.data.util.thrift.ufs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;

import com.alibaba.fastjson.JSON;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-13")
public class FeederInfo implements org.apache.thrift.TBase<FeederInfo, FeederInfo._Fields>, java.io.Serializable, Cloneable, Comparable<FeederInfo> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FeederInfo");

	private static final org.apache.thrift.protocol.TField CONTENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("content_id", org.apache.thrift.protocol.TType.STRING, (short)1);
	private static final org.apache.thrift.protocol.TField CP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("cp_version", org.apache.thrift.protocol.TType.STRING, (short)2);
	private static final org.apache.thrift.protocol.TField TIER_FIELD_DESC = new org.apache.thrift.protocol.TField("tier", org.apache.thrift.protocol.TType.STRING, (short)3);
	private static final org.apache.thrift.protocol.TField IMPORTANT_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("important_level", org.apache.thrift.protocol.TType.I32, (short)4);
	private static final org.apache.thrift.protocol.TField LOCAL_FIELD_DESC = new org.apache.thrift.protocol.TField("local", org.apache.thrift.protocol.TType.STRING, (short)5);
	private static final org.apache.thrift.protocol.TField CATEGORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("categories", org.apache.thrift.protocol.TType.STRING, (short)6);
	private static final org.apache.thrift.protocol.TField ADULT_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("adult_score", org.apache.thrift.protocol.TType.STRING, (short)7);
	private static final org.apache.thrift.protocol.TField NEWS_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("news_score", org.apache.thrift.protocol.TType.STRING, (short)8);
	private static final org.apache.thrift.protocol.TField EMOTION_FIELD_DESC = new org.apache.thrift.protocol.TField("emotion", org.apache.thrift.protocol.TType.STRING, (short)9);
	private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)10);
	private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.STRING, (short)11);
	private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.STRING, (short)12);
	private static final org.apache.thrift.protocol.TField NER_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("ner_person", org.apache.thrift.protocol.TType.STRING, (short)13);
	private static final org.apache.thrift.protocol.TField NER_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("ner_location", org.apache.thrift.protocol.TType.STRING, (short)14);
	private static final org.apache.thrift.protocol.TField NER_ORGANIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("ner_organization", org.apache.thrift.protocol.TType.STRING, (short)15);
	private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("md5", org.apache.thrift.protocol.TType.STRING, (short)16);
	private static final org.apache.thrift.protocol.TField SIMHASH_FIELD_DESC = new org.apache.thrift.protocol.TField("simhash", org.apache.thrift.protocol.TType.STRING, (short)17);
	private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)18);
	private static final org.apache.thrift.protocol.TField PUBLISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("publish_time", org.apache.thrift.protocol.TType.STRING, (short)19);
	private static final org.apache.thrift.protocol.TField LIST_IMAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("list_image_count", org.apache.thrift.protocol.TType.I32, (short)20);
	private static final org.apache.thrift.protocol.TField BODY_IMAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("body_image_count", org.apache.thrift.protocol.TType.I32, (short)21);
	private static final org.apache.thrift.protocol.TField WORD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("word_count", org.apache.thrift.protocol.TType.STRING, (short)22);
	private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.STRING, (short)23);
	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.STRING, (short)24);
	private static final org.apache.thrift.protocol.TField PUBLISHER_FIELD_DESC = new org.apache.thrift.protocol.TField("publisher", org.apache.thrift.protocol.TType.STRING, (short)25);
	private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceType", org.apache.thrift.protocol.TType.STRING, (short)26);
	private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)27);
	private static final org.apache.thrift.protocol.TField SOURCE_FEEDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceFeeds", org.apache.thrift.protocol.TType.STRING, (short)28);
	private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRING, (short)29);
	private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)30);
	private static final org.apache.thrift.protocol.TField DISCOVERY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("discoveryTime", org.apache.thrift.protocol.TType.STRING, (short)31);
	private static final org.apache.thrift.protocol.TField FETCH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fetch_time", org.apache.thrift.protocol.TType.STRING, (short)32);
	private static final org.apache.thrift.protocol.TField SOURCE_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceItemId", org.apache.thrift.protocol.TType.STRING, (short)33);
	private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRING, (short)34);
	private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)35);
	private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)36);
	private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)37);
	private static final org.apache.thrift.protocol.TField COPYRIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("copyright", org.apache.thrift.protocol.TType.STRING, (short)38);
	private static final org.apache.thrift.protocol.TField HAS_COPYRIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasCopyright", org.apache.thrift.protocol.TType.I32, (short)39);
	private static final org.apache.thrift.protocol.TField BODY_IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("bodyImages", org.apache.thrift.protocol.TType.STRING, (short)40);
	private static final org.apache.thrift.protocol.TField LIST_IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("listImages", org.apache.thrift.protocol.TType.STRING, (short)41);
	private static final org.apache.thrift.protocol.TField BODY_IMAGES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bodyImagesCount", org.apache.thrift.protocol.TType.I32, (short)42);
	private static final org.apache.thrift.protocol.TField LIST_IMAGES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("listImagesCount", org.apache.thrift.protocol.TType.I32, (short)43);
	private static final org.apache.thrift.protocol.TField PUBLISHER_PAGERANK_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("publisherPagerankScore", org.apache.thrift.protocol.TType.DOUBLE, (short)44);
	private static final org.apache.thrift.protocol.TField SOURCE_COMMENT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceCommentCount", org.apache.thrift.protocol.TType.I32, (short)45);
	private static final org.apache.thrift.protocol.TField FALL_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("fallImage", org.apache.thrift.protocol.TType.STRING, (short)46);
	private static final org.apache.thrift.protocol.TField DISPLAY_LIST_IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("displayListImages", org.apache.thrift.protocol.TType.STRING, (short)47);
	private static final org.apache.thrift.protocol.TField IS_OPEN_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("isOpenComment", org.apache.thrift.protocol.TType.STRING, (short)48);
	private static final org.apache.thrift.protocol.TField COMMENT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentCount", org.apache.thrift.protocol.TType.I32, (short)49);
	private static final org.apache.thrift.protocol.TField FIRM_APP_FIELD_DESC = new org.apache.thrift.protocol.TField("firm_app", org.apache.thrift.protocol.TType.STRING, (short)50);
	private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("link_type", org.apache.thrift.protocol.TType.I32, (short)51);
	private static final org.apache.thrift.protocol.TField DISPLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("display_type", org.apache.thrift.protocol.TType.I32, (short)52);
	private static final org.apache.thrift.protocol.TField PUBLISH_TIME_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("publish_time_ts", org.apache.thrift.protocol.TType.I32, (short)53);
	private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.I32, (short)54);
	private static final org.apache.thrift.protocol.TField RECOMMS_FIELD_DESC = new org.apache.thrift.protocol.TField("recomms", org.apache.thrift.protocol.TType.LIST, (short)55);
	private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("content_type", org.apache.thrift.protocol.TType.STRING, (short)56);
	private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I32, (short)57);
	private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)58);
	private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.STRING, (short)59);
	private static final org.apache.thrift.protocol.TField DISPLAY_THUMBNAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("display_thumbnails", org.apache.thrift.protocol.TType.STRING, (short)60);
	private static final org.apache.thrift.protocol.TField TAGS_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tags_title", org.apache.thrift.protocol.TType.STRING, (short)61);
	private static final org.apache.thrift.protocol.TField ITEM_CF_TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("item_cf_topic", org.apache.thrift.protocol.TType.STRING, (short)62);
	private static final org.apache.thrift.protocol.TField HIGH_GMP_CHECK_FIELD_DESC = new org.apache.thrift.protocol.TField("highGmpCheck", org.apache.thrift.protocol.TType.I32, (short)63);
	private static final org.apache.thrift.protocol.TField CONTENT_QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("contentQuality", org.apache.thrift.protocol.TType.I32, (short)64);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new FeederInfoStandardSchemeFactory());
		schemes.put(TupleScheme.class, new FeederInfoTupleSchemeFactory());
	}

	public String content_id; // required
	public String cp_version; // optional
	public String tier; // optional
	public int important_level; // optional
	public String local; // required
	public String categories; // required
	public String adult_score; // optional
	public String news_score; // optional
	public String emotion; // optional
	public String language; // required
	public String keywords; // required
	public String tags; // optional
	public String ner_person; // optional
	public String ner_location; // optional
	public String ner_organization; // optional
	public String md5; // optional
	public String simhash; // optional
	public String type; // required
	public String publish_time; // optional
	public int list_image_count; // optional
	public int body_image_count; // optional
	public String word_count; // optional
	public String group_id; // optional
	public String update_time; // optional
	public String publisher; // optional
	public String sourceType; // optional
	public String source; // optional
	public String sourceFeeds; // optional
	public String channel; // optional
	public String author; // optional
	public String discoveryTime; // optional
	public String fetch_time; // optional
	public String sourceItemId; // optional
	public String link; // optional
	public String title; // optional
	public String content; // optional
	public String summary; // optional
	public String copyright; // optional
	public int hasCopyright; // optional
	public String bodyImages; // optional
	public String listImages; // optional
	public int bodyImagesCount; // optional
	public int listImagesCount; // optional
	public double publisherPagerankScore; // optional
	public int sourceCommentCount; // optional
	public String fallImage; // optional
	public String displayListImages; // optional
	public String isOpenComment; // optional
	public int commentCount; // optional
	public String firm_app; // optional
	public int link_type; // optional
	public int display_type; // optional
	public int publish_time_ts; // optional
	public int rate; // optional
	public List<String> recomms; // optional
	public String content_type; // optional
	public int duration; // optional
	public int state; // optional
	public String flag; // optional
	public String display_thumbnails; // optional
	public String tags_title; // optional
	public String item_cf_topic; // optional
	public int highGmpCheck; // optional
	public int contentQuality; // optional

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		CONTENT_ID((short)1, "content_id"),
		CP_VERSION((short)2, "cp_version"),
		TIER((short)3, "tier"),
		IMPORTANT_LEVEL((short)4, "important_level"),
		LOCAL((short)5, "local"),
		CATEGORIES((short)6, "categories"),
		ADULT_SCORE((short)7, "adult_score"),
		NEWS_SCORE((short)8, "news_score"),
		EMOTION((short)9, "emotion"),
		LANGUAGE((short)10, "language"),
		KEYWORDS((short)11, "keywords"),
		TAGS((short)12, "tags"),
		NER_PERSON((short)13, "ner_person"),
		NER_LOCATION((short)14, "ner_location"),
		NER_ORGANIZATION((short)15, "ner_organization"),
		MD5((short)16, "md5"),
		SIMHASH((short)17, "simhash"),
		TYPE((short)18, "type"),
		PUBLISH_TIME((short)19, "publish_time"),
		LIST_IMAGE_COUNT((short)20, "list_image_count"),
		BODY_IMAGE_COUNT((short)21, "body_image_count"),
		WORD_COUNT((short)22, "word_count"),
		GROUP_ID((short)23, "group_id"),
		UPDATE_TIME((short)24, "update_time"),
		PUBLISHER((short)25, "publisher"),
		SOURCE_TYPE((short)26, "sourceType"),
		SOURCE((short)27, "source"),
		SOURCE_FEEDS((short)28, "sourceFeeds"),
		CHANNEL((short)29, "channel"),
		AUTHOR((short)30, "author"),
		DISCOVERY_TIME((short)31, "discoveryTime"),
		FETCH_TIME((short)32, "fetch_time"),
		SOURCE_ITEM_ID((short)33, "sourceItemId"),
		LINK((short)34, "link"),
		TITLE((short)35, "title"),
		CONTENT((short)36, "content"),
		SUMMARY((short)37, "summary"),
		COPYRIGHT((short)38, "copyright"),
		HAS_COPYRIGHT((short)39, "hasCopyright"),
		BODY_IMAGES((short)40, "bodyImages"),
		LIST_IMAGES((short)41, "listImages"),
		BODY_IMAGES_COUNT((short)42, "bodyImagesCount"),
		LIST_IMAGES_COUNT((short)43, "listImagesCount"),
		PUBLISHER_PAGERANK_SCORE((short)44, "publisherPagerankScore"),
		SOURCE_COMMENT_COUNT((short)45, "sourceCommentCount"),
		FALL_IMAGE((short)46, "fallImage"),
		DISPLAY_LIST_IMAGES((short)47, "displayListImages"),
		IS_OPEN_COMMENT((short)48, "isOpenComment"),
		COMMENT_COUNT((short)49, "commentCount"),
		FIRM_APP((short)50, "firm_app"),
		LINK_TYPE((short)51, "link_type"),
		DISPLAY_TYPE((short)52, "display_type"),
		PUBLISH_TIME_TS((short)53, "publish_time_ts"),
		RATE((short)54, "rate"),
		RECOMMS((short)55, "recomms"),
		CONTENT_TYPE((short)56, "content_type"),
		DURATION((short)57, "duration"),
		STATE((short)58, "state"),
		FLAG((short)59, "flag"),
		DISPLAY_THUMBNAILS((short)60, "display_thumbnails"),
		TAGS_TITLE((short)61, "tags_title"),
		ITEM_CF_TOPIC((short)62, "item_cf_topic"),
		HIGH_GMP_CHECK((short)63, "highGmpCheck"),
		CONTENT_QUALITY((short)64, "contentQuality");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
			case 1: // CONTENT_ID
				return CONTENT_ID;
			case 2: // CP_VERSION
				return CP_VERSION;
			case 3: // TIER
				return TIER;
			case 4: // IMPORTANT_LEVEL
				return IMPORTANT_LEVEL;
			case 5: // LOCAL
				return LOCAL;
			case 6: // CATEGORIES
				return CATEGORIES;
			case 7: // ADULT_SCORE
				return ADULT_SCORE;
			case 8: // NEWS_SCORE
				return NEWS_SCORE;
			case 9: // EMOTION
				return EMOTION;
			case 10: // LANGUAGE
				return LANGUAGE;
			case 11: // KEYWORDS
				return KEYWORDS;
			case 12: // TAGS
				return TAGS;
			case 13: // NER_PERSON
				return NER_PERSON;
			case 14: // NER_LOCATION
				return NER_LOCATION;
			case 15: // NER_ORGANIZATION
				return NER_ORGANIZATION;
			case 16: // MD5
				return MD5;
			case 17: // SIMHASH
				return SIMHASH;
			case 18: // TYPE
				return TYPE;
			case 19: // PUBLISH_TIME
				return PUBLISH_TIME;
			case 20: // LIST_IMAGE_COUNT
				return LIST_IMAGE_COUNT;
			case 21: // BODY_IMAGE_COUNT
				return BODY_IMAGE_COUNT;
			case 22: // WORD_COUNT
				return WORD_COUNT;
			case 23: // GROUP_ID
				return GROUP_ID;
			case 24: // UPDATE_TIME
				return UPDATE_TIME;
			case 25: // PUBLISHER
				return PUBLISHER;
			case 26: // SOURCE_TYPE
				return SOURCE_TYPE;
			case 27: // SOURCE
				return SOURCE;
			case 28: // SOURCE_FEEDS
				return SOURCE_FEEDS;
			case 29: // CHANNEL
				return CHANNEL;
			case 30: // AUTHOR
				return AUTHOR;
			case 31: // DISCOVERY_TIME
				return DISCOVERY_TIME;
			case 32: // FETCH_TIME
				return FETCH_TIME;
			case 33: // SOURCE_ITEM_ID
				return SOURCE_ITEM_ID;
			case 34: // LINK
				return LINK;
			case 35: // TITLE
				return TITLE;
			case 36: // CONTENT
				return CONTENT;
			case 37: // SUMMARY
				return SUMMARY;
			case 38: // COPYRIGHT
				return COPYRIGHT;
			case 39: // HAS_COPYRIGHT
				return HAS_COPYRIGHT;
			case 40: // BODY_IMAGES
				return BODY_IMAGES;
			case 41: // LIST_IMAGES
				return LIST_IMAGES;
			case 42: // BODY_IMAGES_COUNT
				return BODY_IMAGES_COUNT;
			case 43: // LIST_IMAGES_COUNT
				return LIST_IMAGES_COUNT;
			case 44: // PUBLISHER_PAGERANK_SCORE
				return PUBLISHER_PAGERANK_SCORE;
			case 45: // SOURCE_COMMENT_COUNT
				return SOURCE_COMMENT_COUNT;
			case 46: // FALL_IMAGE
				return FALL_IMAGE;
			case 47: // DISPLAY_LIST_IMAGES
				return DISPLAY_LIST_IMAGES;
			case 48: // IS_OPEN_COMMENT
				return IS_OPEN_COMMENT;
			case 49: // COMMENT_COUNT
				return COMMENT_COUNT;
			case 50: // FIRM_APP
				return FIRM_APP;
			case 51: // LINK_TYPE
				return LINK_TYPE;
			case 52: // DISPLAY_TYPE
				return DISPLAY_TYPE;
			case 53: // PUBLISH_TIME_TS
				return PUBLISH_TIME_TS;
			case 54: // RATE
				return RATE;
			case 55: // RECOMMS
				return RECOMMS;
			case 56: // CONTENT_TYPE
				return CONTENT_TYPE;
			case 57: // DURATION
				return DURATION;
			case 58: // STATE
				return STATE;
			case 59: // FLAG
				return FLAG;
			case 60: // DISPLAY_THUMBNAILS
				return DISPLAY_THUMBNAILS;
			case 61: // TAGS_TITLE
				return TAGS_TITLE;
			case 62: // ITEM_CF_TOPIC
				return ITEM_CF_TOPIC;
			case 63: // HIGH_GMP_CHECK
				return HIGH_GMP_CHECK;
			case 64: // CONTENT_QUALITY
				return CONTENT_QUALITY;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __IMPORTANT_LEVEL_ISSET_ID = 0;
	private static final int __LIST_IMAGE_COUNT_ISSET_ID = 1;
	private static final int __BODY_IMAGE_COUNT_ISSET_ID = 2;
	private static final int __HASCOPYRIGHT_ISSET_ID = 3;
	private static final int __BODYIMAGESCOUNT_ISSET_ID = 4;
	private static final int __LISTIMAGESCOUNT_ISSET_ID = 5;
	private static final int __PUBLISHERPAGERANKSCORE_ISSET_ID = 6;
	private static final int __SOURCECOMMENTCOUNT_ISSET_ID = 7;
	private static final int __COMMENTCOUNT_ISSET_ID = 8;
	private static final int __LINK_TYPE_ISSET_ID = 9;
	private static final int __DISPLAY_TYPE_ISSET_ID = 10;
	private static final int __PUBLISH_TIME_TS_ISSET_ID = 11;
	private static final int __RATE_ISSET_ID = 12;
	private static final int __DURATION_ISSET_ID = 13;
	private static final int __STATE_ISSET_ID = 14;
	private static final int __HIGHGMPCHECK_ISSET_ID = 15;
	private static final int __CONTENTQUALITY_ISSET_ID = 16;
	private int __isset_bitfield = 0;
	@SuppressWarnings("unused")
	private static final _Fields optionals[] = {_Fields.CP_VERSION,_Fields.TIER,_Fields.IMPORTANT_LEVEL,_Fields.ADULT_SCORE,_Fields.NEWS_SCORE,_Fields.EMOTION,_Fields.TAGS,_Fields.NER_PERSON,_Fields.NER_LOCATION,_Fields.NER_ORGANIZATION,_Fields.MD5,_Fields.SIMHASH,_Fields.PUBLISH_TIME,_Fields.LIST_IMAGE_COUNT,_Fields.BODY_IMAGE_COUNT,_Fields.WORD_COUNT,_Fields.GROUP_ID,_Fields.UPDATE_TIME,_Fields.PUBLISHER,_Fields.SOURCE_TYPE,_Fields.SOURCE,_Fields.SOURCE_FEEDS,_Fields.CHANNEL,_Fields.AUTHOR,_Fields.DISCOVERY_TIME,_Fields.FETCH_TIME,_Fields.SOURCE_ITEM_ID,_Fields.LINK,_Fields.TITLE,_Fields.CONTENT,_Fields.SUMMARY,_Fields.COPYRIGHT,_Fields.HAS_COPYRIGHT,_Fields.BODY_IMAGES,_Fields.LIST_IMAGES,_Fields.BODY_IMAGES_COUNT,_Fields.LIST_IMAGES_COUNT,_Fields.PUBLISHER_PAGERANK_SCORE,_Fields.SOURCE_COMMENT_COUNT,_Fields.FALL_IMAGE,_Fields.DISPLAY_LIST_IMAGES,_Fields.IS_OPEN_COMMENT,_Fields.COMMENT_COUNT,_Fields.FIRM_APP,_Fields.LINK_TYPE,_Fields.DISPLAY_TYPE,_Fields.PUBLISH_TIME_TS,_Fields.RATE,_Fields.RECOMMS,_Fields.CONTENT_TYPE,_Fields.DURATION,_Fields.STATE,_Fields.FLAG,_Fields.DISPLAY_THUMBNAILS,_Fields.TAGS_TITLE,_Fields.ITEM_CF_TOPIC,_Fields.HIGH_GMP_CHECK,_Fields.CONTENT_QUALITY};
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.CONTENT_ID, new org.apache.thrift.meta_data.FieldMetaData("content_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("cp_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TIER, new org.apache.thrift.meta_data.FieldMetaData("tier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IMPORTANT_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("important_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.LOCAL, new org.apache.thrift.meta_data.FieldMetaData("local", org.apache.thrift.TFieldRequirementType.REQUIRED, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CATEGORIES, new org.apache.thrift.meta_data.FieldMetaData("categories", org.apache.thrift.TFieldRequirementType.REQUIRED, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ADULT_SCORE, new org.apache.thrift.meta_data.FieldMetaData("adult_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NEWS_SCORE, new org.apache.thrift.meta_data.FieldMetaData("news_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EMOTION, new org.apache.thrift.meta_data.FieldMetaData("emotion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.REQUIRED, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.REQUIRED, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NER_PERSON, new org.apache.thrift.meta_data.FieldMetaData("ner_person", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NER_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("ner_location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NER_ORGANIZATION, new org.apache.thrift.meta_data.FieldMetaData("ner_organization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("md5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SIMHASH, new org.apache.thrift.meta_data.FieldMetaData("simhash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PUBLISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("publish_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LIST_IMAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("list_image_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.BODY_IMAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("body_image_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.WORD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("word_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PUBLISHER, new org.apache.thrift.meta_data.FieldMetaData("publisher", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sourceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SOURCE_FEEDS, new org.apache.thrift.meta_data.FieldMetaData("sourceFeeds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DISCOVERY_TIME, new org.apache.thrift.meta_data.FieldMetaData("discoveryTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FETCH_TIME, new org.apache.thrift.meta_data.FieldMetaData("fetch_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SOURCE_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceItemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COPYRIGHT, new org.apache.thrift.meta_data.FieldMetaData("copyright", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.HAS_COPYRIGHT, new org.apache.thrift.meta_data.FieldMetaData("hasCopyright", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.BODY_IMAGES, new org.apache.thrift.meta_data.FieldMetaData("bodyImages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LIST_IMAGES, new org.apache.thrift.meta_data.FieldMetaData("listImages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BODY_IMAGES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("bodyImagesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.LIST_IMAGES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("listImagesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PUBLISHER_PAGERANK_SCORE, new org.apache.thrift.meta_data.FieldMetaData("publisherPagerankScore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.SOURCE_COMMENT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("sourceCommentCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.FALL_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("fallImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DISPLAY_LIST_IMAGES, new org.apache.thrift.meta_data.FieldMetaData("displayListImages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_OPEN_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("isOpenComment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMMENT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("commentCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.FIRM_APP, new org.apache.thrift.meta_data.FieldMetaData("firm_app", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("link_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.DISPLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("display_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PUBLISH_TIME_TS, new org.apache.thrift.meta_data.FieldMetaData("publish_time_ts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.RECOMMS, new org.apache.thrift.meta_data.FieldMetaData("recomms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("content_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DISPLAY_THUMBNAILS, new org.apache.thrift.meta_data.FieldMetaData("display_thumbnails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TAGS_TITLE, new org.apache.thrift.meta_data.FieldMetaData("tags_title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ITEM_CF_TOPIC, new org.apache.thrift.meta_data.FieldMetaData("item_cf_topic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.HIGH_GMP_CHECK, new org.apache.thrift.meta_data.FieldMetaData("highGmpCheck", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CONTENT_QUALITY, new org.apache.thrift.meta_data.FieldMetaData("contentQuality", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FeederInfo.class, metaDataMap);
	}

	public FeederInfo() {
	}

	public FeederInfo(
			String content_id,
			String local,
			String categories,
			String language,
			String keywords,
			String type)
	{
		this();
		this.content_id = content_id;
		this.local = local;
		this.categories = categories;
		this.language = language;
		this.keywords = keywords;
		this.type = type;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public FeederInfo(FeederInfo other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetContent_id()) {
			this.content_id = other.content_id;
		}
		if (other.isSetCp_version()) {
			this.cp_version = other.cp_version;
		}
		if (other.isSetTier()) {
			this.tier = other.tier;
		}
		this.important_level = other.important_level;
		if (other.isSetLocal()) {
			this.local = other.local;
		}
		if (other.isSetCategories()) {
			this.categories = other.categories;
		}
		if (other.isSetAdult_score()) {
			this.adult_score = other.adult_score;
		}
		if (other.isSetNews_score()) {
			this.news_score = other.news_score;
		}
		if (other.isSetEmotion()) {
			this.emotion = other.emotion;
		}
		if (other.isSetLanguage()) {
			this.language = other.language;
		}
		if (other.isSetKeywords()) {
			this.keywords = other.keywords;
		}
		if (other.isSetTags()) {
			this.tags = other.tags;
		}
		if (other.isSetNer_person()) {
			this.ner_person = other.ner_person;
		}
		if (other.isSetNer_location()) {
			this.ner_location = other.ner_location;
		}
		if (other.isSetNer_organization()) {
			this.ner_organization = other.ner_organization;
		}
		if (other.isSetMd5()) {
			this.md5 = other.md5;
		}
		if (other.isSetSimhash()) {
			this.simhash = other.simhash;
		}
		if (other.isSetType()) {
			this.type = other.type;
		}
		if (other.isSetPublish_time()) {
			this.publish_time = other.publish_time;
		}
		this.list_image_count = other.list_image_count;
		this.body_image_count = other.body_image_count;
		if (other.isSetWord_count()) {
			this.word_count = other.word_count;
		}
		if (other.isSetGroup_id()) {
			this.group_id = other.group_id;
		}
		if (other.isSetUpdate_time()) {
			this.update_time = other.update_time;
		}
		if (other.isSetPublisher()) {
			this.publisher = other.publisher;
		}
		if (other.isSetSourceType()) {
			this.sourceType = other.sourceType;
		}
		if (other.isSetSource()) {
			this.source = other.source;
		}
		if (other.isSetSourceFeeds()) {
			this.sourceFeeds = other.sourceFeeds;
		}
		if (other.isSetChannel()) {
			this.channel = other.channel;
		}
		if (other.isSetAuthor()) {
			this.author = other.author;
		}
		if (other.isSetDiscoveryTime()) {
			this.discoveryTime = other.discoveryTime;
		}
		if (other.isSetFetch_time()) {
			this.fetch_time = other.fetch_time;
		}
		if (other.isSetSourceItemId()) {
			this.sourceItemId = other.sourceItemId;
		}
		if (other.isSetLink()) {
			this.link = other.link;
		}
		if (other.isSetTitle()) {
			this.title = other.title;
		}
		if (other.isSetContent()) {
			this.content = other.content;
		}
		if (other.isSetSummary()) {
			this.summary = other.summary;
		}
		if (other.isSetCopyright()) {
			this.copyright = other.copyright;
		}
		this.hasCopyright = other.hasCopyright;
		if (other.isSetBodyImages()) {
			this.bodyImages = other.bodyImages;
		}
		if (other.isSetListImages()) {
			this.listImages = other.listImages;
		}
		this.bodyImagesCount = other.bodyImagesCount;
		this.listImagesCount = other.listImagesCount;
		this.publisherPagerankScore = other.publisherPagerankScore;
		this.sourceCommentCount = other.sourceCommentCount;
		if (other.isSetFallImage()) {
			this.fallImage = other.fallImage;
		}
		if (other.isSetDisplayListImages()) {
			this.displayListImages = other.displayListImages;
		}
		if (other.isSetIsOpenComment()) {
			this.isOpenComment = other.isOpenComment;
		}
		this.commentCount = other.commentCount;
		if (other.isSetFirm_app()) {
			this.firm_app = other.firm_app;
		}
		this.link_type = other.link_type;
		this.display_type = other.display_type;
		this.publish_time_ts = other.publish_time_ts;
		this.rate = other.rate;
		if (other.isSetRecomms()) {
			List<String> __this__recomms = new ArrayList<String>(other.recomms);
			this.recomms = __this__recomms;
		}
		if (other.isSetContent_type()) {
			this.content_type = other.content_type;
		}
		this.duration = other.duration;
		this.state = other.state;
		if (other.isSetFlag()) {
			this.flag = other.flag;
		}
		if (other.isSetDisplay_thumbnails()) {
			this.display_thumbnails = other.display_thumbnails;
		}
		if (other.isSetTags_title()) {
			this.tags_title = other.tags_title;
		}
		if (other.isSetItem_cf_topic()) {
			this.item_cf_topic = other.item_cf_topic;
		}
		this.highGmpCheck = other.highGmpCheck;
		this.contentQuality = other.contentQuality;
	}

	public FeederInfo deepCopy() {
		return new FeederInfo(this);
	}

	@Override
	public void clear() {
		this.content_id = null;
		this.cp_version = null;
		this.tier = null;
		setImportant_levelIsSet(false);
		this.important_level = 0;
		this.local = null;
		this.categories = null;
		this.adult_score = null;
		this.news_score = null;
		this.emotion = null;
		this.language = null;
		this.keywords = null;
		this.tags = null;
		this.ner_person = null;
		this.ner_location = null;
		this.ner_organization = null;
		this.md5 = null;
		this.simhash = null;
		this.type = null;
		this.publish_time = null;
		setList_image_countIsSet(false);
		this.list_image_count = 0;
		setBody_image_countIsSet(false);
		this.body_image_count = 0;
		this.word_count = null;
		this.group_id = null;
		this.update_time = null;
		this.publisher = null;
		this.sourceType = null;
		this.source = null;
		this.sourceFeeds = null;
		this.channel = null;
		this.author = null;
		this.discoveryTime = null;
		this.fetch_time = null;
		this.sourceItemId = null;
		this.link = null;
		this.title = null;
		this.content = null;
		this.summary = null;
		this.copyright = null;
		setHasCopyrightIsSet(false);
		this.hasCopyright = 0;
		this.bodyImages = null;
		this.listImages = null;
		setBodyImagesCountIsSet(false);
		this.bodyImagesCount = 0;
		setListImagesCountIsSet(false);
		this.listImagesCount = 0;
		setPublisherPagerankScoreIsSet(false);
		this.publisherPagerankScore = 0.0;
		setSourceCommentCountIsSet(false);
		this.sourceCommentCount = 0;
		this.fallImage = null;
		this.displayListImages = null;
		this.isOpenComment = null;
		setCommentCountIsSet(false);
		this.commentCount = 0;
		this.firm_app = null;
		setLink_typeIsSet(false);
		this.link_type = 0;
		setDisplay_typeIsSet(false);
		this.display_type = 0;
		setPublish_time_tsIsSet(false);
		this.publish_time_ts = 0;
		setRateIsSet(false);
		this.rate = 0;
		this.recomms = null;
		this.content_type = null;
		setDurationIsSet(false);
		this.duration = 0;
		setStateIsSet(false);
		this.state = 0;
		this.flag = null;
		this.display_thumbnails = null;
		this.tags_title = null;
		this.item_cf_topic = null;
		setHighGmpCheckIsSet(false);
		this.highGmpCheck = 0;
		setContentQualityIsSet(false);
		this.contentQuality = 0;
	}

	public String getContent_id() {
		return this.content_id;
	}

	public FeederInfo setContent_id(String content_id) {
		this.content_id = content_id;
		return this;
	}

	public void unsetContent_id() {
		this.content_id = null;
	}

	/** Returns true if field content_id is set (has been assigned a value) and false otherwise */
	public boolean isSetContent_id() {
		return this.content_id != null;
	}

	public void setContent_idIsSet(boolean value) {
		if (!value) {
			this.content_id = null;
		}
	}

	public String getCp_version() {
		return this.cp_version;
	}

	public FeederInfo setCp_version(String cp_version) {
		this.cp_version = cp_version;
		return this;
	}

	public void unsetCp_version() {
		this.cp_version = null;
	}

	/** Returns true if field cp_version is set (has been assigned a value) and false otherwise */
	public boolean isSetCp_version() {
		return this.cp_version != null;
	}

	public void setCp_versionIsSet(boolean value) {
		if (!value) {
			this.cp_version = null;
		}
	}

	public String getTier() {
		return this.tier;
	}

	public FeederInfo setTier(String tier) {
		this.tier = tier;
		return this;
	}

	public void unsetTier() {
		this.tier = null;
	}

	/** Returns true if field tier is set (has been assigned a value) and false otherwise */
	public boolean isSetTier() {
		return this.tier != null;
	}

	public void setTierIsSet(boolean value) {
		if (!value) {
			this.tier = null;
		}
	}

	public int getImportant_level() {
		return this.important_level;
	}

	public FeederInfo setImportant_level(int important_level) {
		this.important_level = important_level;
		setImportant_levelIsSet(true);
		return this;
	}

	public void unsetImportant_level() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMPORTANT_LEVEL_ISSET_ID);
	}

	/** Returns true if field important_level is set (has been assigned a value) and false otherwise */
	public boolean isSetImportant_level() {
		return EncodingUtils.testBit(__isset_bitfield, __IMPORTANT_LEVEL_ISSET_ID);
	}

	public void setImportant_levelIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMPORTANT_LEVEL_ISSET_ID, value);
	}

	public String getLocal() {
		return this.local;
	}

	public FeederInfo setLocal(String local) {
		this.local = local;
		return this;
	}

	public void unsetLocal() {
		this.local = null;
	}

	/** Returns true if field local is set (has been assigned a value) and false otherwise */
	public boolean isSetLocal() {
		return this.local != null;
	}

	public void setLocalIsSet(boolean value) {
		if (!value) {
			this.local = null;
		}
	}

	public String getCategories() {
		return this.categories;
	}

	public FeederInfo setCategories(String categories) {
		this.categories = categories;
		return this;
	}

	public void unsetCategories() {
		this.categories = null;
	}

	/** Returns true if field categories is set (has been assigned a value) and false otherwise */
	public boolean isSetCategories() {
		return this.categories != null;
	}

	public void setCategoriesIsSet(boolean value) {
		if (!value) {
			this.categories = null;
		}
	}

	public String getAdult_score() {
		return this.adult_score;
	}

	public FeederInfo setAdult_score(String adult_score) {
		this.adult_score = adult_score;
		return this;
	}

	public void unsetAdult_score() {
		this.adult_score = null;
	}

	/** Returns true if field adult_score is set (has been assigned a value) and false otherwise */
	public boolean isSetAdult_score() {
		return this.adult_score != null;
	}

	public void setAdult_scoreIsSet(boolean value) {
		if (!value) {
			this.adult_score = null;
		}
	}

	public String getNews_score() {
		return this.news_score;
	}

	public FeederInfo setNews_score(String news_score) {
		this.news_score = news_score;
		return this;
	}

	public void unsetNews_score() {
		this.news_score = null;
	}

	/** Returns true if field news_score is set (has been assigned a value) and false otherwise */
	public boolean isSetNews_score() {
		return this.news_score != null;
	}

	public void setNews_scoreIsSet(boolean value) {
		if (!value) {
			this.news_score = null;
		}
	}

	public String getEmotion() {
		return this.emotion;
	}

	public FeederInfo setEmotion(String emotion) {
		this.emotion = emotion;
		return this;
	}

	public void unsetEmotion() {
		this.emotion = null;
	}

	/** Returns true if field emotion is set (has been assigned a value) and false otherwise */
	public boolean isSetEmotion() {
		return this.emotion != null;
	}

	public void setEmotionIsSet(boolean value) {
		if (!value) {
			this.emotion = null;
		}
	}

	public String getLanguage() {
		return this.language;
	}

	public FeederInfo setLanguage(String language) {
		this.language = language;
		return this;
	}

	public void unsetLanguage() {
		this.language = null;
	}

	/** Returns true if field language is set (has been assigned a value) and false otherwise */
	public boolean isSetLanguage() {
		return this.language != null;
	}

	public void setLanguageIsSet(boolean value) {
		if (!value) {
			this.language = null;
		}
	}

	public String getKeywords() {
		return this.keywords;
	}

	public FeederInfo setKeywords(String keywords) {
		this.keywords = keywords;
		return this;
	}

	public void unsetKeywords() {
		this.keywords = null;
	}

	/** Returns true if field keywords is set (has been assigned a value) and false otherwise */
	public boolean isSetKeywords() {
		return this.keywords != null;
	}

	public void setKeywordsIsSet(boolean value) {
		if (!value) {
			this.keywords = null;
		}
	}

	public String getTags() {
		return this.tags;
	}

	public FeederInfo setTags(String tags) {
		this.tags = tags;
		return this;
	}

	public void unsetTags() {
		this.tags = null;
	}

	/** Returns true if field tags is set (has been assigned a value) and false otherwise */
	public boolean isSetTags() {
		return this.tags != null;
	}

	public void setTagsIsSet(boolean value) {
		if (!value) {
			this.tags = null;
		}
	}

	public String getNer_person() {
		return this.ner_person;
	}

	public FeederInfo setNer_person(String ner_person) {
		this.ner_person = ner_person;
		return this;
	}

	public void unsetNer_person() {
		this.ner_person = null;
	}

	/** Returns true if field ner_person is set (has been assigned a value) and false otherwise */
	public boolean isSetNer_person() {
		return this.ner_person != null;
	}

	public void setNer_personIsSet(boolean value) {
		if (!value) {
			this.ner_person = null;
		}
	}

	public String getNer_location() {
		return this.ner_location;
	}

	public FeederInfo setNer_location(String ner_location) {
		this.ner_location = ner_location;
		return this;
	}

	public void unsetNer_location() {
		this.ner_location = null;
	}

	/** Returns true if field ner_location is set (has been assigned a value) and false otherwise */
	public boolean isSetNer_location() {
		return this.ner_location != null;
	}

	public void setNer_locationIsSet(boolean value) {
		if (!value) {
			this.ner_location = null;
		}
	}

	public String getNer_organization() {
		return this.ner_organization;
	}

	public FeederInfo setNer_organization(String ner_organization) {
		this.ner_organization = ner_organization;
		return this;
	}

	public void unsetNer_organization() {
		this.ner_organization = null;
	}

	/** Returns true if field ner_organization is set (has been assigned a value) and false otherwise */
	public boolean isSetNer_organization() {
		return this.ner_organization != null;
	}

	public void setNer_organizationIsSet(boolean value) {
		if (!value) {
			this.ner_organization = null;
		}
	}

	public String getMd5() {
		return this.md5;
	}

	public FeederInfo setMd5(String md5) {
		this.md5 = md5;
		return this;
	}

	public void unsetMd5() {
		this.md5 = null;
	}

	/** Returns true if field md5 is set (has been assigned a value) and false otherwise */
	public boolean isSetMd5() {
		return this.md5 != null;
	}

	public void setMd5IsSet(boolean value) {
		if (!value) {
			this.md5 = null;
		}
	}

	public String getSimhash() {
		return this.simhash;
	}

	public FeederInfo setSimhash(String simhash) {
		this.simhash = simhash;
		return this;
	}

	public void unsetSimhash() {
		this.simhash = null;
	}

	/** Returns true if field simhash is set (has been assigned a value) and false otherwise */
	public boolean isSetSimhash() {
		return this.simhash != null;
	}

	public void setSimhashIsSet(boolean value) {
		if (!value) {
			this.simhash = null;
		}
	}

	public String getType() {
		return this.type;
	}

	public FeederInfo setType(String type) {
		this.type = type;
		return this;
	}

	public void unsetType() {
		this.type = null;
	}

	/** Returns true if field type is set (has been assigned a value) and false otherwise */
	public boolean isSetType() {
		return this.type != null;
	}

	public void setTypeIsSet(boolean value) {
		if (!value) {
			this.type = null;
		}
	}

	public String getPublish_time() {
		return this.publish_time;
	}

	public FeederInfo setPublish_time(String publish_time) {
		this.publish_time = publish_time;
		return this;
	}

	public void unsetPublish_time() {
		this.publish_time = null;
	}

	/** Returns true if field publish_time is set (has been assigned a value) and false otherwise */
	public boolean isSetPublish_time() {
		return this.publish_time != null;
	}

	public void setPublish_timeIsSet(boolean value) {
		if (!value) {
			this.publish_time = null;
		}
	}

	public int getList_image_count() {
		return this.list_image_count;
	}

	public FeederInfo setList_image_count(int list_image_count) {
		this.list_image_count = list_image_count;
		setList_image_countIsSet(true);
		return this;
	}

	public void unsetList_image_count() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIST_IMAGE_COUNT_ISSET_ID);
	}

	/** Returns true if field list_image_count is set (has been assigned a value) and false otherwise */
	public boolean isSetList_image_count() {
		return EncodingUtils.testBit(__isset_bitfield, __LIST_IMAGE_COUNT_ISSET_ID);
	}

	public void setList_image_countIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIST_IMAGE_COUNT_ISSET_ID, value);
	}

	public int getBody_image_count() {
		return this.body_image_count;
	}

	public FeederInfo setBody_image_count(int body_image_count) {
		this.body_image_count = body_image_count;
		setBody_image_countIsSet(true);
		return this;
	}

	public void unsetBody_image_count() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BODY_IMAGE_COUNT_ISSET_ID);
	}

	/** Returns true if field body_image_count is set (has been assigned a value) and false otherwise */
	public boolean isSetBody_image_count() {
		return EncodingUtils.testBit(__isset_bitfield, __BODY_IMAGE_COUNT_ISSET_ID);
	}

	public void setBody_image_countIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BODY_IMAGE_COUNT_ISSET_ID, value);
	}

	public String getWord_count() {
		return this.word_count;
	}

	public FeederInfo setWord_count(String word_count) {
		this.word_count = word_count;
		return this;
	}

	public void unsetWord_count() {
		this.word_count = null;
	}

	/** Returns true if field word_count is set (has been assigned a value) and false otherwise */
	public boolean isSetWord_count() {
		return this.word_count != null;
	}

	public void setWord_countIsSet(boolean value) {
		if (!value) {
			this.word_count = null;
		}
	}

	public String getGroup_id() {
		return this.group_id;
	}

	public FeederInfo setGroup_id(String group_id) {
		this.group_id = group_id;
		return this;
	}

	public void unsetGroup_id() {
		this.group_id = null;
	}

	/** Returns true if field group_id is set (has been assigned a value) and false otherwise */
	public boolean isSetGroup_id() {
		return this.group_id != null;
	}

	public void setGroup_idIsSet(boolean value) {
		if (!value) {
			this.group_id = null;
		}
	}

	public String getUpdate_time() {
		return this.update_time;
	}

	public FeederInfo setUpdate_time(String update_time) {
		this.update_time = update_time;
		return this;
	}

	public void unsetUpdate_time() {
		this.update_time = null;
	}

	/** Returns true if field update_time is set (has been assigned a value) and false otherwise */
	public boolean isSetUpdate_time() {
		return this.update_time != null;
	}

	public void setUpdate_timeIsSet(boolean value) {
		if (!value) {
			this.update_time = null;
		}
	}

	public String getPublisher() {
		return this.publisher;
	}

	public FeederInfo setPublisher(String publisher) {
		this.publisher = publisher;
		return this;
	}

	public void unsetPublisher() {
		this.publisher = null;
	}

	/** Returns true if field publisher is set (has been assigned a value) and false otherwise */
	public boolean isSetPublisher() {
		return this.publisher != null;
	}

	public void setPublisherIsSet(boolean value) {
		if (!value) {
			this.publisher = null;
		}
	}

	public String getSourceType() {
		return this.sourceType;
	}

	public FeederInfo setSourceType(String sourceType) {
		this.sourceType = sourceType;
		return this;
	}

	public void unsetSourceType() {
		this.sourceType = null;
	}

	/** Returns true if field sourceType is set (has been assigned a value) and false otherwise */
	public boolean isSetSourceType() {
		return this.sourceType != null;
	}

	public void setSourceTypeIsSet(boolean value) {
		if (!value) {
			this.sourceType = null;
		}
	}

	public String getSource() {
		return this.source;
	}

	public FeederInfo setSource(String source) {
		this.source = source;
		return this;
	}

	public void unsetSource() {
		this.source = null;
	}

	/** Returns true if field source is set (has been assigned a value) and false otherwise */
	public boolean isSetSource() {
		return this.source != null;
	}

	public void setSourceIsSet(boolean value) {
		if (!value) {
			this.source = null;
		}
	}

	public String getSourceFeeds() {
		return this.sourceFeeds;
	}

	public FeederInfo setSourceFeeds(String sourceFeeds) {
		this.sourceFeeds = sourceFeeds;
		return this;
	}

	public void unsetSourceFeeds() {
		this.sourceFeeds = null;
	}

	/** Returns true if field sourceFeeds is set (has been assigned a value) and false otherwise */
	public boolean isSetSourceFeeds() {
		return this.sourceFeeds != null;
	}

	public void setSourceFeedsIsSet(boolean value) {
		if (!value) {
			this.sourceFeeds = null;
		}
	}

	public String getChannel() {
		return this.channel;
	}

	public FeederInfo setChannel(String channel) {
		this.channel = channel;
		return this;
	}

	public void unsetChannel() {
		this.channel = null;
	}

	/** Returns true if field channel is set (has been assigned a value) and false otherwise */
	public boolean isSetChannel() {
		return this.channel != null;
	}

	public void setChannelIsSet(boolean value) {
		if (!value) {
			this.channel = null;
		}
	}

	public String getAuthor() {
		return this.author;
	}

	public FeederInfo setAuthor(String author) {
		this.author = author;
		return this;
	}

	public void unsetAuthor() {
		this.author = null;
	}

	/** Returns true if field author is set (has been assigned a value) and false otherwise */
	public boolean isSetAuthor() {
		return this.author != null;
	}

	public void setAuthorIsSet(boolean value) {
		if (!value) {
			this.author = null;
		}
	}

	public String getDiscoveryTime() {
		return this.discoveryTime;
	}

	public FeederInfo setDiscoveryTime(String discoveryTime) {
		this.discoveryTime = discoveryTime;
		return this;
	}

	public void unsetDiscoveryTime() {
		this.discoveryTime = null;
	}

	/** Returns true if field discoveryTime is set (has been assigned a value) and false otherwise */
	public boolean isSetDiscoveryTime() {
		return this.discoveryTime != null;
	}

	public void setDiscoveryTimeIsSet(boolean value) {
		if (!value) {
			this.discoveryTime = null;
		}
	}

	public String getFetch_time() {
		return this.fetch_time;
	}

	public FeederInfo setFetch_time(String fetch_time) {
		this.fetch_time = fetch_time;
		return this;
	}

	public void unsetFetch_time() {
		this.fetch_time = null;
	}

	/** Returns true if field fetch_time is set (has been assigned a value) and false otherwise */
	public boolean isSetFetch_time() {
		return this.fetch_time != null;
	}

	public void setFetch_timeIsSet(boolean value) {
		if (!value) {
			this.fetch_time = null;
		}
	}

	public String getSourceItemId() {
		return this.sourceItemId;
	}

	public FeederInfo setSourceItemId(String sourceItemId) {
		this.sourceItemId = sourceItemId;
		return this;
	}

	public void unsetSourceItemId() {
		this.sourceItemId = null;
	}

	/** Returns true if field sourceItemId is set (has been assigned a value) and false otherwise */
	public boolean isSetSourceItemId() {
		return this.sourceItemId != null;
	}

	public void setSourceItemIdIsSet(boolean value) {
		if (!value) {
			this.sourceItemId = null;
		}
	}

	public String getLink() {
		return this.link;
	}

	public FeederInfo setLink(String link) {
		this.link = link;
		return this;
	}

	public void unsetLink() {
		this.link = null;
	}

	/** Returns true if field link is set (has been assigned a value) and false otherwise */
	public boolean isSetLink() {
		return this.link != null;
	}

	public void setLinkIsSet(boolean value) {
		if (!value) {
			this.link = null;
		}
	}

	public String getTitle() {
		return this.title;
	}

	public FeederInfo setTitle(String title) {
		this.title = title;
		return this;
	}

	public void unsetTitle() {
		this.title = null;
	}

	/** Returns true if field title is set (has been assigned a value) and false otherwise */
	public boolean isSetTitle() {
		return this.title != null;
	}

	public void setTitleIsSet(boolean value) {
		if (!value) {
			this.title = null;
		}
	}

	public String getContent() {
		return this.content;
	}

	public FeederInfo setContent(String content) {
		this.content = content;
		return this;
	}

	public void unsetContent() {
		this.content = null;
	}

	/** Returns true if field content is set (has been assigned a value) and false otherwise */
	public boolean isSetContent() {
		return this.content != null;
	}

	public void setContentIsSet(boolean value) {
		if (!value) {
			this.content = null;
		}
	}

	public String getSummary() {
		return this.summary;
	}

	public FeederInfo setSummary(String summary) {
		this.summary = summary;
		return this;
	}

	public void unsetSummary() {
		this.summary = null;
	}

	/** Returns true if field summary is set (has been assigned a value) and false otherwise */
	public boolean isSetSummary() {
		return this.summary != null;
	}

	public void setSummaryIsSet(boolean value) {
		if (!value) {
			this.summary = null;
		}
	}

	public String getCopyright() {
		return this.copyright;
	}

	public FeederInfo setCopyright(String copyright) {
		this.copyright = copyright;
		return this;
	}

	public void unsetCopyright() {
		this.copyright = null;
	}

	/** Returns true if field copyright is set (has been assigned a value) and false otherwise */
	public boolean isSetCopyright() {
		return this.copyright != null;
	}

	public void setCopyrightIsSet(boolean value) {
		if (!value) {
			this.copyright = null;
		}
	}

	public int getHasCopyright() {
		return this.hasCopyright;
	}

	public FeederInfo setHasCopyright(int hasCopyright) {
		this.hasCopyright = hasCopyright;
		setHasCopyrightIsSet(true);
		return this;
	}

	public void unsetHasCopyright() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASCOPYRIGHT_ISSET_ID);
	}

	/** Returns true if field hasCopyright is set (has been assigned a value) and false otherwise */
	public boolean isSetHasCopyright() {
		return EncodingUtils.testBit(__isset_bitfield, __HASCOPYRIGHT_ISSET_ID);
	}

	public void setHasCopyrightIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASCOPYRIGHT_ISSET_ID, value);
	}

	public String getBodyImages() {
		return this.bodyImages;
	}

	public FeederInfo setBodyImages(String bodyImages) {
		this.bodyImages = bodyImages;
		return this;
	}

	public void unsetBodyImages() {
		this.bodyImages = null;
	}

	/** Returns true if field bodyImages is set (has been assigned a value) and false otherwise */
	public boolean isSetBodyImages() {
		return this.bodyImages != null;
	}

	public void setBodyImagesIsSet(boolean value) {
		if (!value) {
			this.bodyImages = null;
		}
	}

	public String getListImages() {
		return this.listImages;
	}

	public FeederInfo setListImages(String listImages) {
		this.listImages = listImages;
		return this;
	}

	public void unsetListImages() {
		this.listImages = null;
	}

	/** Returns true if field listImages is set (has been assigned a value) and false otherwise */
	public boolean isSetListImages() {
		return this.listImages != null;
	}

	public void setListImagesIsSet(boolean value) {
		if (!value) {
			this.listImages = null;
		}
	}

	public int getBodyImagesCount() {
		return this.bodyImagesCount;
	}

	public FeederInfo setBodyImagesCount(int bodyImagesCount) {
		this.bodyImagesCount = bodyImagesCount;
		setBodyImagesCountIsSet(true);
		return this;
	}

	public void unsetBodyImagesCount() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BODYIMAGESCOUNT_ISSET_ID);
	}

	/** Returns true if field bodyImagesCount is set (has been assigned a value) and false otherwise */
	public boolean isSetBodyImagesCount() {
		return EncodingUtils.testBit(__isset_bitfield, __BODYIMAGESCOUNT_ISSET_ID);
	}

	public void setBodyImagesCountIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BODYIMAGESCOUNT_ISSET_ID, value);
	}

	public int getListImagesCount() {
		return this.listImagesCount;
	}

	public FeederInfo setListImagesCount(int listImagesCount) {
		this.listImagesCount = listImagesCount;
		setListImagesCountIsSet(true);
		return this;
	}

	public void unsetListImagesCount() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LISTIMAGESCOUNT_ISSET_ID);
	}

	/** Returns true if field listImagesCount is set (has been assigned a value) and false otherwise */
	public boolean isSetListImagesCount() {
		return EncodingUtils.testBit(__isset_bitfield, __LISTIMAGESCOUNT_ISSET_ID);
	}

	public void setListImagesCountIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LISTIMAGESCOUNT_ISSET_ID, value);
	}

	public double getPublisherPagerankScore() {
		return this.publisherPagerankScore;
	}

	public FeederInfo setPublisherPagerankScore(double publisherPagerankScore) {
		this.publisherPagerankScore = publisherPagerankScore;
		setPublisherPagerankScoreIsSet(true);
		return this;
	}

	public void unsetPublisherPagerankScore() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISHERPAGERANKSCORE_ISSET_ID);
	}

	/** Returns true if field publisherPagerankScore is set (has been assigned a value) and false otherwise */
	public boolean isSetPublisherPagerankScore() {
		return EncodingUtils.testBit(__isset_bitfield, __PUBLISHERPAGERANKSCORE_ISSET_ID);
	}

	public void setPublisherPagerankScoreIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISHERPAGERANKSCORE_ISSET_ID, value);
	}

	public int getSourceCommentCount() {
		return this.sourceCommentCount;
	}

	public FeederInfo setSourceCommentCount(int sourceCommentCount) {
		this.sourceCommentCount = sourceCommentCount;
		setSourceCommentCountIsSet(true);
		return this;
	}

	public void unsetSourceCommentCount() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCECOMMENTCOUNT_ISSET_ID);
	}

	/** Returns true if field sourceCommentCount is set (has been assigned a value) and false otherwise */
	public boolean isSetSourceCommentCount() {
		return EncodingUtils.testBit(__isset_bitfield, __SOURCECOMMENTCOUNT_ISSET_ID);
	}

	public void setSourceCommentCountIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCECOMMENTCOUNT_ISSET_ID, value);
	}

	public String getFallImage() {
		return this.fallImage;
	}

	public FeederInfo setFallImage(String fallImage) {
		this.fallImage = fallImage;
		return this;
	}

	public void unsetFallImage() {
		this.fallImage = null;
	}

	/** Returns true if field fallImage is set (has been assigned a value) and false otherwise */
	public boolean isSetFallImage() {
		return this.fallImage != null;
	}

	public void setFallImageIsSet(boolean value) {
		if (!value) {
			this.fallImage = null;
		}
	}

	public String getDisplayListImages() {
		return this.displayListImages;
	}

	public FeederInfo setDisplayListImages(String displayListImages) {
		this.displayListImages = displayListImages;
		return this;
	}

	public void unsetDisplayListImages() {
		this.displayListImages = null;
	}

	/** Returns true if field displayListImages is set (has been assigned a value) and false otherwise */
	public boolean isSetDisplayListImages() {
		return this.displayListImages != null;
	}

	public void setDisplayListImagesIsSet(boolean value) {
		if (!value) {
			this.displayListImages = null;
		}
	}

	public String getIsOpenComment() {
		return this.isOpenComment;
	}

	public FeederInfo setIsOpenComment(String isOpenComment) {
		this.isOpenComment = isOpenComment;
		return this;
	}

	public void unsetIsOpenComment() {
		this.isOpenComment = null;
	}

	/** Returns true if field isOpenComment is set (has been assigned a value) and false otherwise */
	public boolean isSetIsOpenComment() {
		return this.isOpenComment != null;
	}

	public void setIsOpenCommentIsSet(boolean value) {
		if (!value) {
			this.isOpenComment = null;
		}
	}

	public int getCommentCount() {
		return this.commentCount;
	}

	public FeederInfo setCommentCount(int commentCount) {
		this.commentCount = commentCount;
		setCommentCountIsSet(true);
		return this;
	}

	public void unsetCommentCount() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID);
	}

	/** Returns true if field commentCount is set (has been assigned a value) and false otherwise */
	public boolean isSetCommentCount() {
		return EncodingUtils.testBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID);
	}

	public void setCommentCountIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID, value);
	}

	public String getFirm_app() {
		return this.firm_app;
	}

	public FeederInfo setFirm_app(String firm_app) {
		this.firm_app = firm_app;
		return this;
	}

	public void unsetFirm_app() {
		this.firm_app = null;
	}

	/** Returns true if field firm_app is set (has been assigned a value) and false otherwise */
	public boolean isSetFirm_app() {
		return this.firm_app != null;
	}

	public void setFirm_appIsSet(boolean value) {
		if (!value) {
			this.firm_app = null;
		}
	}

	public int getLink_type() {
		return this.link_type;
	}

	public FeederInfo setLink_type(int link_type) {
		this.link_type = link_type;
		setLink_typeIsSet(true);
		return this;
	}

	public void unsetLink_type() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
	}

	/** Returns true if field link_type is set (has been assigned a value) and false otherwise */
	public boolean isSetLink_type() {
		return EncodingUtils.testBit(__isset_bitfield, __LINK_TYPE_ISSET_ID);
	}

	public void setLink_typeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINK_TYPE_ISSET_ID, value);
	}

	public int getDisplay_type() {
		return this.display_type;
	}

	public FeederInfo setDisplay_type(int display_type) {
		this.display_type = display_type;
		setDisplay_typeIsSet(true);
		return this;
	}

	public void unsetDisplay_type() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISPLAY_TYPE_ISSET_ID);
	}

	/** Returns true if field display_type is set (has been assigned a value) and false otherwise */
	public boolean isSetDisplay_type() {
		return EncodingUtils.testBit(__isset_bitfield, __DISPLAY_TYPE_ISSET_ID);
	}

	public void setDisplay_typeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISPLAY_TYPE_ISSET_ID, value);
	}

	public int getPublish_time_ts() {
		return this.publish_time_ts;
	}

	public FeederInfo setPublish_time_ts(int publish_time_ts) {
		this.publish_time_ts = publish_time_ts;
		setPublish_time_tsIsSet(true);
		return this;
	}

	public void unsetPublish_time_ts() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLISH_TIME_TS_ISSET_ID);
	}

	/** Returns true if field publish_time_ts is set (has been assigned a value) and false otherwise */
	public boolean isSetPublish_time_ts() {
		return EncodingUtils.testBit(__isset_bitfield, __PUBLISH_TIME_TS_ISSET_ID);
	}

	public void setPublish_time_tsIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLISH_TIME_TS_ISSET_ID, value);
	}

	public int getRate() {
		return this.rate;
	}

	public FeederInfo setRate(int rate) {
		this.rate = rate;
		setRateIsSet(true);
		return this;
	}

	public void unsetRate() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
	}

	/** Returns true if field rate is set (has been assigned a value) and false otherwise */
	public boolean isSetRate() {
		return EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
	}

	public void setRateIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
	}

	public int getRecommsSize() {
		return (this.recomms == null) ? 0 : this.recomms.size();
	}

	public java.util.Iterator<String> getRecommsIterator() {
		return (this.recomms == null) ? null : this.recomms.iterator();
	}

	public void addToRecomms(String elem) {
		if (this.recomms == null) {
			this.recomms = new ArrayList<String>();
		}
		this.recomms.add(elem);
	}

	public List<String> getRecomms() {
		return this.recomms;
	}

	public FeederInfo setRecomms(List<String> recomms) {
		this.recomms = recomms;
		return this;
	}

	public void unsetRecomms() {
		this.recomms = null;
	}

	/** Returns true if field recomms is set (has been assigned a value) and false otherwise */
	public boolean isSetRecomms() {
		return this.recomms != null;
	}

	public void setRecommsIsSet(boolean value) {
		if (!value) {
			this.recomms = null;
		}
	}

	public String getContent_type() {
		return this.content_type;
	}

	public FeederInfo setContent_type(String content_type) {
		this.content_type = content_type;
		return this;
	}

	public void unsetContent_type() {
		this.content_type = null;
	}

	/** Returns true if field content_type is set (has been assigned a value) and false otherwise */
	public boolean isSetContent_type() {
		return this.content_type != null;
	}

	public void setContent_typeIsSet(boolean value) {
		if (!value) {
			this.content_type = null;
		}
	}

	public int getDuration() {
		return this.duration;
	}

	public FeederInfo setDuration(int duration) {
		this.duration = duration;
		setDurationIsSet(true);
		return this;
	}

	public void unsetDuration() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
	}

	/** Returns true if field duration is set (has been assigned a value) and false otherwise */
	public boolean isSetDuration() {
		return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
	}

	public void setDurationIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
	}

	public int getState() {
		return this.state;
	}

	public FeederInfo setState(int state) {
		this.state = state;
		setStateIsSet(true);
		return this;
	}

	public void unsetState() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
	}

	/** Returns true if field state is set (has been assigned a value) and false otherwise */
	public boolean isSetState() {
		return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
	}

	public void setStateIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
	}

	public String getFlag() {
		return this.flag;
	}

	public FeederInfo setFlag(String flag) {
		this.flag = flag;
		return this;
	}

	public void unsetFlag() {
		this.flag = null;
	}

	/** Returns true if field flag is set (has been assigned a value) and false otherwise */
	public boolean isSetFlag() {
		return this.flag != null;
	}

	public void setFlagIsSet(boolean value) {
		if (!value) {
			this.flag = null;
		}
	}

	public String getDisplay_thumbnails() {
		return this.display_thumbnails;
	}

	public FeederInfo setDisplay_thumbnails(String display_thumbnails) {
		this.display_thumbnails = display_thumbnails;
		return this;
	}

	public void unsetDisplay_thumbnails() {
		this.display_thumbnails = null;
	}

	/** Returns true if field display_thumbnails is set (has been assigned a value) and false otherwise */
	public boolean isSetDisplay_thumbnails() {
		return this.display_thumbnails != null;
	}

	public void setDisplay_thumbnailsIsSet(boolean value) {
		if (!value) {
			this.display_thumbnails = null;
		}
	}

	public String getTags_title() {
		return this.tags_title;
	}

	public FeederInfo setTags_title(String tags_title) {
		this.tags_title = tags_title;
		return this;
	}

	public void unsetTags_title() {
		this.tags_title = null;
	}

	/** Returns true if field tags_title is set (has been assigned a value) and false otherwise */
	public boolean isSetTags_title() {
		return this.tags_title != null;
	}

	public void setTags_titleIsSet(boolean value) {
		if (!value) {
			this.tags_title = null;
		}
	}

	public String getItem_cf_topic() {
		return this.item_cf_topic;
	}

	public FeederInfo setItem_cf_topic(String item_cf_topic) {
		this.item_cf_topic = item_cf_topic;
		return this;
	}

	public void unsetItem_cf_topic() {
		this.item_cf_topic = null;
	}

	/** Returns true if field item_cf_topic is set (has been assigned a value) and false otherwise */
	public boolean isSetItem_cf_topic() {
		return this.item_cf_topic != null;
	}

	public void setItem_cf_topicIsSet(boolean value) {
		if (!value) {
			this.item_cf_topic = null;
		}
	}

	public int getHighGmpCheck() {
		return this.highGmpCheck;
	}

	public FeederInfo setHighGmpCheck(int highGmpCheck) {
		this.highGmpCheck = highGmpCheck;
		setHighGmpCheckIsSet(true);
		return this;
	}

	public void unsetHighGmpCheck() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIGHGMPCHECK_ISSET_ID);
	}

	/** Returns true if field highGmpCheck is set (has been assigned a value) and false otherwise */
	public boolean isSetHighGmpCheck() {
		return EncodingUtils.testBit(__isset_bitfield, __HIGHGMPCHECK_ISSET_ID);
	}

	public void setHighGmpCheckIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIGHGMPCHECK_ISSET_ID, value);
	}

	public int getContentQuality() {
		return this.contentQuality;
	}

	public FeederInfo setContentQuality(int contentQuality) {
		this.contentQuality = contentQuality;
		setContentQualityIsSet(true);
		return this;
	}

	public void unsetContentQuality() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTENTQUALITY_ISSET_ID);
	}

	/** Returns true if field contentQuality is set (has been assigned a value) and false otherwise */
	public boolean isSetContentQuality() {
		return EncodingUtils.testBit(__isset_bitfield, __CONTENTQUALITY_ISSET_ID);
	}

	public void setContentQualityIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTENTQUALITY_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case CONTENT_ID:
			if (value == null) {
				unsetContent_id();
			} else {
				setContent_id((String)value);
			}
			break;

		case CP_VERSION:
			if (value == null) {
				unsetCp_version();
			} else {
				setCp_version((String)value);
			}
			break;

		case TIER:
			if (value == null) {
				unsetTier();
			} else {
				setTier((String)value);
			}
			break;

		case IMPORTANT_LEVEL:
			if (value == null) {
				unsetImportant_level();
			} else {
				setImportant_level((Integer)value);
			}
			break;

		case LOCAL:
			if (value == null) {
				unsetLocal();
			} else {
				setLocal((String)value);
			}
			break;

		case CATEGORIES:
			if (value == null) {
				unsetCategories();
			} else {
				setCategories((String)value);
			}
			break;

		case ADULT_SCORE:
			if (value == null) {
				unsetAdult_score();
			} else {
				setAdult_score((String)value);
			}
			break;

		case NEWS_SCORE:
			if (value == null) {
				unsetNews_score();
			} else {
				setNews_score((String)value);
			}
			break;

		case EMOTION:
			if (value == null) {
				unsetEmotion();
			} else {
				setEmotion((String)value);
			}
			break;

		case LANGUAGE:
			if (value == null) {
				unsetLanguage();
			} else {
				setLanguage((String)value);
			}
			break;

		case KEYWORDS:
			if (value == null) {
				unsetKeywords();
			} else {
				setKeywords((String)value);
			}
			break;

		case TAGS:
			if (value == null) {
				unsetTags();
			} else {
				setTags((String)value);
			}
			break;

		case NER_PERSON:
			if (value == null) {
				unsetNer_person();
			} else {
				setNer_person((String)value);
			}
			break;

		case NER_LOCATION:
			if (value == null) {
				unsetNer_location();
			} else {
				setNer_location((String)value);
			}
			break;

		case NER_ORGANIZATION:
			if (value == null) {
				unsetNer_organization();
			} else {
				setNer_organization((String)value);
			}
			break;

		case MD5:
			if (value == null) {
				unsetMd5();
			} else {
				setMd5((String)value);
			}
			break;

		case SIMHASH:
			if (value == null) {
				unsetSimhash();
			} else {
				setSimhash((String)value);
			}
			break;

		case TYPE:
			if (value == null) {
				unsetType();
			} else {
				setType((String)value);
			}
			break;

		case PUBLISH_TIME:
			if (value == null) {
				unsetPublish_time();
			} else {
				setPublish_time((String)value);
			}
			break;

		case LIST_IMAGE_COUNT:
			if (value == null) {
				unsetList_image_count();
			} else {
				setList_image_count((Integer)value);
			}
			break;

		case BODY_IMAGE_COUNT:
			if (value == null) {
				unsetBody_image_count();
			} else {
				setBody_image_count((Integer)value);
			}
			break;

		case WORD_COUNT:
			if (value == null) {
				unsetWord_count();
			} else {
				setWord_count((String)value);
			}
			break;

		case GROUP_ID:
			if (value == null) {
				unsetGroup_id();
			} else {
				setGroup_id((String)value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdate_time();
			} else {
				setUpdate_time((String)value);
			}
			break;

		case PUBLISHER:
			if (value == null) {
				unsetPublisher();
			} else {
				setPublisher((String)value);
			}
			break;

		case SOURCE_TYPE:
			if (value == null) {
				unsetSourceType();
			} else {
				setSourceType((String)value);
			}
			break;

		case SOURCE:
			if (value == null) {
				unsetSource();
			} else {
				setSource((String)value);
			}
			break;

		case SOURCE_FEEDS:
			if (value == null) {
				unsetSourceFeeds();
			} else {
				setSourceFeeds((String)value);
			}
			break;

		case CHANNEL:
			if (value == null) {
				unsetChannel();
			} else {
				setChannel((String)value);
			}
			break;

		case AUTHOR:
			if (value == null) {
				unsetAuthor();
			} else {
				setAuthor((String)value);
			}
			break;

		case DISCOVERY_TIME:
			if (value == null) {
				unsetDiscoveryTime();
			} else {
				setDiscoveryTime((String)value);
			}
			break;

		case FETCH_TIME:
			if (value == null) {
				unsetFetch_time();
			} else {
				setFetch_time((String)value);
			}
			break;

		case SOURCE_ITEM_ID:
			if (value == null) {
				unsetSourceItemId();
			} else {
				setSourceItemId((String)value);
			}
			break;

		case LINK:
			if (value == null) {
				unsetLink();
			} else {
				setLink((String)value);
			}
			break;

		case TITLE:
			if (value == null) {
				unsetTitle();
			} else {
				setTitle((String)value);
			}
			break;

		case CONTENT:
			if (value == null) {
				unsetContent();
			} else {
				setContent((String)value);
			}
			break;

		case SUMMARY:
			if (value == null) {
				unsetSummary();
			} else {
				setSummary((String)value);
			}
			break;

		case COPYRIGHT:
			if (value == null) {
				unsetCopyright();
			} else {
				setCopyright((String)value);
			}
			break;

		case HAS_COPYRIGHT:
			if (value == null) {
				unsetHasCopyright();
			} else {
				setHasCopyright((Integer)value);
			}
			break;

		case BODY_IMAGES:
			if (value == null) {
				unsetBodyImages();
			} else {
				setBodyImages((String)value);
			}
			break;

		case LIST_IMAGES:
			if (value == null) {
				unsetListImages();
			} else {
				setListImages((String)value);
			}
			break;

		case BODY_IMAGES_COUNT:
			if (value == null) {
				unsetBodyImagesCount();
			} else {
				setBodyImagesCount((Integer)value);
			}
			break;

		case LIST_IMAGES_COUNT:
			if (value == null) {
				unsetListImagesCount();
			} else {
				setListImagesCount((Integer)value);
			}
			break;

		case PUBLISHER_PAGERANK_SCORE:
			if (value == null) {
				unsetPublisherPagerankScore();
			} else {
				setPublisherPagerankScore((Double)value);
			}
			break;

		case SOURCE_COMMENT_COUNT:
			if (value == null) {
				unsetSourceCommentCount();
			} else {
				setSourceCommentCount((Integer)value);
			}
			break;

		case FALL_IMAGE:
			if (value == null) {
				unsetFallImage();
			} else {
				setFallImage((String)value);
			}
			break;

		case DISPLAY_LIST_IMAGES:
			if (value == null) {
				unsetDisplayListImages();
			} else {
				setDisplayListImages((String)value);
			}
			break;

		case IS_OPEN_COMMENT:
			if (value == null) {
				unsetIsOpenComment();
			} else {
				setIsOpenComment((String)value);
			}
			break;

		case COMMENT_COUNT:
			if (value == null) {
				unsetCommentCount();
			} else {
				setCommentCount((Integer)value);
			}
			break;

		case FIRM_APP:
			if (value == null) {
				unsetFirm_app();
			} else {
				setFirm_app((String)value);
			}
			break;

		case LINK_TYPE:
			if (value == null) {
				unsetLink_type();
			} else {
				setLink_type((Integer)value);
			}
			break;

		case DISPLAY_TYPE:
			if (value == null) {
				unsetDisplay_type();
			} else {
				setDisplay_type((Integer)value);
			}
			break;

		case PUBLISH_TIME_TS:
			if (value == null) {
				unsetPublish_time_ts();
			} else {
				setPublish_time_ts((Integer)value);
			}
			break;

		case RATE:
			if (value == null) {
				unsetRate();
			} else {
				setRate((Integer)value);
			}
			break;

		case RECOMMS:
			if (value == null) {
				unsetRecomms();
			} else {
				setRecomms((List<String>)value);
			}
			break;

		case CONTENT_TYPE:
			if (value == null) {
				unsetContent_type();
			} else {
				setContent_type((String)value);
			}
			break;

		case DURATION:
			if (value == null) {
				unsetDuration();
			} else {
				setDuration((Integer)value);
			}
			break;

		case STATE:
			if (value == null) {
				unsetState();
			} else {
				setState((Integer)value);
			}
			break;

		case FLAG:
			if (value == null) {
				unsetFlag();
			} else {
				setFlag((String)value);
			}
			break;

		case DISPLAY_THUMBNAILS:
			if (value == null) {
				unsetDisplay_thumbnails();
			} else {
				setDisplay_thumbnails((String)value);
			}
			break;

		case TAGS_TITLE:
			if (value == null) {
				unsetTags_title();
			} else {
				setTags_title((String)value);
			}
			break;

		case ITEM_CF_TOPIC:
			if (value == null) {
				unsetItem_cf_topic();
			} else {
				setItem_cf_topic((String)value);
			}
			break;

		case HIGH_GMP_CHECK:
			if (value == null) {
				unsetHighGmpCheck();
			} else {
				setHighGmpCheck((Integer)value);
			}
			break;

		case CONTENT_QUALITY:
			if (value == null) {
				unsetContentQuality();
			} else {
				setContentQuality((Integer)value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case CONTENT_ID:
			return getContent_id();

		case CP_VERSION:
			return getCp_version();

		case TIER:
			return getTier();

		case IMPORTANT_LEVEL:
			return getImportant_level();

		case LOCAL:
			return getLocal();

		case CATEGORIES:
			return getCategories();

		case ADULT_SCORE:
			return getAdult_score();

		case NEWS_SCORE:
			return getNews_score();

		case EMOTION:
			return getEmotion();

		case LANGUAGE:
			return getLanguage();

		case KEYWORDS:
			return getKeywords();

		case TAGS:
			return getTags();

		case NER_PERSON:
			return getNer_person();

		case NER_LOCATION:
			return getNer_location();

		case NER_ORGANIZATION:
			return getNer_organization();

		case MD5:
			return getMd5();

		case SIMHASH:
			return getSimhash();

		case TYPE:
			return getType();

		case PUBLISH_TIME:
			return getPublish_time();

		case LIST_IMAGE_COUNT:
			return getList_image_count();

		case BODY_IMAGE_COUNT:
			return getBody_image_count();

		case WORD_COUNT:
			return getWord_count();

		case GROUP_ID:
			return getGroup_id();

		case UPDATE_TIME:
			return getUpdate_time();

		case PUBLISHER:
			return getPublisher();

		case SOURCE_TYPE:
			return getSourceType();

		case SOURCE:
			return getSource();

		case SOURCE_FEEDS:
			return getSourceFeeds();

		case CHANNEL:
			return getChannel();

		case AUTHOR:
			return getAuthor();

		case DISCOVERY_TIME:
			return getDiscoveryTime();

		case FETCH_TIME:
			return getFetch_time();

		case SOURCE_ITEM_ID:
			return getSourceItemId();

		case LINK:
			return getLink();

		case TITLE:
			return getTitle();

		case CONTENT:
			return getContent();

		case SUMMARY:
			return getSummary();

		case COPYRIGHT:
			return getCopyright();

		case HAS_COPYRIGHT:
			return getHasCopyright();

		case BODY_IMAGES:
			return getBodyImages();

		case LIST_IMAGES:
			return getListImages();

		case BODY_IMAGES_COUNT:
			return getBodyImagesCount();

		case LIST_IMAGES_COUNT:
			return getListImagesCount();

		case PUBLISHER_PAGERANK_SCORE:
			return getPublisherPagerankScore();

		case SOURCE_COMMENT_COUNT:
			return getSourceCommentCount();

		case FALL_IMAGE:
			return getFallImage();

		case DISPLAY_LIST_IMAGES:
			return getDisplayListImages();

		case IS_OPEN_COMMENT:
			return getIsOpenComment();

		case COMMENT_COUNT:
			return getCommentCount();

		case FIRM_APP:
			return getFirm_app();

		case LINK_TYPE:
			return getLink_type();

		case DISPLAY_TYPE:
			return getDisplay_type();

		case PUBLISH_TIME_TS:
			return getPublish_time_ts();

		case RATE:
			return getRate();

		case RECOMMS:
			return getRecomms();

		case CONTENT_TYPE:
			return getContent_type();

		case DURATION:
			return getDuration();

		case STATE:
			return getState();

		case FLAG:
			return getFlag();

		case DISPLAY_THUMBNAILS:
			return getDisplay_thumbnails();

		case TAGS_TITLE:
			return getTags_title();

		case ITEM_CF_TOPIC:
			return getItem_cf_topic();

		case HIGH_GMP_CHECK:
			return getHighGmpCheck();

		case CONTENT_QUALITY:
			return getContentQuality();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case CONTENT_ID:
			return isSetContent_id();
		case CP_VERSION:
			return isSetCp_version();
		case TIER:
			return isSetTier();
		case IMPORTANT_LEVEL:
			return isSetImportant_level();
		case LOCAL:
			return isSetLocal();
		case CATEGORIES:
			return isSetCategories();
		case ADULT_SCORE:
			return isSetAdult_score();
		case NEWS_SCORE:
			return isSetNews_score();
		case EMOTION:
			return isSetEmotion();
		case LANGUAGE:
			return isSetLanguage();
		case KEYWORDS:
			return isSetKeywords();
		case TAGS:
			return isSetTags();
		case NER_PERSON:
			return isSetNer_person();
		case NER_LOCATION:
			return isSetNer_location();
		case NER_ORGANIZATION:
			return isSetNer_organization();
		case MD5:
			return isSetMd5();
		case SIMHASH:
			return isSetSimhash();
		case TYPE:
			return isSetType();
		case PUBLISH_TIME:
			return isSetPublish_time();
		case LIST_IMAGE_COUNT:
			return isSetList_image_count();
		case BODY_IMAGE_COUNT:
			return isSetBody_image_count();
		case WORD_COUNT:
			return isSetWord_count();
		case GROUP_ID:
			return isSetGroup_id();
		case UPDATE_TIME:
			return isSetUpdate_time();
		case PUBLISHER:
			return isSetPublisher();
		case SOURCE_TYPE:
			return isSetSourceType();
		case SOURCE:
			return isSetSource();
		case SOURCE_FEEDS:
			return isSetSourceFeeds();
		case CHANNEL:
			return isSetChannel();
		case AUTHOR:
			return isSetAuthor();
		case DISCOVERY_TIME:
			return isSetDiscoveryTime();
		case FETCH_TIME:
			return isSetFetch_time();
		case SOURCE_ITEM_ID:
			return isSetSourceItemId();
		case LINK:
			return isSetLink();
		case TITLE:
			return isSetTitle();
		case CONTENT:
			return isSetContent();
		case SUMMARY:
			return isSetSummary();
		case COPYRIGHT:
			return isSetCopyright();
		case HAS_COPYRIGHT:
			return isSetHasCopyright();
		case BODY_IMAGES:
			return isSetBodyImages();
		case LIST_IMAGES:
			return isSetListImages();
		case BODY_IMAGES_COUNT:
			return isSetBodyImagesCount();
		case LIST_IMAGES_COUNT:
			return isSetListImagesCount();
		case PUBLISHER_PAGERANK_SCORE:
			return isSetPublisherPagerankScore();
		case SOURCE_COMMENT_COUNT:
			return isSetSourceCommentCount();
		case FALL_IMAGE:
			return isSetFallImage();
		case DISPLAY_LIST_IMAGES:
			return isSetDisplayListImages();
		case IS_OPEN_COMMENT:
			return isSetIsOpenComment();
		case COMMENT_COUNT:
			return isSetCommentCount();
		case FIRM_APP:
			return isSetFirm_app();
		case LINK_TYPE:
			return isSetLink_type();
		case DISPLAY_TYPE:
			return isSetDisplay_type();
		case PUBLISH_TIME_TS:
			return isSetPublish_time_ts();
		case RATE:
			return isSetRate();
		case RECOMMS:
			return isSetRecomms();
		case CONTENT_TYPE:
			return isSetContent_type();
		case DURATION:
			return isSetDuration();
		case STATE:
			return isSetState();
		case FLAG:
			return isSetFlag();
		case DISPLAY_THUMBNAILS:
			return isSetDisplay_thumbnails();
		case TAGS_TITLE:
			return isSetTags_title();
		case ITEM_CF_TOPIC:
			return isSetItem_cf_topic();
		case HIGH_GMP_CHECK:
			return isSetHighGmpCheck();
		case CONTENT_QUALITY:
			return isSetContentQuality();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof FeederInfo)
			return this.equals((FeederInfo)that);
		return false;
	}

	public boolean equals(FeederInfo that) {
		if (that == null)
			return false;

		boolean this_present_content_id = true && this.isSetContent_id();
		boolean that_present_content_id = true && that.isSetContent_id();
		if (this_present_content_id || that_present_content_id) {
			if (!(this_present_content_id && that_present_content_id))
				return false;
			if (!this.content_id.equals(that.content_id))
				return false;
		}

		boolean this_present_cp_version = true && this.isSetCp_version();
		boolean that_present_cp_version = true && that.isSetCp_version();
		if (this_present_cp_version || that_present_cp_version) {
			if (!(this_present_cp_version && that_present_cp_version))
				return false;
			if (!this.cp_version.equals(that.cp_version))
				return false;
		}

		boolean this_present_tier = true && this.isSetTier();
		boolean that_present_tier = true && that.isSetTier();
		if (this_present_tier || that_present_tier) {
			if (!(this_present_tier && that_present_tier))
				return false;
			if (!this.tier.equals(that.tier))
				return false;
		}

		boolean this_present_important_level = true && this.isSetImportant_level();
		boolean that_present_important_level = true && that.isSetImportant_level();
		if (this_present_important_level || that_present_important_level) {
			if (!(this_present_important_level && that_present_important_level))
				return false;
			if (this.important_level != that.important_level)
				return false;
		}

		boolean this_present_local = true && this.isSetLocal();
		boolean that_present_local = true && that.isSetLocal();
		if (this_present_local || that_present_local) {
			if (!(this_present_local && that_present_local))
				return false;
			if (!this.local.equals(that.local))
				return false;
		}

		boolean this_present_categories = true && this.isSetCategories();
		boolean that_present_categories = true && that.isSetCategories();
		if (this_present_categories || that_present_categories) {
			if (!(this_present_categories && that_present_categories))
				return false;
			if (!this.categories.equals(that.categories))
				return false;
		}

		boolean this_present_adult_score = true && this.isSetAdult_score();
		boolean that_present_adult_score = true && that.isSetAdult_score();
		if (this_present_adult_score || that_present_adult_score) {
			if (!(this_present_adult_score && that_present_adult_score))
				return false;
			if (!this.adult_score.equals(that.adult_score))
				return false;
		}

		boolean this_present_news_score = true && this.isSetNews_score();
		boolean that_present_news_score = true && that.isSetNews_score();
		if (this_present_news_score || that_present_news_score) {
			if (!(this_present_news_score && that_present_news_score))
				return false;
			if (!this.news_score.equals(that.news_score))
				return false;
		}

		boolean this_present_emotion = true && this.isSetEmotion();
		boolean that_present_emotion = true && that.isSetEmotion();
		if (this_present_emotion || that_present_emotion) {
			if (!(this_present_emotion && that_present_emotion))
				return false;
			if (!this.emotion.equals(that.emotion))
				return false;
		}

		boolean this_present_language = true && this.isSetLanguage();
		boolean that_present_language = true && that.isSetLanguage();
		if (this_present_language || that_present_language) {
			if (!(this_present_language && that_present_language))
				return false;
			if (!this.language.equals(that.language))
				return false;
		}

		boolean this_present_keywords = true && this.isSetKeywords();
		boolean that_present_keywords = true && that.isSetKeywords();
		if (this_present_keywords || that_present_keywords) {
			if (!(this_present_keywords && that_present_keywords))
				return false;
			if (!this.keywords.equals(that.keywords))
				return false;
		}

		boolean this_present_tags = true && this.isSetTags();
		boolean that_present_tags = true && that.isSetTags();
		if (this_present_tags || that_present_tags) {
			if (!(this_present_tags && that_present_tags))
				return false;
			if (!this.tags.equals(that.tags))
				return false;
		}

		boolean this_present_ner_person = true && this.isSetNer_person();
		boolean that_present_ner_person = true && that.isSetNer_person();
		if (this_present_ner_person || that_present_ner_person) {
			if (!(this_present_ner_person && that_present_ner_person))
				return false;
			if (!this.ner_person.equals(that.ner_person))
				return false;
		}

		boolean this_present_ner_location = true && this.isSetNer_location();
		boolean that_present_ner_location = true && that.isSetNer_location();
		if (this_present_ner_location || that_present_ner_location) {
			if (!(this_present_ner_location && that_present_ner_location))
				return false;
			if (!this.ner_location.equals(that.ner_location))
				return false;
		}

		boolean this_present_ner_organization = true && this.isSetNer_organization();
		boolean that_present_ner_organization = true && that.isSetNer_organization();
		if (this_present_ner_organization || that_present_ner_organization) {
			if (!(this_present_ner_organization && that_present_ner_organization))
				return false;
			if (!this.ner_organization.equals(that.ner_organization))
				return false;
		}

		boolean this_present_md5 = true && this.isSetMd5();
		boolean that_present_md5 = true && that.isSetMd5();
		if (this_present_md5 || that_present_md5) {
			if (!(this_present_md5 && that_present_md5))
				return false;
			if (!this.md5.equals(that.md5))
				return false;
		}

		boolean this_present_simhash = true && this.isSetSimhash();
		boolean that_present_simhash = true && that.isSetSimhash();
		if (this_present_simhash || that_present_simhash) {
			if (!(this_present_simhash && that_present_simhash))
				return false;
			if (!this.simhash.equals(that.simhash))
				return false;
		}

		boolean this_present_type = true && this.isSetType();
		boolean that_present_type = true && that.isSetType();
		if (this_present_type || that_present_type) {
			if (!(this_present_type && that_present_type))
				return false;
			if (!this.type.equals(that.type))
				return false;
		}

		boolean this_present_publish_time = true && this.isSetPublish_time();
		boolean that_present_publish_time = true && that.isSetPublish_time();
		if (this_present_publish_time || that_present_publish_time) {
			if (!(this_present_publish_time && that_present_publish_time))
				return false;
			if (!this.publish_time.equals(that.publish_time))
				return false;
		}

		boolean this_present_list_image_count = true && this.isSetList_image_count();
		boolean that_present_list_image_count = true && that.isSetList_image_count();
		if (this_present_list_image_count || that_present_list_image_count) {
			if (!(this_present_list_image_count && that_present_list_image_count))
				return false;
			if (this.list_image_count != that.list_image_count)
				return false;
		}

		boolean this_present_body_image_count = true && this.isSetBody_image_count();
		boolean that_present_body_image_count = true && that.isSetBody_image_count();
		if (this_present_body_image_count || that_present_body_image_count) {
			if (!(this_present_body_image_count && that_present_body_image_count))
				return false;
			if (this.body_image_count != that.body_image_count)
				return false;
		}

		boolean this_present_word_count = true && this.isSetWord_count();
		boolean that_present_word_count = true && that.isSetWord_count();
		if (this_present_word_count || that_present_word_count) {
			if (!(this_present_word_count && that_present_word_count))
				return false;
			if (!this.word_count.equals(that.word_count))
				return false;
		}

		boolean this_present_group_id = true && this.isSetGroup_id();
		boolean that_present_group_id = true && that.isSetGroup_id();
		if (this_present_group_id || that_present_group_id) {
			if (!(this_present_group_id && that_present_group_id))
				return false;
			if (!this.group_id.equals(that.group_id))
				return false;
		}

		boolean this_present_update_time = true && this.isSetUpdate_time();
		boolean that_present_update_time = true && that.isSetUpdate_time();
		if (this_present_update_time || that_present_update_time) {
			if (!(this_present_update_time && that_present_update_time))
				return false;
			if (!this.update_time.equals(that.update_time))
				return false;
		}

		boolean this_present_publisher = true && this.isSetPublisher();
		boolean that_present_publisher = true && that.isSetPublisher();
		if (this_present_publisher || that_present_publisher) {
			if (!(this_present_publisher && that_present_publisher))
				return false;
			if (!this.publisher.equals(that.publisher))
				return false;
		}

		boolean this_present_sourceType = true && this.isSetSourceType();
		boolean that_present_sourceType = true && that.isSetSourceType();
		if (this_present_sourceType || that_present_sourceType) {
			if (!(this_present_sourceType && that_present_sourceType))
				return false;
			if (!this.sourceType.equals(that.sourceType))
				return false;
		}

		boolean this_present_source = true && this.isSetSource();
		boolean that_present_source = true && that.isSetSource();
		if (this_present_source || that_present_source) {
			if (!(this_present_source && that_present_source))
				return false;
			if (!this.source.equals(that.source))
				return false;
		}

		boolean this_present_sourceFeeds = true && this.isSetSourceFeeds();
		boolean that_present_sourceFeeds = true && that.isSetSourceFeeds();
		if (this_present_sourceFeeds || that_present_sourceFeeds) {
			if (!(this_present_sourceFeeds && that_present_sourceFeeds))
				return false;
			if (!this.sourceFeeds.equals(that.sourceFeeds))
				return false;
		}

		boolean this_present_channel = true && this.isSetChannel();
		boolean that_present_channel = true && that.isSetChannel();
		if (this_present_channel || that_present_channel) {
			if (!(this_present_channel && that_present_channel))
				return false;
			if (!this.channel.equals(that.channel))
				return false;
		}

		boolean this_present_author = true && this.isSetAuthor();
		boolean that_present_author = true && that.isSetAuthor();
		if (this_present_author || that_present_author) {
			if (!(this_present_author && that_present_author))
				return false;
			if (!this.author.equals(that.author))
				return false;
		}

		boolean this_present_discoveryTime = true && this.isSetDiscoveryTime();
		boolean that_present_discoveryTime = true && that.isSetDiscoveryTime();
		if (this_present_discoveryTime || that_present_discoveryTime) {
			if (!(this_present_discoveryTime && that_present_discoveryTime))
				return false;
			if (!this.discoveryTime.equals(that.discoveryTime))
				return false;
		}

		boolean this_present_fetch_time = true && this.isSetFetch_time();
		boolean that_present_fetch_time = true && that.isSetFetch_time();
		if (this_present_fetch_time || that_present_fetch_time) {
			if (!(this_present_fetch_time && that_present_fetch_time))
				return false;
			if (!this.fetch_time.equals(that.fetch_time))
				return false;
		}

		boolean this_present_sourceItemId = true && this.isSetSourceItemId();
		boolean that_present_sourceItemId = true && that.isSetSourceItemId();
		if (this_present_sourceItemId || that_present_sourceItemId) {
			if (!(this_present_sourceItemId && that_present_sourceItemId))
				return false;
			if (!this.sourceItemId.equals(that.sourceItemId))
				return false;
		}

		boolean this_present_link = true && this.isSetLink();
		boolean that_present_link = true && that.isSetLink();
		if (this_present_link || that_present_link) {
			if (!(this_present_link && that_present_link))
				return false;
			if (!this.link.equals(that.link))
				return false;
		}

		boolean this_present_title = true && this.isSetTitle();
		boolean that_present_title = true && that.isSetTitle();
		if (this_present_title || that_present_title) {
			if (!(this_present_title && that_present_title))
				return false;
			if (!this.title.equals(that.title))
				return false;
		}

		boolean this_present_content = true && this.isSetContent();
		boolean that_present_content = true && that.isSetContent();
		if (this_present_content || that_present_content) {
			if (!(this_present_content && that_present_content))
				return false;
			if (!this.content.equals(that.content))
				return false;
		}

		boolean this_present_summary = true && this.isSetSummary();
		boolean that_present_summary = true && that.isSetSummary();
		if (this_present_summary || that_present_summary) {
			if (!(this_present_summary && that_present_summary))
				return false;
			if (!this.summary.equals(that.summary))
				return false;
		}

		boolean this_present_copyright = true && this.isSetCopyright();
		boolean that_present_copyright = true && that.isSetCopyright();
		if (this_present_copyright || that_present_copyright) {
			if (!(this_present_copyright && that_present_copyright))
				return false;
			if (!this.copyright.equals(that.copyright))
				return false;
		}

		boolean this_present_hasCopyright = true && this.isSetHasCopyright();
		boolean that_present_hasCopyright = true && that.isSetHasCopyright();
		if (this_present_hasCopyright || that_present_hasCopyright) {
			if (!(this_present_hasCopyright && that_present_hasCopyright))
				return false;
			if (this.hasCopyright != that.hasCopyright)
				return false;
		}

		boolean this_present_bodyImages = true && this.isSetBodyImages();
		boolean that_present_bodyImages = true && that.isSetBodyImages();
		if (this_present_bodyImages || that_present_bodyImages) {
			if (!(this_present_bodyImages && that_present_bodyImages))
				return false;
			if (!this.bodyImages.equals(that.bodyImages))
				return false;
		}

		boolean this_present_listImages = true && this.isSetListImages();
		boolean that_present_listImages = true && that.isSetListImages();
		if (this_present_listImages || that_present_listImages) {
			if (!(this_present_listImages && that_present_listImages))
				return false;
			if (!this.listImages.equals(that.listImages))
				return false;
		}

		boolean this_present_bodyImagesCount = true && this.isSetBodyImagesCount();
		boolean that_present_bodyImagesCount = true && that.isSetBodyImagesCount();
		if (this_present_bodyImagesCount || that_present_bodyImagesCount) {
			if (!(this_present_bodyImagesCount && that_present_bodyImagesCount))
				return false;
			if (this.bodyImagesCount != that.bodyImagesCount)
				return false;
		}

		boolean this_present_listImagesCount = true && this.isSetListImagesCount();
		boolean that_present_listImagesCount = true && that.isSetListImagesCount();
		if (this_present_listImagesCount || that_present_listImagesCount) {
			if (!(this_present_listImagesCount && that_present_listImagesCount))
				return false;
			if (this.listImagesCount != that.listImagesCount)
				return false;
		}

		boolean this_present_publisherPagerankScore = true && this.isSetPublisherPagerankScore();
		boolean that_present_publisherPagerankScore = true && that.isSetPublisherPagerankScore();
		if (this_present_publisherPagerankScore || that_present_publisherPagerankScore) {
			if (!(this_present_publisherPagerankScore && that_present_publisherPagerankScore))
				return false;
			if (this.publisherPagerankScore != that.publisherPagerankScore)
				return false;
		}

		boolean this_present_sourceCommentCount = true && this.isSetSourceCommentCount();
		boolean that_present_sourceCommentCount = true && that.isSetSourceCommentCount();
		if (this_present_sourceCommentCount || that_present_sourceCommentCount) {
			if (!(this_present_sourceCommentCount && that_present_sourceCommentCount))
				return false;
			if (this.sourceCommentCount != that.sourceCommentCount)
				return false;
		}

		boolean this_present_fallImage = true && this.isSetFallImage();
		boolean that_present_fallImage = true && that.isSetFallImage();
		if (this_present_fallImage || that_present_fallImage) {
			if (!(this_present_fallImage && that_present_fallImage))
				return false;
			if (!this.fallImage.equals(that.fallImage))
				return false;
		}

		boolean this_present_displayListImages = true && this.isSetDisplayListImages();
		boolean that_present_displayListImages = true && that.isSetDisplayListImages();
		if (this_present_displayListImages || that_present_displayListImages) {
			if (!(this_present_displayListImages && that_present_displayListImages))
				return false;
			if (!this.displayListImages.equals(that.displayListImages))
				return false;
		}

		boolean this_present_isOpenComment = true && this.isSetIsOpenComment();
		boolean that_present_isOpenComment = true && that.isSetIsOpenComment();
		if (this_present_isOpenComment || that_present_isOpenComment) {
			if (!(this_present_isOpenComment && that_present_isOpenComment))
				return false;
			if (!this.isOpenComment.equals(that.isOpenComment))
				return false;
		}

		boolean this_present_commentCount = true && this.isSetCommentCount();
		boolean that_present_commentCount = true && that.isSetCommentCount();
		if (this_present_commentCount || that_present_commentCount) {
			if (!(this_present_commentCount && that_present_commentCount))
				return false;
			if (this.commentCount != that.commentCount)
				return false;
		}

		boolean this_present_firm_app = true && this.isSetFirm_app();
		boolean that_present_firm_app = true && that.isSetFirm_app();
		if (this_present_firm_app || that_present_firm_app) {
			if (!(this_present_firm_app && that_present_firm_app))
				return false;
			if (!this.firm_app.equals(that.firm_app))
				return false;
		}

		boolean this_present_link_type = true && this.isSetLink_type();
		boolean that_present_link_type = true && that.isSetLink_type();
		if (this_present_link_type || that_present_link_type) {
			if (!(this_present_link_type && that_present_link_type))
				return false;
			if (this.link_type != that.link_type)
				return false;
		}

		boolean this_present_display_type = true && this.isSetDisplay_type();
		boolean that_present_display_type = true && that.isSetDisplay_type();
		if (this_present_display_type || that_present_display_type) {
			if (!(this_present_display_type && that_present_display_type))
				return false;
			if (this.display_type != that.display_type)
				return false;
		}

		boolean this_present_publish_time_ts = true && this.isSetPublish_time_ts();
		boolean that_present_publish_time_ts = true && that.isSetPublish_time_ts();
		if (this_present_publish_time_ts || that_present_publish_time_ts) {
			if (!(this_present_publish_time_ts && that_present_publish_time_ts))
				return false;
			if (this.publish_time_ts != that.publish_time_ts)
				return false;
		}

		boolean this_present_rate = true && this.isSetRate();
		boolean that_present_rate = true && that.isSetRate();
		if (this_present_rate || that_present_rate) {
			if (!(this_present_rate && that_present_rate))
				return false;
			if (this.rate != that.rate)
				return false;
		}

		boolean this_present_recomms = true && this.isSetRecomms();
		boolean that_present_recomms = true && that.isSetRecomms();
		if (this_present_recomms || that_present_recomms) {
			if (!(this_present_recomms && that_present_recomms))
				return false;
			if (!this.recomms.equals(that.recomms))
				return false;
		}

		boolean this_present_content_type = true && this.isSetContent_type();
		boolean that_present_content_type = true && that.isSetContent_type();
		if (this_present_content_type || that_present_content_type) {
			if (!(this_present_content_type && that_present_content_type))
				return false;
			if (!this.content_type.equals(that.content_type))
				return false;
		}

		boolean this_present_duration = true && this.isSetDuration();
		boolean that_present_duration = true && that.isSetDuration();
		if (this_present_duration || that_present_duration) {
			if (!(this_present_duration && that_present_duration))
				return false;
			if (this.duration != that.duration)
				return false;
		}

		boolean this_present_state = true && this.isSetState();
		boolean that_present_state = true && that.isSetState();
		if (this_present_state || that_present_state) {
			if (!(this_present_state && that_present_state))
				return false;
			if (this.state != that.state)
				return false;
		}

		boolean this_present_flag = true && this.isSetFlag();
		boolean that_present_flag = true && that.isSetFlag();
		if (this_present_flag || that_present_flag) {
			if (!(this_present_flag && that_present_flag))
				return false;
			if (!this.flag.equals(that.flag))
				return false;
		}

		boolean this_present_display_thumbnails = true && this.isSetDisplay_thumbnails();
		boolean that_present_display_thumbnails = true && that.isSetDisplay_thumbnails();
		if (this_present_display_thumbnails || that_present_display_thumbnails) {
			if (!(this_present_display_thumbnails && that_present_display_thumbnails))
				return false;
			if (!this.display_thumbnails.equals(that.display_thumbnails))
				return false;
		}

		boolean this_present_tags_title = true && this.isSetTags_title();
		boolean that_present_tags_title = true && that.isSetTags_title();
		if (this_present_tags_title || that_present_tags_title) {
			if (!(this_present_tags_title && that_present_tags_title))
				return false;
			if (!this.tags_title.equals(that.tags_title))
				return false;
		}

		boolean this_present_item_cf_topic = true && this.isSetItem_cf_topic();
		boolean that_present_item_cf_topic = true && that.isSetItem_cf_topic();
		if (this_present_item_cf_topic || that_present_item_cf_topic) {
			if (!(this_present_item_cf_topic && that_present_item_cf_topic))
				return false;
			if (!this.item_cf_topic.equals(that.item_cf_topic))
				return false;
		}

		boolean this_present_highGmpCheck = true && this.isSetHighGmpCheck();
		boolean that_present_highGmpCheck = true && that.isSetHighGmpCheck();
		if (this_present_highGmpCheck || that_present_highGmpCheck) {
			if (!(this_present_highGmpCheck && that_present_highGmpCheck))
				return false;
			if (this.highGmpCheck != that.highGmpCheck)
				return false;
		}

		boolean this_present_contentQuality = true && this.isSetContentQuality();
		boolean that_present_contentQuality = true && that.isSetContentQuality();
		if (this_present_contentQuality || that_present_contentQuality) {
			if (!(this_present_contentQuality && that_present_contentQuality))
				return false;
			if (this.contentQuality != that.contentQuality)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_content_id = true && (isSetContent_id());
		list.add(present_content_id);
		if (present_content_id)
			list.add(content_id);

		boolean present_cp_version = true && (isSetCp_version());
		list.add(present_cp_version);
		if (present_cp_version)
			list.add(cp_version);

		boolean present_tier = true && (isSetTier());
		list.add(present_tier);
		if (present_tier)
			list.add(tier);

		boolean present_important_level = true && (isSetImportant_level());
		list.add(present_important_level);
		if (present_important_level)
			list.add(important_level);

		boolean present_local = true && (isSetLocal());
		list.add(present_local);
		if (present_local)
			list.add(local);

		boolean present_categories = true && (isSetCategories());
		list.add(present_categories);
		if (present_categories)
			list.add(categories);

		boolean present_adult_score = true && (isSetAdult_score());
		list.add(present_adult_score);
		if (present_adult_score)
			list.add(adult_score);

		boolean present_news_score = true && (isSetNews_score());
		list.add(present_news_score);
		if (present_news_score)
			list.add(news_score);

		boolean present_emotion = true && (isSetEmotion());
		list.add(present_emotion);
		if (present_emotion)
			list.add(emotion);

		boolean present_language = true && (isSetLanguage());
		list.add(present_language);
		if (present_language)
			list.add(language);

		boolean present_keywords = true && (isSetKeywords());
		list.add(present_keywords);
		if (present_keywords)
			list.add(keywords);

		boolean present_tags = true && (isSetTags());
		list.add(present_tags);
		if (present_tags)
			list.add(tags);

		boolean present_ner_person = true && (isSetNer_person());
		list.add(present_ner_person);
		if (present_ner_person)
			list.add(ner_person);

		boolean present_ner_location = true && (isSetNer_location());
		list.add(present_ner_location);
		if (present_ner_location)
			list.add(ner_location);

		boolean present_ner_organization = true && (isSetNer_organization());
		list.add(present_ner_organization);
		if (present_ner_organization)
			list.add(ner_organization);

		boolean present_md5 = true && (isSetMd5());
		list.add(present_md5);
		if (present_md5)
			list.add(md5);

		boolean present_simhash = true && (isSetSimhash());
		list.add(present_simhash);
		if (present_simhash)
			list.add(simhash);

		boolean present_type = true && (isSetType());
		list.add(present_type);
		if (present_type)
			list.add(type);

		boolean present_publish_time = true && (isSetPublish_time());
		list.add(present_publish_time);
		if (present_publish_time)
			list.add(publish_time);

		boolean present_list_image_count = true && (isSetList_image_count());
		list.add(present_list_image_count);
		if (present_list_image_count)
			list.add(list_image_count);

		boolean present_body_image_count = true && (isSetBody_image_count());
		list.add(present_body_image_count);
		if (present_body_image_count)
			list.add(body_image_count);

		boolean present_word_count = true && (isSetWord_count());
		list.add(present_word_count);
		if (present_word_count)
			list.add(word_count);

		boolean present_group_id = true && (isSetGroup_id());
		list.add(present_group_id);
		if (present_group_id)
			list.add(group_id);

		boolean present_update_time = true && (isSetUpdate_time());
		list.add(present_update_time);
		if (present_update_time)
			list.add(update_time);

		boolean present_publisher = true && (isSetPublisher());
		list.add(present_publisher);
		if (present_publisher)
			list.add(publisher);

		boolean present_sourceType = true && (isSetSourceType());
		list.add(present_sourceType);
		if (present_sourceType)
			list.add(sourceType);

		boolean present_source = true && (isSetSource());
		list.add(present_source);
		if (present_source)
			list.add(source);

		boolean present_sourceFeeds = true && (isSetSourceFeeds());
		list.add(present_sourceFeeds);
		if (present_sourceFeeds)
			list.add(sourceFeeds);

		boolean present_channel = true && (isSetChannel());
		list.add(present_channel);
		if (present_channel)
			list.add(channel);

		boolean present_author = true && (isSetAuthor());
		list.add(present_author);
		if (present_author)
			list.add(author);

		boolean present_discoveryTime = true && (isSetDiscoveryTime());
		list.add(present_discoveryTime);
		if (present_discoveryTime)
			list.add(discoveryTime);

		boolean present_fetch_time = true && (isSetFetch_time());
		list.add(present_fetch_time);
		if (present_fetch_time)
			list.add(fetch_time);

		boolean present_sourceItemId = true && (isSetSourceItemId());
		list.add(present_sourceItemId);
		if (present_sourceItemId)
			list.add(sourceItemId);

		boolean present_link = true && (isSetLink());
		list.add(present_link);
		if (present_link)
			list.add(link);

		boolean present_title = true && (isSetTitle());
		list.add(present_title);
		if (present_title)
			list.add(title);

		boolean present_content = true && (isSetContent());
		list.add(present_content);
		if (present_content)
			list.add(content);

		boolean present_summary = true && (isSetSummary());
		list.add(present_summary);
		if (present_summary)
			list.add(summary);

		boolean present_copyright = true && (isSetCopyright());
		list.add(present_copyright);
		if (present_copyright)
			list.add(copyright);

		boolean present_hasCopyright = true && (isSetHasCopyright());
		list.add(present_hasCopyright);
		if (present_hasCopyright)
			list.add(hasCopyright);

		boolean present_bodyImages = true && (isSetBodyImages());
		list.add(present_bodyImages);
		if (present_bodyImages)
			list.add(bodyImages);

		boolean present_listImages = true && (isSetListImages());
		list.add(present_listImages);
		if (present_listImages)
			list.add(listImages);

		boolean present_bodyImagesCount = true && (isSetBodyImagesCount());
		list.add(present_bodyImagesCount);
		if (present_bodyImagesCount)
			list.add(bodyImagesCount);

		boolean present_listImagesCount = true && (isSetListImagesCount());
		list.add(present_listImagesCount);
		if (present_listImagesCount)
			list.add(listImagesCount);

		boolean present_publisherPagerankScore = true && (isSetPublisherPagerankScore());
		list.add(present_publisherPagerankScore);
		if (present_publisherPagerankScore)
			list.add(publisherPagerankScore);

		boolean present_sourceCommentCount = true && (isSetSourceCommentCount());
		list.add(present_sourceCommentCount);
		if (present_sourceCommentCount)
			list.add(sourceCommentCount);

		boolean present_fallImage = true && (isSetFallImage());
		list.add(present_fallImage);
		if (present_fallImage)
			list.add(fallImage);

		boolean present_displayListImages = true && (isSetDisplayListImages());
		list.add(present_displayListImages);
		if (present_displayListImages)
			list.add(displayListImages);

		boolean present_isOpenComment = true && (isSetIsOpenComment());
		list.add(present_isOpenComment);
		if (present_isOpenComment)
			list.add(isOpenComment);

		boolean present_commentCount = true && (isSetCommentCount());
		list.add(present_commentCount);
		if (present_commentCount)
			list.add(commentCount);

		boolean present_firm_app = true && (isSetFirm_app());
		list.add(present_firm_app);
		if (present_firm_app)
			list.add(firm_app);

		boolean present_link_type = true && (isSetLink_type());
		list.add(present_link_type);
		if (present_link_type)
			list.add(link_type);

		boolean present_display_type = true && (isSetDisplay_type());
		list.add(present_display_type);
		if (present_display_type)
			list.add(display_type);

		boolean present_publish_time_ts = true && (isSetPublish_time_ts());
		list.add(present_publish_time_ts);
		if (present_publish_time_ts)
			list.add(publish_time_ts);

		boolean present_rate = true && (isSetRate());
		list.add(present_rate);
		if (present_rate)
			list.add(rate);

		boolean present_recomms = true && (isSetRecomms());
		list.add(present_recomms);
		if (present_recomms)
			list.add(recomms);

		boolean present_content_type = true && (isSetContent_type());
		list.add(present_content_type);
		if (present_content_type)
			list.add(content_type);

		boolean present_duration = true && (isSetDuration());
		list.add(present_duration);
		if (present_duration)
			list.add(duration);

		boolean present_state = true && (isSetState());
		list.add(present_state);
		if (present_state)
			list.add(state);

		boolean present_flag = true && (isSetFlag());
		list.add(present_flag);
		if (present_flag)
			list.add(flag);

		boolean present_display_thumbnails = true && (isSetDisplay_thumbnails());
		list.add(present_display_thumbnails);
		if (present_display_thumbnails)
			list.add(display_thumbnails);

		boolean present_tags_title = true && (isSetTags_title());
		list.add(present_tags_title);
		if (present_tags_title)
			list.add(tags_title);

		boolean present_item_cf_topic = true && (isSetItem_cf_topic());
		list.add(present_item_cf_topic);
		if (present_item_cf_topic)
			list.add(item_cf_topic);

		boolean present_highGmpCheck = true && (isSetHighGmpCheck());
		list.add(present_highGmpCheck);
		if (present_highGmpCheck)
			list.add(highGmpCheck);

		boolean present_contentQuality = true && (isSetContentQuality());
		list.add(present_contentQuality);
		if (present_contentQuality)
			list.add(contentQuality);

		return list.hashCode();
	}

	@Override
	public int compareTo(FeederInfo other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetContent_id()).compareTo(other.isSetContent_id());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetContent_id()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content_id, other.content_id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCp_version()).compareTo(other.isSetCp_version());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCp_version()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cp_version, other.cp_version);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTier()).compareTo(other.isSetTier());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTier()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tier, other.tier);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetImportant_level()).compareTo(other.isSetImportant_level());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetImportant_level()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.important_level, other.important_level);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLocal()).compareTo(other.isSetLocal());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLocal()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local, other.local);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCategories()).compareTo(other.isSetCategories());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCategories()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categories, other.categories);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAdult_score()).compareTo(other.isSetAdult_score());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAdult_score()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adult_score, other.adult_score);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNews_score()).compareTo(other.isSetNews_score());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNews_score()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.news_score, other.news_score);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEmotion()).compareTo(other.isSetEmotion());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEmotion()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotion, other.emotion);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(other.isSetLanguage());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLanguage()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, other.language);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetKeywords()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTags()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNer_person()).compareTo(other.isSetNer_person());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNer_person()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ner_person, other.ner_person);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNer_location()).compareTo(other.isSetNer_location());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNer_location()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ner_location, other.ner_location);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNer_organization()).compareTo(other.isSetNer_organization());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNer_organization()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ner_organization, other.ner_organization);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMd5()).compareTo(other.isSetMd5());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMd5()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5, other.md5);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSimhash()).compareTo(other.isSetSimhash());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSimhash()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simhash, other.simhash);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPublish_time()).compareTo(other.isSetPublish_time());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPublish_time()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publish_time, other.publish_time);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetList_image_count()).compareTo(other.isSetList_image_count());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetList_image_count()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_image_count, other.list_image_count);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetBody_image_count()).compareTo(other.isSetBody_image_count());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBody_image_count()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body_image_count, other.body_image_count);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetWord_count()).compareTo(other.isSetWord_count());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWord_count()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.word_count, other.word_count);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(other.isSetGroup_id());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGroup_id()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, other.group_id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdate_time()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPublisher()).compareTo(other.isSetPublisher());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPublisher()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisher, other.publisher);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSourceType()).compareTo(other.isSetSourceType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSourceType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceType, other.sourceType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSource()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSourceFeeds()).compareTo(other.isSetSourceFeeds());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSourceFeeds()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceFeeds, other.sourceFeeds);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetChannel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAuthor()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDiscoveryTime()).compareTo(other.isSetDiscoveryTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDiscoveryTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discoveryTime, other.discoveryTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFetch_time()).compareTo(other.isSetFetch_time());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFetch_time()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetch_time, other.fetch_time);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSourceItemId()).compareTo(other.isSetSourceItemId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSourceItemId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceItemId, other.sourceItemId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLink()).compareTo(other.isSetLink());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLink()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, other.link);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTitle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetContent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSummary()).compareTo(other.isSetSummary());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSummary()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, other.summary);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCopyright()).compareTo(other.isSetCopyright());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCopyright()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.copyright, other.copyright);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetHasCopyright()).compareTo(other.isSetHasCopyright());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetHasCopyright()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasCopyright, other.hasCopyright);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetBodyImages()).compareTo(other.isSetBodyImages());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBodyImages()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bodyImages, other.bodyImages);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetListImages()).compareTo(other.isSetListImages());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetListImages()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listImages, other.listImages);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetBodyImagesCount()).compareTo(other.isSetBodyImagesCount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBodyImagesCount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bodyImagesCount, other.bodyImagesCount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetListImagesCount()).compareTo(other.isSetListImagesCount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetListImagesCount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listImagesCount, other.listImagesCount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPublisherPagerankScore()).compareTo(other.isSetPublisherPagerankScore());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPublisherPagerankScore()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisherPagerankScore, other.publisherPagerankScore);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSourceCommentCount()).compareTo(other.isSetSourceCommentCount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSourceCommentCount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceCommentCount, other.sourceCommentCount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFallImage()).compareTo(other.isSetFallImage());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFallImage()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fallImage, other.fallImage);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDisplayListImages()).compareTo(other.isSetDisplayListImages());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDisplayListImages()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayListImages, other.displayListImages);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsOpenComment()).compareTo(other.isSetIsOpenComment());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsOpenComment()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOpenComment, other.isOpenComment);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCommentCount()).compareTo(other.isSetCommentCount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCommentCount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentCount, other.commentCount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFirm_app()).compareTo(other.isSetFirm_app());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFirm_app()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firm_app, other.firm_app);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLink_type()).compareTo(other.isSetLink_type());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLink_type()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_type, other.link_type);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDisplay_type()).compareTo(other.isSetDisplay_type());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDisplay_type()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display_type, other.display_type);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPublish_time_ts()).compareTo(other.isSetPublish_time_ts());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPublish_time_ts()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publish_time_ts, other.publish_time_ts);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRate()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRecomms()).compareTo(other.isSetRecomms());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRecomms()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recomms, other.recomms);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetContent_type()).compareTo(other.isSetContent_type());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetContent_type()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content_type, other.content_type);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDuration()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetState()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFlag()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDisplay_thumbnails()).compareTo(other.isSetDisplay_thumbnails());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDisplay_thumbnails()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display_thumbnails, other.display_thumbnails);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTags_title()).compareTo(other.isSetTags_title());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTags_title()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags_title, other.tags_title);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetItem_cf_topic()).compareTo(other.isSetItem_cf_topic());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetItem_cf_topic()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_cf_topic, other.item_cf_topic);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetHighGmpCheck()).compareTo(other.isSetHighGmpCheck());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetHighGmpCheck()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highGmpCheck, other.highGmpCheck);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetContentQuality()).compareTo(other.isSetContentQuality());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetContentQuality()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentQuality, other.contentQuality);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	public String toStringOld() {
		StringBuilder sb = new StringBuilder("FeederInfo(");
		boolean first = true;

		sb.append("content_id:");
		if (this.content_id == null) {
			sb.append("null");
		} else {
			sb.append(this.content_id);
		}
		first = false;
		if (isSetCp_version()) {
			if (!first) sb.append(", ");
			sb.append("cp_version:");
			if (this.cp_version == null) {
				sb.append("null");
			} else {
				sb.append(this.cp_version);
			}
			first = false;
		}
		if (isSetTier()) {
			if (!first) sb.append(", ");
			sb.append("tier:");
			if (this.tier == null) {
				sb.append("null");
			} else {
				sb.append(this.tier);
			}
			first = false;
		}
		if (isSetImportant_level()) {
			if (!first) sb.append(", ");
			sb.append("important_level:");
			sb.append(this.important_level);
			first = false;
		}
		if (!first) sb.append(", ");
		sb.append("local:");
		if (this.local == null) {
			sb.append("null");
		} else {
			sb.append(this.local);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("categories:");
		if (this.categories == null) {
			sb.append("null");
		} else {
			sb.append(this.categories);
		}
		first = false;
		if (isSetAdult_score()) {
			if (!first) sb.append(", ");
			sb.append("adult_score:");
			if (this.adult_score == null) {
				sb.append("null");
			} else {
				sb.append(this.adult_score);
			}
			first = false;
		}
		if (isSetNews_score()) {
			if (!first) sb.append(", ");
			sb.append("news_score:");
			if (this.news_score == null) {
				sb.append("null");
			} else {
				sb.append(this.news_score);
			}
			first = false;
		}
		if (isSetEmotion()) {
			if (!first) sb.append(", ");
			sb.append("emotion:");
			if (this.emotion == null) {
				sb.append("null");
			} else {
				sb.append(this.emotion);
			}
			first = false;
		}
		if (!first) sb.append(", ");
		sb.append("language:");
		if (this.language == null) {
			sb.append("null");
		} else {
			sb.append(this.language);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("keywords:");
		if (this.keywords == null) {
			sb.append("null");
		} else {
			sb.append(this.keywords);
		}
		first = false;
		if (isSetTags()) {
			if (!first) sb.append(", ");
			sb.append("tags:");
			if (this.tags == null) {
				sb.append("null");
			} else {
				sb.append(this.tags);
			}
			first = false;
		}
		if (isSetNer_person()) {
			if (!first) sb.append(", ");
			sb.append("ner_person:");
			if (this.ner_person == null) {
				sb.append("null");
			} else {
				sb.append(this.ner_person);
			}
			first = false;
		}
		if (isSetNer_location()) {
			if (!first) sb.append(", ");
			sb.append("ner_location:");
			if (this.ner_location == null) {
				sb.append("null");
			} else {
				sb.append(this.ner_location);
			}
			first = false;
		}
		if (isSetNer_organization()) {
			if (!first) sb.append(", ");
			sb.append("ner_organization:");
			if (this.ner_organization == null) {
				sb.append("null");
			} else {
				sb.append(this.ner_organization);
			}
			first = false;
		}
		if (isSetMd5()) {
			if (!first) sb.append(", ");
			sb.append("md5:");
			if (this.md5 == null) {
				sb.append("null");
			} else {
				sb.append(this.md5);
			}
			first = false;
		}
		if (isSetSimhash()) {
			if (!first) sb.append(", ");
			sb.append("simhash:");
			if (this.simhash == null) {
				sb.append("null");
			} else {
				sb.append(this.simhash);
			}
			first = false;
		}
		if (!first) sb.append(", ");
		sb.append("type:");
		if (this.type == null) {
			sb.append("null");
		} else {
			sb.append(this.type);
		}
		first = false;
		if (isSetPublish_time()) {
			if (!first) sb.append(", ");
			sb.append("publish_time:");
			if (this.publish_time == null) {
				sb.append("null");
			} else {
				sb.append(this.publish_time);
			}
			first = false;
		}
		if (isSetList_image_count()) {
			if (!first) sb.append(", ");
			sb.append("list_image_count:");
			sb.append(this.list_image_count);
			first = false;
		}
		if (isSetBody_image_count()) {
			if (!first) sb.append(", ");
			sb.append("body_image_count:");
			sb.append(this.body_image_count);
			first = false;
		}
		if (isSetWord_count()) {
			if (!first) sb.append(", ");
			sb.append("word_count:");
			if (this.word_count == null) {
				sb.append("null");
			} else {
				sb.append(this.word_count);
			}
			first = false;
		}
		if (isSetGroup_id()) {
			if (!first) sb.append(", ");
			sb.append("group_id:");
			if (this.group_id == null) {
				sb.append("null");
			} else {
				sb.append(this.group_id);
			}
			first = false;
		}
		if (isSetUpdate_time()) {
			if (!first) sb.append(", ");
			sb.append("update_time:");
			if (this.update_time == null) {
				sb.append("null");
			} else {
				sb.append(this.update_time);
			}
			first = false;
		}
		if (isSetPublisher()) {
			if (!first) sb.append(", ");
			sb.append("publisher:");
			if (this.publisher == null) {
				sb.append("null");
			} else {
				sb.append(this.publisher);
			}
			first = false;
		}
		if (isSetSourceType()) {
			if (!first) sb.append(", ");
			sb.append("sourceType:");
			if (this.sourceType == null) {
				sb.append("null");
			} else {
				sb.append(this.sourceType);
			}
			first = false;
		}
		if (isSetSource()) {
			if (!first) sb.append(", ");
			sb.append("source:");
			if (this.source == null) {
				sb.append("null");
			} else {
				sb.append(this.source);
			}
			first = false;
		}
		if (isSetSourceFeeds()) {
			if (!first) sb.append(", ");
			sb.append("sourceFeeds:");
			if (this.sourceFeeds == null) {
				sb.append("null");
			} else {
				sb.append(this.sourceFeeds);
			}
			first = false;
		}
		if (isSetChannel()) {
			if (!first) sb.append(", ");
			sb.append("channel:");
			if (this.channel == null) {
				sb.append("null");
			} else {
				sb.append(this.channel);
			}
			first = false;
		}
		if (isSetAuthor()) {
			if (!first) sb.append(", ");
			sb.append("author:");
			if (this.author == null) {
				sb.append("null");
			} else {
				sb.append(this.author);
			}
			first = false;
		}
		if (isSetDiscoveryTime()) {
			if (!first) sb.append(", ");
			sb.append("discoveryTime:");
			if (this.discoveryTime == null) {
				sb.append("null");
			} else {
				sb.append(this.discoveryTime);
			}
			first = false;
		}
		if (isSetFetch_time()) {
			if (!first) sb.append(", ");
			sb.append("fetch_time:");
			if (this.fetch_time == null) {
				sb.append("null");
			} else {
				sb.append(this.fetch_time);
			}
			first = false;
		}
		if (isSetSourceItemId()) {
			if (!first) sb.append(", ");
			sb.append("sourceItemId:");
			if (this.sourceItemId == null) {
				sb.append("null");
			} else {
				sb.append(this.sourceItemId);
			}
			first = false;
		}
		if (isSetLink()) {
			if (!first) sb.append(", ");
			sb.append("link:");
			if (this.link == null) {
				sb.append("null");
			} else {
				sb.append(this.link);
			}
			first = false;
		}
		if (isSetTitle()) {
			if (!first) sb.append(", ");
			sb.append("title:");
			if (this.title == null) {
				sb.append("null");
			} else {
				sb.append(this.title);
			}
			first = false;
		}
		if (isSetContent()) {
			if (!first) sb.append(", ");
			sb.append("content:");
			if (this.content == null) {
				sb.append("null");
			} else {
				sb.append(this.content);
			}
			first = false;
		}
		if (isSetSummary()) {
			if (!first) sb.append(", ");
			sb.append("summary:");
			if (this.summary == null) {
				sb.append("null");
			} else {
				sb.append(this.summary);
			}
			first = false;
		}
		if (isSetCopyright()) {
			if (!first) sb.append(", ");
			sb.append("copyright:");
			if (this.copyright == null) {
				sb.append("null");
			} else {
				sb.append(this.copyright);
			}
			first = false;
		}
		if (isSetHasCopyright()) {
			if (!first) sb.append(", ");
			sb.append("hasCopyright:");
			sb.append(this.hasCopyright);
			first = false;
		}
		if (isSetBodyImages()) {
			if (!first) sb.append(", ");
			sb.append("bodyImages:");
			if (this.bodyImages == null) {
				sb.append("null");
			} else {
				sb.append(this.bodyImages);
			}
			first = false;
		}
		if (isSetListImages()) {
			if (!first) sb.append(", ");
			sb.append("listImages:");
			if (this.listImages == null) {
				sb.append("null");
			} else {
				sb.append(this.listImages);
			}
			first = false;
		}
		if (isSetBodyImagesCount()) {
			if (!first) sb.append(", ");
			sb.append("bodyImagesCount:");
			sb.append(this.bodyImagesCount);
			first = false;
		}
		if (isSetListImagesCount()) {
			if (!first) sb.append(", ");
			sb.append("listImagesCount:");
			sb.append(this.listImagesCount);
			first = false;
		}
		if (isSetPublisherPagerankScore()) {
			if (!first) sb.append(", ");
			sb.append("publisherPagerankScore:");
			sb.append(this.publisherPagerankScore);
			first = false;
		}
		if (isSetSourceCommentCount()) {
			if (!first) sb.append(", ");
			sb.append("sourceCommentCount:");
			sb.append(this.sourceCommentCount);
			first = false;
		}
		if (isSetFallImage()) {
			if (!first) sb.append(", ");
			sb.append("fallImage:");
			if (this.fallImage == null) {
				sb.append("null");
			} else {
				sb.append(this.fallImage);
			}
			first = false;
		}
		if (isSetDisplayListImages()) {
			if (!first) sb.append(", ");
			sb.append("displayListImages:");
			if (this.displayListImages == null) {
				sb.append("null");
			} else {
				sb.append(this.displayListImages);
			}
			first = false;
		}
		if (isSetIsOpenComment()) {
			if (!first) sb.append(", ");
			sb.append("isOpenComment:");
			if (this.isOpenComment == null) {
				sb.append("null");
			} else {
				sb.append(this.isOpenComment);
			}
			first = false;
		}
		if (isSetCommentCount()) {
			if (!first) sb.append(", ");
			sb.append("commentCount:");
			sb.append(this.commentCount);
			first = false;
		}
		if (isSetFirm_app()) {
			if (!first) sb.append(", ");
			sb.append("firm_app:");
			if (this.firm_app == null) {
				sb.append("null");
			} else {
				sb.append(this.firm_app);
			}
			first = false;
		}
		if (isSetLink_type()) {
			if (!first) sb.append(", ");
			sb.append("link_type:");
			sb.append(this.link_type);
			first = false;
		}
		if (isSetDisplay_type()) {
			if (!first) sb.append(", ");
			sb.append("display_type:");
			sb.append(this.display_type);
			first = false;
		}
		if (isSetPublish_time_ts()) {
			if (!first) sb.append(", ");
			sb.append("publish_time_ts:");
			sb.append(this.publish_time_ts);
			first = false;
		}
		if (isSetRate()) {
			if (!first) sb.append(", ");
			sb.append("rate:");
			sb.append(this.rate);
			first = false;
		}
		if (isSetRecomms()) {
			if (!first) sb.append(", ");
			sb.append("recomms:");
			if (this.recomms == null) {
				sb.append("null");
			} else {
				sb.append(this.recomms);
			}
			first = false;
		}
		if (isSetContent_type()) {
			if (!first) sb.append(", ");
			sb.append("content_type:");
			if (this.content_type == null) {
				sb.append("null");
			} else {
				sb.append(this.content_type);
			}
			first = false;
		}
		if (isSetDuration()) {
			if (!first) sb.append(", ");
			sb.append("duration:");
			sb.append(this.duration);
			first = false;
		}
		if (isSetState()) {
			if (!first) sb.append(", ");
			sb.append("state:");
			sb.append(this.state);
			first = false;
		}
		if (isSetFlag()) {
			if (!first) sb.append(", ");
			sb.append("flag:");
			if (this.flag == null) {
				sb.append("null");
			} else {
				sb.append(this.flag);
			}
			first = false;
		}
		if (isSetDisplay_thumbnails()) {
			if (!first) sb.append(", ");
			sb.append("display_thumbnails:");
			if (this.display_thumbnails == null) {
				sb.append("null");
			} else {
				sb.append(this.display_thumbnails);
			}
			first = false;
		}
		if (isSetTags_title()) {
			if (!first) sb.append(", ");
			sb.append("tags_title:");
			if (this.tags_title == null) {
				sb.append("null");
			} else {
				sb.append(this.tags_title);
			}
			first = false;
		}
		if (isSetItem_cf_topic()) {
			if (!first) sb.append(", ");
			sb.append("item_cf_topic:");
			if (this.item_cf_topic == null) {
				sb.append("null");
			} else {
				sb.append(this.item_cf_topic);
			}
			first = false;
		}
		if (isSetHighGmpCheck()) {
			if (!first) sb.append(", ");
			sb.append("highGmpCheck:");
			sb.append(this.highGmpCheck);
			first = false;
		}
		if (isSetContentQuality()) {
			if (!first) sb.append(", ");
			sb.append("contentQuality:");
			sb.append(this.contentQuality);
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (content_id == null) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'content_id' was not present! Struct: " + toString());
		}
		if (local == null) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'local' was not present! Struct: " + toString());
		}
		if (categories == null) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'categories' was not present! Struct: " + toString());
		}
		if (language == null) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'language' was not present! Struct: " + toString());
		}
		if (keywords == null) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'keywords' was not present! Struct: " + toString());
		}
		if (type == null) {
			throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class FeederInfoStandardSchemeFactory implements SchemeFactory {
		public FeederInfoStandardScheme getScheme() {
			return new FeederInfoStandardScheme();
		}
	}

	private static class FeederInfoStandardScheme extends StandardScheme<FeederInfo> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, FeederInfo struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true)
			{
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
					break;
				}
				switch (schemeField.id) {
				case 1: // CONTENT_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.content_id = iprot.readString();
						struct.setContent_idIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // CP_VERSION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.cp_version = iprot.readString();
						struct.setCp_versionIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // TIER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.tier = iprot.readString();
						struct.setTierIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // IMPORTANT_LEVEL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.important_level = iprot.readI32();
						struct.setImportant_levelIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // LOCAL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.local = iprot.readString();
						struct.setLocalIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // CATEGORIES
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.categories = iprot.readString();
						struct.setCategoriesIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // ADULT_SCORE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.adult_score = iprot.readString();
						struct.setAdult_scoreIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // NEWS_SCORE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.news_score = iprot.readString();
						struct.setNews_scoreIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // EMOTION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.emotion = iprot.readString();
						struct.setEmotionIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // LANGUAGE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.language = iprot.readString();
						struct.setLanguageIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // KEYWORDS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.keywords = iprot.readString();
						struct.setKeywordsIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // TAGS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.tags = iprot.readString();
						struct.setTagsIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // NER_PERSON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.ner_person = iprot.readString();
						struct.setNer_personIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // NER_LOCATION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.ner_location = iprot.readString();
						struct.setNer_locationIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // NER_ORGANIZATION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.ner_organization = iprot.readString();
						struct.setNer_organizationIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // MD5
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.md5 = iprot.readString();
						struct.setMd5IsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // SIMHASH
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.simhash = iprot.readString();
						struct.setSimhashIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.type = iprot.readString();
						struct.setTypeIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // PUBLISH_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.publish_time = iprot.readString();
						struct.setPublish_timeIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // LIST_IMAGE_COUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.list_image_count = iprot.readI32();
						struct.setList_image_countIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // BODY_IMAGE_COUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.body_image_count = iprot.readI32();
						struct.setBody_image_countIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 22: // WORD_COUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.word_count = iprot.readString();
						struct.setWord_countIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 23: // GROUP_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.group_id = iprot.readString();
						struct.setGroup_idIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 24: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.update_time = iprot.readString();
						struct.setUpdate_timeIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 25: // PUBLISHER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.publisher = iprot.readString();
						struct.setPublisherIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 26: // SOURCE_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sourceType = iprot.readString();
						struct.setSourceTypeIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 27: // SOURCE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.source = iprot.readString();
						struct.setSourceIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 28: // SOURCE_FEEDS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sourceFeeds = iprot.readString();
						struct.setSourceFeedsIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 29: // CHANNEL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.channel = iprot.readString();
						struct.setChannelIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 30: // AUTHOR
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.author = iprot.readString();
						struct.setAuthorIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 31: // DISCOVERY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.discoveryTime = iprot.readString();
						struct.setDiscoveryTimeIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 32: // FETCH_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.fetch_time = iprot.readString();
						struct.setFetch_timeIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 33: // SOURCE_ITEM_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sourceItemId = iprot.readString();
						struct.setSourceItemIdIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 34: // LINK
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.link = iprot.readString();
						struct.setLinkIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 35: // TITLE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.title = iprot.readString();
						struct.setTitleIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 36: // CONTENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.content = iprot.readString();
						struct.setContentIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 37: // SUMMARY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.summary = iprot.readString();
						struct.setSummaryIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 38: // COPYRIGHT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.copyright = iprot.readString();
						struct.setCopyrightIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 39: // HAS_COPYRIGHT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.hasCopyright = iprot.readI32();
						struct.setHasCopyrightIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 40: // BODY_IMAGES
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bodyImages = iprot.readString();
						struct.setBodyImagesIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 41: // LIST_IMAGES
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.listImages = iprot.readString();
						struct.setListImagesIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 42: // BODY_IMAGES_COUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.bodyImagesCount = iprot.readI32();
						struct.setBodyImagesCountIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 43: // LIST_IMAGES_COUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.listImagesCount = iprot.readI32();
						struct.setListImagesCountIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 44: // PUBLISHER_PAGERANK_SCORE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.publisherPagerankScore = iprot.readDouble();
						struct.setPublisherPagerankScoreIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 45: // SOURCE_COMMENT_COUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.sourceCommentCount = iprot.readI32();
						struct.setSourceCommentCountIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 46: // FALL_IMAGE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.fallImage = iprot.readString();
						struct.setFallImageIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 47: // DISPLAY_LIST_IMAGES
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.displayListImages = iprot.readString();
						struct.setDisplayListImagesIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 48: // IS_OPEN_COMMENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.isOpenComment = iprot.readString();
						struct.setIsOpenCommentIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 49: // COMMENT_COUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.commentCount = iprot.readI32();
						struct.setCommentCountIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 50: // FIRM_APP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.firm_app = iprot.readString();
						struct.setFirm_appIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 51: // LINK_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.link_type = iprot.readI32();
						struct.setLink_typeIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 52: // DISPLAY_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.display_type = iprot.readI32();
						struct.setDisplay_typeIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 53: // PUBLISH_TIME_TS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.publish_time_ts = iprot.readI32();
						struct.setPublish_time_tsIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 54: // RATE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.rate = iprot.readI32();
						struct.setRateIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 55: // RECOMMS
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
							struct.recomms = new ArrayList<String>(_list0.size);
							String _elem1;
							for (int _i2 = 0; _i2 < _list0.size; ++_i2)
							{
								_elem1 = iprot.readString();
								struct.recomms.add(_elem1);
							}
							iprot.readListEnd();
						}
						struct.setRecommsIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 56: // CONTENT_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.content_type = iprot.readString();
						struct.setContent_typeIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 57: // DURATION
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.duration = iprot.readI32();
						struct.setDurationIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 58: // STATE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.state = iprot.readI32();
						struct.setStateIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 59: // FLAG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.flag = iprot.readString();
						struct.setFlagIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 60: // DISPLAY_THUMBNAILS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.display_thumbnails = iprot.readString();
						struct.setDisplay_thumbnailsIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 61: // TAGS_TITLE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.tags_title = iprot.readString();
						struct.setTags_titleIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 62: // ITEM_CF_TOPIC
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.item_cf_topic = iprot.readString();
						struct.setItem_cf_topicIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 63: // HIGH_GMP_CHECK
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.highGmpCheck = iprot.readI32();
						struct.setHighGmpCheckIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 64: // CONTENT_QUALITY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.contentQuality = iprot.readI32();
						struct.setContentQualityIsSet(true);
					} else { 
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, FeederInfo struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.content_id != null) {
				oprot.writeFieldBegin(CONTENT_ID_FIELD_DESC);
				oprot.writeString(struct.content_id);
				oprot.writeFieldEnd();
			}
			if (struct.cp_version != null) {
				if (struct.isSetCp_version()) {
					oprot.writeFieldBegin(CP_VERSION_FIELD_DESC);
					oprot.writeString(struct.cp_version);
					oprot.writeFieldEnd();
				}
			}
			if (struct.tier != null) {
				if (struct.isSetTier()) {
					oprot.writeFieldBegin(TIER_FIELD_DESC);
					oprot.writeString(struct.tier);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetImportant_level()) {
				oprot.writeFieldBegin(IMPORTANT_LEVEL_FIELD_DESC);
				oprot.writeI32(struct.important_level);
				oprot.writeFieldEnd();
			}
			if (struct.local != null) {
				oprot.writeFieldBegin(LOCAL_FIELD_DESC);
				oprot.writeString(struct.local);
				oprot.writeFieldEnd();
			}
			if (struct.categories != null) {
				oprot.writeFieldBegin(CATEGORIES_FIELD_DESC);
				oprot.writeString(struct.categories);
				oprot.writeFieldEnd();
			}
			if (struct.adult_score != null) {
				if (struct.isSetAdult_score()) {
					oprot.writeFieldBegin(ADULT_SCORE_FIELD_DESC);
					oprot.writeString(struct.adult_score);
					oprot.writeFieldEnd();
				}
			}
			if (struct.news_score != null) {
				if (struct.isSetNews_score()) {
					oprot.writeFieldBegin(NEWS_SCORE_FIELD_DESC);
					oprot.writeString(struct.news_score);
					oprot.writeFieldEnd();
				}
			}
			if (struct.emotion != null) {
				if (struct.isSetEmotion()) {
					oprot.writeFieldBegin(EMOTION_FIELD_DESC);
					oprot.writeString(struct.emotion);
					oprot.writeFieldEnd();
				}
			}
			if (struct.language != null) {
				oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
				oprot.writeString(struct.language);
				oprot.writeFieldEnd();
			}
			if (struct.keywords != null) {
				oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
				oprot.writeString(struct.keywords);
				oprot.writeFieldEnd();
			}
			if (struct.tags != null) {
				if (struct.isSetTags()) {
					oprot.writeFieldBegin(TAGS_FIELD_DESC);
					oprot.writeString(struct.tags);
					oprot.writeFieldEnd();
				}
			}
			if (struct.ner_person != null) {
				if (struct.isSetNer_person()) {
					oprot.writeFieldBegin(NER_PERSON_FIELD_DESC);
					oprot.writeString(struct.ner_person);
					oprot.writeFieldEnd();
				}
			}
			if (struct.ner_location != null) {
				if (struct.isSetNer_location()) {
					oprot.writeFieldBegin(NER_LOCATION_FIELD_DESC);
					oprot.writeString(struct.ner_location);
					oprot.writeFieldEnd();
				}
			}
			if (struct.ner_organization != null) {
				if (struct.isSetNer_organization()) {
					oprot.writeFieldBegin(NER_ORGANIZATION_FIELD_DESC);
					oprot.writeString(struct.ner_organization);
					oprot.writeFieldEnd();
				}
			}
			if (struct.md5 != null) {
				if (struct.isSetMd5()) {
					oprot.writeFieldBegin(MD5_FIELD_DESC);
					oprot.writeString(struct.md5);
					oprot.writeFieldEnd();
				}
			}
			if (struct.simhash != null) {
				if (struct.isSetSimhash()) {
					oprot.writeFieldBegin(SIMHASH_FIELD_DESC);
					oprot.writeString(struct.simhash);
					oprot.writeFieldEnd();
				}
			}
			if (struct.type != null) {
				oprot.writeFieldBegin(TYPE_FIELD_DESC);
				oprot.writeString(struct.type);
				oprot.writeFieldEnd();
			}
			if (struct.publish_time != null) {
				if (struct.isSetPublish_time()) {
					oprot.writeFieldBegin(PUBLISH_TIME_FIELD_DESC);
					oprot.writeString(struct.publish_time);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetList_image_count()) {
				oprot.writeFieldBegin(LIST_IMAGE_COUNT_FIELD_DESC);
				oprot.writeI32(struct.list_image_count);
				oprot.writeFieldEnd();
			}
			if (struct.isSetBody_image_count()) {
				oprot.writeFieldBegin(BODY_IMAGE_COUNT_FIELD_DESC);
				oprot.writeI32(struct.body_image_count);
				oprot.writeFieldEnd();
			}
			if (struct.word_count != null) {
				if (struct.isSetWord_count()) {
					oprot.writeFieldBegin(WORD_COUNT_FIELD_DESC);
					oprot.writeString(struct.word_count);
					oprot.writeFieldEnd();
				}
			}
			if (struct.group_id != null) {
				if (struct.isSetGroup_id()) {
					oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
					oprot.writeString(struct.group_id);
					oprot.writeFieldEnd();
				}
			}
			if (struct.update_time != null) {
				if (struct.isSetUpdate_time()) {
					oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
					oprot.writeString(struct.update_time);
					oprot.writeFieldEnd();
				}
			}
			if (struct.publisher != null) {
				if (struct.isSetPublisher()) {
					oprot.writeFieldBegin(PUBLISHER_FIELD_DESC);
					oprot.writeString(struct.publisher);
					oprot.writeFieldEnd();
				}
			}
			if (struct.sourceType != null) {
				if (struct.isSetSourceType()) {
					oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
					oprot.writeString(struct.sourceType);
					oprot.writeFieldEnd();
				}
			}
			if (struct.source != null) {
				if (struct.isSetSource()) {
					oprot.writeFieldBegin(SOURCE_FIELD_DESC);
					oprot.writeString(struct.source);
					oprot.writeFieldEnd();
				}
			}
			if (struct.sourceFeeds != null) {
				if (struct.isSetSourceFeeds()) {
					oprot.writeFieldBegin(SOURCE_FEEDS_FIELD_DESC);
					oprot.writeString(struct.sourceFeeds);
					oprot.writeFieldEnd();
				}
			}
			if (struct.channel != null) {
				if (struct.isSetChannel()) {
					oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
					oprot.writeString(struct.channel);
					oprot.writeFieldEnd();
				}
			}
			if (struct.author != null) {
				if (struct.isSetAuthor()) {
					oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
					oprot.writeString(struct.author);
					oprot.writeFieldEnd();
				}
			}
			if (struct.discoveryTime != null) {
				if (struct.isSetDiscoveryTime()) {
					oprot.writeFieldBegin(DISCOVERY_TIME_FIELD_DESC);
					oprot.writeString(struct.discoveryTime);
					oprot.writeFieldEnd();
				}
			}
			if (struct.fetch_time != null) {
				if (struct.isSetFetch_time()) {
					oprot.writeFieldBegin(FETCH_TIME_FIELD_DESC);
					oprot.writeString(struct.fetch_time);
					oprot.writeFieldEnd();
				}
			}
			if (struct.sourceItemId != null) {
				if (struct.isSetSourceItemId()) {
					oprot.writeFieldBegin(SOURCE_ITEM_ID_FIELD_DESC);
					oprot.writeString(struct.sourceItemId);
					oprot.writeFieldEnd();
				}
			}
			if (struct.link != null) {
				if (struct.isSetLink()) {
					oprot.writeFieldBegin(LINK_FIELD_DESC);
					oprot.writeString(struct.link);
					oprot.writeFieldEnd();
				}
			}
			if (struct.title != null) {
				if (struct.isSetTitle()) {
					oprot.writeFieldBegin(TITLE_FIELD_DESC);
					oprot.writeString(struct.title);
					oprot.writeFieldEnd();
				}
			}
			if (struct.content != null) {
				if (struct.isSetContent()) {
					oprot.writeFieldBegin(CONTENT_FIELD_DESC);
					oprot.writeString(struct.content);
					oprot.writeFieldEnd();
				}
			}
			if (struct.summary != null) {
				if (struct.isSetSummary()) {
					oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
					oprot.writeString(struct.summary);
					oprot.writeFieldEnd();
				}
			}
			if (struct.copyright != null) {
				if (struct.isSetCopyright()) {
					oprot.writeFieldBegin(COPYRIGHT_FIELD_DESC);
					oprot.writeString(struct.copyright);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetHasCopyright()) {
				oprot.writeFieldBegin(HAS_COPYRIGHT_FIELD_DESC);
				oprot.writeI32(struct.hasCopyright);
				oprot.writeFieldEnd();
			}
			if (struct.bodyImages != null) {
				if (struct.isSetBodyImages()) {
					oprot.writeFieldBegin(BODY_IMAGES_FIELD_DESC);
					oprot.writeString(struct.bodyImages);
					oprot.writeFieldEnd();
				}
			}
			if (struct.listImages != null) {
				if (struct.isSetListImages()) {
					oprot.writeFieldBegin(LIST_IMAGES_FIELD_DESC);
					oprot.writeString(struct.listImages);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetBodyImagesCount()) {
				oprot.writeFieldBegin(BODY_IMAGES_COUNT_FIELD_DESC);
				oprot.writeI32(struct.bodyImagesCount);
				oprot.writeFieldEnd();
			}
			if (struct.isSetListImagesCount()) {
				oprot.writeFieldBegin(LIST_IMAGES_COUNT_FIELD_DESC);
				oprot.writeI32(struct.listImagesCount);
				oprot.writeFieldEnd();
			}
			if (struct.isSetPublisherPagerankScore()) {
				oprot.writeFieldBegin(PUBLISHER_PAGERANK_SCORE_FIELD_DESC);
				oprot.writeDouble(struct.publisherPagerankScore);
				oprot.writeFieldEnd();
			}
			if (struct.isSetSourceCommentCount()) {
				oprot.writeFieldBegin(SOURCE_COMMENT_COUNT_FIELD_DESC);
				oprot.writeI32(struct.sourceCommentCount);
				oprot.writeFieldEnd();
			}
			if (struct.fallImage != null) {
				if (struct.isSetFallImage()) {
					oprot.writeFieldBegin(FALL_IMAGE_FIELD_DESC);
					oprot.writeString(struct.fallImage);
					oprot.writeFieldEnd();
				}
			}
			if (struct.displayListImages != null) {
				if (struct.isSetDisplayListImages()) {
					oprot.writeFieldBegin(DISPLAY_LIST_IMAGES_FIELD_DESC);
					oprot.writeString(struct.displayListImages);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isOpenComment != null) {
				if (struct.isSetIsOpenComment()) {
					oprot.writeFieldBegin(IS_OPEN_COMMENT_FIELD_DESC);
					oprot.writeString(struct.isOpenComment);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetCommentCount()) {
				oprot.writeFieldBegin(COMMENT_COUNT_FIELD_DESC);
				oprot.writeI32(struct.commentCount);
				oprot.writeFieldEnd();
			}
			if (struct.firm_app != null) {
				if (struct.isSetFirm_app()) {
					oprot.writeFieldBegin(FIRM_APP_FIELD_DESC);
					oprot.writeString(struct.firm_app);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetLink_type()) {
				oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
				oprot.writeI32(struct.link_type);
				oprot.writeFieldEnd();
			}
			if (struct.isSetDisplay_type()) {
				oprot.writeFieldBegin(DISPLAY_TYPE_FIELD_DESC);
				oprot.writeI32(struct.display_type);
				oprot.writeFieldEnd();
			}
			if (struct.isSetPublish_time_ts()) {
				oprot.writeFieldBegin(PUBLISH_TIME_TS_FIELD_DESC);
				oprot.writeI32(struct.publish_time_ts);
				oprot.writeFieldEnd();
			}
			if (struct.isSetRate()) {
				oprot.writeFieldBegin(RATE_FIELD_DESC);
				oprot.writeI32(struct.rate);
				oprot.writeFieldEnd();
			}
			if (struct.recomms != null) {
				if (struct.isSetRecomms()) {
					oprot.writeFieldBegin(RECOMMS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.recomms.size()));
						for (String _iter3 : struct.recomms)
						{
							oprot.writeString(_iter3);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
			}
			if (struct.content_type != null) {
				if (struct.isSetContent_type()) {
					oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
					oprot.writeString(struct.content_type);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetDuration()) {
				oprot.writeFieldBegin(DURATION_FIELD_DESC);
				oprot.writeI32(struct.duration);
				oprot.writeFieldEnd();
			}
			if (struct.isSetState()) {
				oprot.writeFieldBegin(STATE_FIELD_DESC);
				oprot.writeI32(struct.state);
				oprot.writeFieldEnd();
			}
			if (struct.flag != null) {
				if (struct.isSetFlag()) {
					oprot.writeFieldBegin(FLAG_FIELD_DESC);
					oprot.writeString(struct.flag);
					oprot.writeFieldEnd();
				}
			}
			if (struct.display_thumbnails != null) {
				if (struct.isSetDisplay_thumbnails()) {
					oprot.writeFieldBegin(DISPLAY_THUMBNAILS_FIELD_DESC);
					oprot.writeString(struct.display_thumbnails);
					oprot.writeFieldEnd();
				}
			}
			if (struct.tags_title != null) {
				if (struct.isSetTags_title()) {
					oprot.writeFieldBegin(TAGS_TITLE_FIELD_DESC);
					oprot.writeString(struct.tags_title);
					oprot.writeFieldEnd();
				}
			}
			if (struct.item_cf_topic != null) {
				if (struct.isSetItem_cf_topic()) {
					oprot.writeFieldBegin(ITEM_CF_TOPIC_FIELD_DESC);
					oprot.writeString(struct.item_cf_topic);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetHighGmpCheck()) {
				oprot.writeFieldBegin(HIGH_GMP_CHECK_FIELD_DESC);
				oprot.writeI32(struct.highGmpCheck);
				oprot.writeFieldEnd();
			}
			if (struct.isSetContentQuality()) {
				oprot.writeFieldBegin(CONTENT_QUALITY_FIELD_DESC);
				oprot.writeI32(struct.contentQuality);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class FeederInfoTupleSchemeFactory implements SchemeFactory {
		public FeederInfoTupleScheme getScheme() {
			return new FeederInfoTupleScheme();
		}
	}

	private static class FeederInfoTupleScheme extends TupleScheme<FeederInfo> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, FeederInfo struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.content_id);
			oprot.writeString(struct.local);
			oprot.writeString(struct.categories);
			oprot.writeString(struct.language);
			oprot.writeString(struct.keywords);
			oprot.writeString(struct.type);
			BitSet optionals = new BitSet();
			if (struct.isSetCp_version()) {
				optionals.set(0);
			}
			if (struct.isSetTier()) {
				optionals.set(1);
			}
			if (struct.isSetImportant_level()) {
				optionals.set(2);
			}
			if (struct.isSetAdult_score()) {
				optionals.set(3);
			}
			if (struct.isSetNews_score()) {
				optionals.set(4);
			}
			if (struct.isSetEmotion()) {
				optionals.set(5);
			}
			if (struct.isSetTags()) {
				optionals.set(6);
			}
			if (struct.isSetNer_person()) {
				optionals.set(7);
			}
			if (struct.isSetNer_location()) {
				optionals.set(8);
			}
			if (struct.isSetNer_organization()) {
				optionals.set(9);
			}
			if (struct.isSetMd5()) {
				optionals.set(10);
			}
			if (struct.isSetSimhash()) {
				optionals.set(11);
			}
			if (struct.isSetPublish_time()) {
				optionals.set(12);
			}
			if (struct.isSetList_image_count()) {
				optionals.set(13);
			}
			if (struct.isSetBody_image_count()) {
				optionals.set(14);
			}
			if (struct.isSetWord_count()) {
				optionals.set(15);
			}
			if (struct.isSetGroup_id()) {
				optionals.set(16);
			}
			if (struct.isSetUpdate_time()) {
				optionals.set(17);
			}
			if (struct.isSetPublisher()) {
				optionals.set(18);
			}
			if (struct.isSetSourceType()) {
				optionals.set(19);
			}
			if (struct.isSetSource()) {
				optionals.set(20);
			}
			if (struct.isSetSourceFeeds()) {
				optionals.set(21);
			}
			if (struct.isSetChannel()) {
				optionals.set(22);
			}
			if (struct.isSetAuthor()) {
				optionals.set(23);
			}
			if (struct.isSetDiscoveryTime()) {
				optionals.set(24);
			}
			if (struct.isSetFetch_time()) {
				optionals.set(25);
			}
			if (struct.isSetSourceItemId()) {
				optionals.set(26);
			}
			if (struct.isSetLink()) {
				optionals.set(27);
			}
			if (struct.isSetTitle()) {
				optionals.set(28);
			}
			if (struct.isSetContent()) {
				optionals.set(29);
			}
			if (struct.isSetSummary()) {
				optionals.set(30);
			}
			if (struct.isSetCopyright()) {
				optionals.set(31);
			}
			if (struct.isSetHasCopyright()) {
				optionals.set(32);
			}
			if (struct.isSetBodyImages()) {
				optionals.set(33);
			}
			if (struct.isSetListImages()) {
				optionals.set(34);
			}
			if (struct.isSetBodyImagesCount()) {
				optionals.set(35);
			}
			if (struct.isSetListImagesCount()) {
				optionals.set(36);
			}
			if (struct.isSetPublisherPagerankScore()) {
				optionals.set(37);
			}
			if (struct.isSetSourceCommentCount()) {
				optionals.set(38);
			}
			if (struct.isSetFallImage()) {
				optionals.set(39);
			}
			if (struct.isSetDisplayListImages()) {
				optionals.set(40);
			}
			if (struct.isSetIsOpenComment()) {
				optionals.set(41);
			}
			if (struct.isSetCommentCount()) {
				optionals.set(42);
			}
			if (struct.isSetFirm_app()) {
				optionals.set(43);
			}
			if (struct.isSetLink_type()) {
				optionals.set(44);
			}
			if (struct.isSetDisplay_type()) {
				optionals.set(45);
			}
			if (struct.isSetPublish_time_ts()) {
				optionals.set(46);
			}
			if (struct.isSetRate()) {
				optionals.set(47);
			}
			if (struct.isSetRecomms()) {
				optionals.set(48);
			}
			if (struct.isSetContent_type()) {
				optionals.set(49);
			}
			if (struct.isSetDuration()) {
				optionals.set(50);
			}
			if (struct.isSetState()) {
				optionals.set(51);
			}
			if (struct.isSetFlag()) {
				optionals.set(52);
			}
			if (struct.isSetDisplay_thumbnails()) {
				optionals.set(53);
			}
			if (struct.isSetTags_title()) {
				optionals.set(54);
			}
			if (struct.isSetItem_cf_topic()) {
				optionals.set(55);
			}
			if (struct.isSetHighGmpCheck()) {
				optionals.set(56);
			}
			if (struct.isSetContentQuality()) {
				optionals.set(57);
			}
			oprot.writeBitSet(optionals, 58);
			if (struct.isSetCp_version()) {
				oprot.writeString(struct.cp_version);
			}
			if (struct.isSetTier()) {
				oprot.writeString(struct.tier);
			}
			if (struct.isSetImportant_level()) {
				oprot.writeI32(struct.important_level);
			}
			if (struct.isSetAdult_score()) {
				oprot.writeString(struct.adult_score);
			}
			if (struct.isSetNews_score()) {
				oprot.writeString(struct.news_score);
			}
			if (struct.isSetEmotion()) {
				oprot.writeString(struct.emotion);
			}
			if (struct.isSetTags()) {
				oprot.writeString(struct.tags);
			}
			if (struct.isSetNer_person()) {
				oprot.writeString(struct.ner_person);
			}
			if (struct.isSetNer_location()) {
				oprot.writeString(struct.ner_location);
			}
			if (struct.isSetNer_organization()) {
				oprot.writeString(struct.ner_organization);
			}
			if (struct.isSetMd5()) {
				oprot.writeString(struct.md5);
			}
			if (struct.isSetSimhash()) {
				oprot.writeString(struct.simhash);
			}
			if (struct.isSetPublish_time()) {
				oprot.writeString(struct.publish_time);
			}
			if (struct.isSetList_image_count()) {
				oprot.writeI32(struct.list_image_count);
			}
			if (struct.isSetBody_image_count()) {
				oprot.writeI32(struct.body_image_count);
			}
			if (struct.isSetWord_count()) {
				oprot.writeString(struct.word_count);
			}
			if (struct.isSetGroup_id()) {
				oprot.writeString(struct.group_id);
			}
			if (struct.isSetUpdate_time()) {
				oprot.writeString(struct.update_time);
			}
			if (struct.isSetPublisher()) {
				oprot.writeString(struct.publisher);
			}
			if (struct.isSetSourceType()) {
				oprot.writeString(struct.sourceType);
			}
			if (struct.isSetSource()) {
				oprot.writeString(struct.source);
			}
			if (struct.isSetSourceFeeds()) {
				oprot.writeString(struct.sourceFeeds);
			}
			if (struct.isSetChannel()) {
				oprot.writeString(struct.channel);
			}
			if (struct.isSetAuthor()) {
				oprot.writeString(struct.author);
			}
			if (struct.isSetDiscoveryTime()) {
				oprot.writeString(struct.discoveryTime);
			}
			if (struct.isSetFetch_time()) {
				oprot.writeString(struct.fetch_time);
			}
			if (struct.isSetSourceItemId()) {
				oprot.writeString(struct.sourceItemId);
			}
			if (struct.isSetLink()) {
				oprot.writeString(struct.link);
			}
			if (struct.isSetTitle()) {
				oprot.writeString(struct.title);
			}
			if (struct.isSetContent()) {
				oprot.writeString(struct.content);
			}
			if (struct.isSetSummary()) {
				oprot.writeString(struct.summary);
			}
			if (struct.isSetCopyright()) {
				oprot.writeString(struct.copyright);
			}
			if (struct.isSetHasCopyright()) {
				oprot.writeI32(struct.hasCopyright);
			}
			if (struct.isSetBodyImages()) {
				oprot.writeString(struct.bodyImages);
			}
			if (struct.isSetListImages()) {
				oprot.writeString(struct.listImages);
			}
			if (struct.isSetBodyImagesCount()) {
				oprot.writeI32(struct.bodyImagesCount);
			}
			if (struct.isSetListImagesCount()) {
				oprot.writeI32(struct.listImagesCount);
			}
			if (struct.isSetPublisherPagerankScore()) {
				oprot.writeDouble(struct.publisherPagerankScore);
			}
			if (struct.isSetSourceCommentCount()) {
				oprot.writeI32(struct.sourceCommentCount);
			}
			if (struct.isSetFallImage()) {
				oprot.writeString(struct.fallImage);
			}
			if (struct.isSetDisplayListImages()) {
				oprot.writeString(struct.displayListImages);
			}
			if (struct.isSetIsOpenComment()) {
				oprot.writeString(struct.isOpenComment);
			}
			if (struct.isSetCommentCount()) {
				oprot.writeI32(struct.commentCount);
			}
			if (struct.isSetFirm_app()) {
				oprot.writeString(struct.firm_app);
			}
			if (struct.isSetLink_type()) {
				oprot.writeI32(struct.link_type);
			}
			if (struct.isSetDisplay_type()) {
				oprot.writeI32(struct.display_type);
			}
			if (struct.isSetPublish_time_ts()) {
				oprot.writeI32(struct.publish_time_ts);
			}
			if (struct.isSetRate()) {
				oprot.writeI32(struct.rate);
			}
			if (struct.isSetRecomms()) {
				{
					oprot.writeI32(struct.recomms.size());
					for (String _iter4 : struct.recomms)
					{
						oprot.writeString(_iter4);
					}
				}
			}
			if (struct.isSetContent_type()) {
				oprot.writeString(struct.content_type);
			}
			if (struct.isSetDuration()) {
				oprot.writeI32(struct.duration);
			}
			if (struct.isSetState()) {
				oprot.writeI32(struct.state);
			}
			if (struct.isSetFlag()) {
				oprot.writeString(struct.flag);
			}
			if (struct.isSetDisplay_thumbnails()) {
				oprot.writeString(struct.display_thumbnails);
			}
			if (struct.isSetTags_title()) {
				oprot.writeString(struct.tags_title);
			}
			if (struct.isSetItem_cf_topic()) {
				oprot.writeString(struct.item_cf_topic);
			}
			if (struct.isSetHighGmpCheck()) {
				oprot.writeI32(struct.highGmpCheck);
			}
			if (struct.isSetContentQuality()) {
				oprot.writeI32(struct.contentQuality);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, FeederInfo struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.content_id = iprot.readString();
			struct.setContent_idIsSet(true);
			struct.local = iprot.readString();
			struct.setLocalIsSet(true);
			struct.categories = iprot.readString();
			struct.setCategoriesIsSet(true);
			struct.language = iprot.readString();
			struct.setLanguageIsSet(true);
			struct.keywords = iprot.readString();
			struct.setKeywordsIsSet(true);
			struct.type = iprot.readString();
			struct.setTypeIsSet(true);
			BitSet incoming = iprot.readBitSet(58);
			if (incoming.get(0)) {
				struct.cp_version = iprot.readString();
				struct.setCp_versionIsSet(true);
			}
			if (incoming.get(1)) {
				struct.tier = iprot.readString();
				struct.setTierIsSet(true);
			}
			if (incoming.get(2)) {
				struct.important_level = iprot.readI32();
				struct.setImportant_levelIsSet(true);
			}
			if (incoming.get(3)) {
				struct.adult_score = iprot.readString();
				struct.setAdult_scoreIsSet(true);
			}
			if (incoming.get(4)) {
				struct.news_score = iprot.readString();
				struct.setNews_scoreIsSet(true);
			}
			if (incoming.get(5)) {
				struct.emotion = iprot.readString();
				struct.setEmotionIsSet(true);
			}
			if (incoming.get(6)) {
				struct.tags = iprot.readString();
				struct.setTagsIsSet(true);
			}
			if (incoming.get(7)) {
				struct.ner_person = iprot.readString();
				struct.setNer_personIsSet(true);
			}
			if (incoming.get(8)) {
				struct.ner_location = iprot.readString();
				struct.setNer_locationIsSet(true);
			}
			if (incoming.get(9)) {
				struct.ner_organization = iprot.readString();
				struct.setNer_organizationIsSet(true);
			}
			if (incoming.get(10)) {
				struct.md5 = iprot.readString();
				struct.setMd5IsSet(true);
			}
			if (incoming.get(11)) {
				struct.simhash = iprot.readString();
				struct.setSimhashIsSet(true);
			}
			if (incoming.get(12)) {
				struct.publish_time = iprot.readString();
				struct.setPublish_timeIsSet(true);
			}
			if (incoming.get(13)) {
				struct.list_image_count = iprot.readI32();
				struct.setList_image_countIsSet(true);
			}
			if (incoming.get(14)) {
				struct.body_image_count = iprot.readI32();
				struct.setBody_image_countIsSet(true);
			}
			if (incoming.get(15)) {
				struct.word_count = iprot.readString();
				struct.setWord_countIsSet(true);
			}
			if (incoming.get(16)) {
				struct.group_id = iprot.readString();
				struct.setGroup_idIsSet(true);
			}
			if (incoming.get(17)) {
				struct.update_time = iprot.readString();
				struct.setUpdate_timeIsSet(true);
			}
			if (incoming.get(18)) {
				struct.publisher = iprot.readString();
				struct.setPublisherIsSet(true);
			}
			if (incoming.get(19)) {
				struct.sourceType = iprot.readString();
				struct.setSourceTypeIsSet(true);
			}
			if (incoming.get(20)) {
				struct.source = iprot.readString();
				struct.setSourceIsSet(true);
			}
			if (incoming.get(21)) {
				struct.sourceFeeds = iprot.readString();
				struct.setSourceFeedsIsSet(true);
			}
			if (incoming.get(22)) {
				struct.channel = iprot.readString();
				struct.setChannelIsSet(true);
			}
			if (incoming.get(23)) {
				struct.author = iprot.readString();
				struct.setAuthorIsSet(true);
			}
			if (incoming.get(24)) {
				struct.discoveryTime = iprot.readString();
				struct.setDiscoveryTimeIsSet(true);
			}
			if (incoming.get(25)) {
				struct.fetch_time = iprot.readString();
				struct.setFetch_timeIsSet(true);
			}
			if (incoming.get(26)) {
				struct.sourceItemId = iprot.readString();
				struct.setSourceItemIdIsSet(true);
			}
			if (incoming.get(27)) {
				struct.link = iprot.readString();
				struct.setLinkIsSet(true);
			}
			if (incoming.get(28)) {
				struct.title = iprot.readString();
				struct.setTitleIsSet(true);
			}
			if (incoming.get(29)) {
				struct.content = iprot.readString();
				struct.setContentIsSet(true);
			}
			if (incoming.get(30)) {
				struct.summary = iprot.readString();
				struct.setSummaryIsSet(true);
			}
			if (incoming.get(31)) {
				struct.copyright = iprot.readString();
				struct.setCopyrightIsSet(true);
			}
			if (incoming.get(32)) {
				struct.hasCopyright = iprot.readI32();
				struct.setHasCopyrightIsSet(true);
			}
			if (incoming.get(33)) {
				struct.bodyImages = iprot.readString();
				struct.setBodyImagesIsSet(true);
			}
			if (incoming.get(34)) {
				struct.listImages = iprot.readString();
				struct.setListImagesIsSet(true);
			}
			if (incoming.get(35)) {
				struct.bodyImagesCount = iprot.readI32();
				struct.setBodyImagesCountIsSet(true);
			}
			if (incoming.get(36)) {
				struct.listImagesCount = iprot.readI32();
				struct.setListImagesCountIsSet(true);
			}
			if (incoming.get(37)) {
				struct.publisherPagerankScore = iprot.readDouble();
				struct.setPublisherPagerankScoreIsSet(true);
			}
			if (incoming.get(38)) {
				struct.sourceCommentCount = iprot.readI32();
				struct.setSourceCommentCountIsSet(true);
			}
			if (incoming.get(39)) {
				struct.fallImage = iprot.readString();
				struct.setFallImageIsSet(true);
			}
			if (incoming.get(40)) {
				struct.displayListImages = iprot.readString();
				struct.setDisplayListImagesIsSet(true);
			}
			if (incoming.get(41)) {
				struct.isOpenComment = iprot.readString();
				struct.setIsOpenCommentIsSet(true);
			}
			if (incoming.get(42)) {
				struct.commentCount = iprot.readI32();
				struct.setCommentCountIsSet(true);
			}
			if (incoming.get(43)) {
				struct.firm_app = iprot.readString();
				struct.setFirm_appIsSet(true);
			}
			if (incoming.get(44)) {
				struct.link_type = iprot.readI32();
				struct.setLink_typeIsSet(true);
			}
			if (incoming.get(45)) {
				struct.display_type = iprot.readI32();
				struct.setDisplay_typeIsSet(true);
			}
			if (incoming.get(46)) {
				struct.publish_time_ts = iprot.readI32();
				struct.setPublish_time_tsIsSet(true);
			}
			if (incoming.get(47)) {
				struct.rate = iprot.readI32();
				struct.setRateIsSet(true);
			}
			if (incoming.get(48)) {
				{
					org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
					struct.recomms = new ArrayList<String>(_list5.size);
					String _elem6;
					for (int _i7 = 0; _i7 < _list5.size; ++_i7)
					{
						_elem6 = iprot.readString();
						struct.recomms.add(_elem6);
					}
				}
				struct.setRecommsIsSet(true);
			}
			if (incoming.get(49)) {
				struct.content_type = iprot.readString();
				struct.setContent_typeIsSet(true);
			}
			if (incoming.get(50)) {
				struct.duration = iprot.readI32();
				struct.setDurationIsSet(true);
			}
			if (incoming.get(51)) {
				struct.state = iprot.readI32();
				struct.setStateIsSet(true);
			}
			if (incoming.get(52)) {
				struct.flag = iprot.readString();
				struct.setFlagIsSet(true);
			}
			if (incoming.get(53)) {
				struct.display_thumbnails = iprot.readString();
				struct.setDisplay_thumbnailsIsSet(true);
			}
			if (incoming.get(54)) {
				struct.tags_title = iprot.readString();
				struct.setTags_titleIsSet(true);
			}
			if (incoming.get(55)) {
				struct.item_cf_topic = iprot.readString();
				struct.setItem_cf_topicIsSet(true);
			}
			if (incoming.get(56)) {
				struct.highGmpCheck = iprot.readI32();
				struct.setHighGmpCheckIsSet(true);
			}
			if (incoming.get(57)) {
				struct.contentQuality = iprot.readI32();
				struct.setContentQualityIsSet(true);
			}
		}
	}
	
	@Override
	public String toString() {
		return JSON.toJSONString(this);
	}
}

