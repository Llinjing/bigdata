/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.inveno.bigdata.query.data.util.thrift.ufs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-25")
public class UfsService {

	public interface Iface {

		public String GetWeightedCategories(String uid, String version) throws org.apache.thrift.TException;

		public String GetWeightedTags(String uid, String version) throws org.apache.thrift.TException;

		public String GetImpressionTitleTags(String uid, String version) throws org.apache.thrift.TException;

		public String GetDislikeTitleTags(String uid, String version) throws org.apache.thrift.TException;

		public String GetLdaTopic(String uid, String version) throws org.apache.thrift.TException;

		public String GetLastActionTimeOfCategory(String uid, ActionType type) throws org.apache.thrift.TException;

		public String GetTimeFeature(String uid) throws org.apache.thrift.TException;

		public String GetNetworkFeature(String uid) throws org.apache.thrift.TException;

		public String GetTagStats(String uid) throws org.apache.thrift.TException;

		public String GetCategoryStats(String uid) throws org.apache.thrift.TException;

		public String GetCreateTime(String uid) throws org.apache.thrift.TException;

		public String GetInterest(String uid) throws org.apache.thrift.TException;

		public int SetInterest(String uid, String jsonArray) throws org.apache.thrift.TException;

		public int GetSourceCount(String uid, String source, String app) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void GetWeightedCategories(String uid, String version,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void GetWeightedTags(String uid, String version,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void GetImpressionTitleTags(String uid, String version,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void GetDislikeTitleTags(String uid, String version,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void GetLdaTopic(String uid, String version, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void GetLastActionTimeOfCategory(String uid, ActionType type,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void GetTimeFeature(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void GetNetworkFeature(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void GetTagStats(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void GetCategoryStats(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void GetCreateTime(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void GetInterest(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void SetInterest(String uid, String jsonArray, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void GetSourceCount(String uid, String source, String app,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public String GetWeightedCategories(String uid, String version) throws org.apache.thrift.TException {
			send_GetWeightedCategories(uid, version);
			return recv_GetWeightedCategories();
		}

		public void send_GetWeightedCategories(String uid, String version) throws org.apache.thrift.TException {
			GetWeightedCategories_args args = new GetWeightedCategories_args();
			args.setUid(uid);
			args.setVersion(version);
			sendBase("GetWeightedCategories", args);
		}

		public String recv_GetWeightedCategories() throws org.apache.thrift.TException {
			GetWeightedCategories_result result = new GetWeightedCategories_result();
			receiveBase(result, "GetWeightedCategories");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetWeightedCategories failed: unknown result");
		}

		public String GetWeightedTags(String uid, String version) throws org.apache.thrift.TException {
			send_GetWeightedTags(uid, version);
			return recv_GetWeightedTags();
		}

		public void send_GetWeightedTags(String uid, String version) throws org.apache.thrift.TException {
			GetWeightedTags_args args = new GetWeightedTags_args();
			args.setUid(uid);
			args.setVersion(version);
			sendBase("GetWeightedTags", args);
		}

		public String recv_GetWeightedTags() throws org.apache.thrift.TException {
			GetWeightedTags_result result = new GetWeightedTags_result();
			receiveBase(result, "GetWeightedTags");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetWeightedTags failed: unknown result");
		}

		public String GetImpressionTitleTags(String uid, String version) throws org.apache.thrift.TException {
			send_GetImpressionTitleTags(uid, version);
			return recv_GetImpressionTitleTags();
		}

		public void send_GetImpressionTitleTags(String uid, String version) throws org.apache.thrift.TException {
			GetImpressionTitleTags_args args = new GetImpressionTitleTags_args();
			args.setUid(uid);
			args.setVersion(version);
			sendBase("GetImpressionTitleTags", args);
		}

		public String recv_GetImpressionTitleTags() throws org.apache.thrift.TException {
			GetImpressionTitleTags_result result = new GetImpressionTitleTags_result();
			receiveBase(result, "GetImpressionTitleTags");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetImpressionTitleTags failed: unknown result");
		}

		public String GetDislikeTitleTags(String uid, String version) throws org.apache.thrift.TException {
			send_GetDislikeTitleTags(uid, version);
			return recv_GetDislikeTitleTags();
		}

		public void send_GetDislikeTitleTags(String uid, String version) throws org.apache.thrift.TException {
			GetDislikeTitleTags_args args = new GetDislikeTitleTags_args();
			args.setUid(uid);
			args.setVersion(version);
			sendBase("GetDislikeTitleTags", args);
		}

		public String recv_GetDislikeTitleTags() throws org.apache.thrift.TException {
			GetDislikeTitleTags_result result = new GetDislikeTitleTags_result();
			receiveBase(result, "GetDislikeTitleTags");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetDislikeTitleTags failed: unknown result");
		}

		public String GetLdaTopic(String uid, String version) throws org.apache.thrift.TException {
			send_GetLdaTopic(uid, version);
			return recv_GetLdaTopic();
		}

		public void send_GetLdaTopic(String uid, String version) throws org.apache.thrift.TException {
			GetLdaTopic_args args = new GetLdaTopic_args();
			args.setUid(uid);
			args.setVersion(version);
			sendBase("GetLdaTopic", args);
		}

		public String recv_GetLdaTopic() throws org.apache.thrift.TException {
			GetLdaTopic_result result = new GetLdaTopic_result();
			receiveBase(result, "GetLdaTopic");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetLdaTopic failed: unknown result");
		}

		public String GetLastActionTimeOfCategory(String uid, ActionType type) throws org.apache.thrift.TException {
			send_GetLastActionTimeOfCategory(uid, type);
			return recv_GetLastActionTimeOfCategory();
		}

		public void send_GetLastActionTimeOfCategory(String uid, ActionType type) throws org.apache.thrift.TException {
			GetLastActionTimeOfCategory_args args = new GetLastActionTimeOfCategory_args();
			args.setUid(uid);
			args.setType(type);
			sendBase("GetLastActionTimeOfCategory", args);
		}

		public String recv_GetLastActionTimeOfCategory() throws org.apache.thrift.TException {
			GetLastActionTimeOfCategory_result result = new GetLastActionTimeOfCategory_result();
			receiveBase(result, "GetLastActionTimeOfCategory");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetLastActionTimeOfCategory failed: unknown result");
		}

		public String GetTimeFeature(String uid) throws org.apache.thrift.TException {
			send_GetTimeFeature(uid);
			return recv_GetTimeFeature();
		}

		public void send_GetTimeFeature(String uid) throws org.apache.thrift.TException {
			GetTimeFeature_args args = new GetTimeFeature_args();
			args.setUid(uid);
			sendBase("GetTimeFeature", args);
		}

		public String recv_GetTimeFeature() throws org.apache.thrift.TException {
			GetTimeFeature_result result = new GetTimeFeature_result();
			receiveBase(result, "GetTimeFeature");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetTimeFeature failed: unknown result");
		}

		public String GetNetworkFeature(String uid) throws org.apache.thrift.TException {
			send_GetNetworkFeature(uid);
			return recv_GetNetworkFeature();
		}

		public void send_GetNetworkFeature(String uid) throws org.apache.thrift.TException {
			GetNetworkFeature_args args = new GetNetworkFeature_args();
			args.setUid(uid);
			sendBase("GetNetworkFeature", args);
		}

		public String recv_GetNetworkFeature() throws org.apache.thrift.TException {
			GetNetworkFeature_result result = new GetNetworkFeature_result();
			receiveBase(result, "GetNetworkFeature");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetNetworkFeature failed: unknown result");
		}

		public String GetTagStats(String uid) throws org.apache.thrift.TException {
			send_GetTagStats(uid);
			return recv_GetTagStats();
		}

		public void send_GetTagStats(String uid) throws org.apache.thrift.TException {
			GetTagStats_args args = new GetTagStats_args();
			args.setUid(uid);
			sendBase("GetTagStats", args);
		}

		public String recv_GetTagStats() throws org.apache.thrift.TException {
			GetTagStats_result result = new GetTagStats_result();
			receiveBase(result, "GetTagStats");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetTagStats failed: unknown result");
		}

		public String GetCategoryStats(String uid) throws org.apache.thrift.TException {
			send_GetCategoryStats(uid);
			return recv_GetCategoryStats();
		}

		public void send_GetCategoryStats(String uid) throws org.apache.thrift.TException {
			GetCategoryStats_args args = new GetCategoryStats_args();
			args.setUid(uid);
			sendBase("GetCategoryStats", args);
		}

		public String recv_GetCategoryStats() throws org.apache.thrift.TException {
			GetCategoryStats_result result = new GetCategoryStats_result();
			receiveBase(result, "GetCategoryStats");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetCategoryStats failed: unknown result");
		}

		public String GetCreateTime(String uid) throws org.apache.thrift.TException {
			send_GetCreateTime(uid);
			return recv_GetCreateTime();
		}

		public void send_GetCreateTime(String uid) throws org.apache.thrift.TException {
			GetCreateTime_args args = new GetCreateTime_args();
			args.setUid(uid);
			sendBase("GetCreateTime", args);
		}

		public String recv_GetCreateTime() throws org.apache.thrift.TException {
			GetCreateTime_result result = new GetCreateTime_result();
			receiveBase(result, "GetCreateTime");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetCreateTime failed: unknown result");
		}

		public String GetInterest(String uid) throws org.apache.thrift.TException {
			send_GetInterest(uid);
			return recv_GetInterest();
		}

		public void send_GetInterest(String uid) throws org.apache.thrift.TException {
			GetInterest_args args = new GetInterest_args();
			args.setUid(uid);
			sendBase("GetInterest", args);
		}

		public String recv_GetInterest() throws org.apache.thrift.TException {
			GetInterest_result result = new GetInterest_result();
			receiveBase(result, "GetInterest");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetInterest failed: unknown result");
		}

		public int SetInterest(String uid, String jsonArray) throws org.apache.thrift.TException {
			send_SetInterest(uid, jsonArray);
			return recv_SetInterest();
		}

		public void send_SetInterest(String uid, String jsonArray) throws org.apache.thrift.TException {
			SetInterest_args args = new SetInterest_args();
			args.setUid(uid);
			args.setJsonArray(jsonArray);
			sendBase("SetInterest", args);
		}

		public int recv_SetInterest() throws org.apache.thrift.TException {
			SetInterest_result result = new SetInterest_result();
			receiveBase(result, "SetInterest");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"SetInterest failed: unknown result");
		}

		public int GetSourceCount(String uid, String source, String app) throws org.apache.thrift.TException {
			send_GetSourceCount(uid, source, app);
			return recv_GetSourceCount();
		}

		public void send_GetSourceCount(String uid, String source, String app) throws org.apache.thrift.TException {
			GetSourceCount_args args = new GetSourceCount_args();
			args.setUid(uid);
			args.setSource(source);
			args.setApp(app);
			sendBase("GetSourceCount", args);
		}

		public int recv_GetSourceCount() throws org.apache.thrift.TException {
			GetSourceCount_result result = new GetSourceCount_result();
			receiveBase(result, "GetSourceCount");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"GetSourceCount failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void GetWeightedCategories(String uid, String version,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetWeightedCategories_call method_call = new GetWeightedCategories_call(uid, version, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetWeightedCategories_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;
			private String version;

			public GetWeightedCategories_call(String uid, String version,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.version = version;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetWeightedCategories",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetWeightedCategories_args args = new GetWeightedCategories_args();
				args.setUid(uid);
				args.setVersion(version);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetWeightedCategories();
			}
		}

		public void GetWeightedTags(String uid, String version,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetWeightedTags_call method_call = new GetWeightedTags_call(uid, version, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetWeightedTags_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;
			private String version;

			public GetWeightedTags_call(String uid, String version,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.version = version;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetWeightedTags",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetWeightedTags_args args = new GetWeightedTags_args();
				args.setUid(uid);
				args.setVersion(version);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetWeightedTags();
			}
		}

		public void GetImpressionTitleTags(String uid, String version,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetImpressionTitleTags_call method_call = new GetImpressionTitleTags_call(uid, version, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetImpressionTitleTags_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;
			private String version;

			public GetImpressionTitleTags_call(String uid, String version,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.version = version;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetImpressionTitleTags",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetImpressionTitleTags_args args = new GetImpressionTitleTags_args();
				args.setUid(uid);
				args.setVersion(version);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetImpressionTitleTags();
			}
		}

		public void GetDislikeTitleTags(String uid, String version,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetDislikeTitleTags_call method_call = new GetDislikeTitleTags_call(uid, version, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetDislikeTitleTags_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;
			private String version;

			public GetDislikeTitleTags_call(String uid, String version,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.version = version;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetDislikeTitleTags",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetDislikeTitleTags_args args = new GetDislikeTitleTags_args();
				args.setUid(uid);
				args.setVersion(version);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetDislikeTitleTags();
			}
		}

		public void GetLdaTopic(String uid, String version, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			GetLdaTopic_call method_call = new GetLdaTopic_call(uid, version, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetLdaTopic_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;
			private String version;

			public GetLdaTopic_call(String uid, String version,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.version = version;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetLdaTopic",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetLdaTopic_args args = new GetLdaTopic_args();
				args.setUid(uid);
				args.setVersion(version);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetLdaTopic();
			}
		}

		public void GetLastActionTimeOfCategory(String uid, ActionType type,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetLastActionTimeOfCategory_call method_call = new GetLastActionTimeOfCategory_call(uid, type,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetLastActionTimeOfCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;
			private ActionType type;

			public GetLastActionTimeOfCategory_call(String uid, ActionType type,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.type = type;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetLastActionTimeOfCategory",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetLastActionTimeOfCategory_args args = new GetLastActionTimeOfCategory_args();
				args.setUid(uid);
				args.setType(type);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetLastActionTimeOfCategory();
			}
		}

		public void GetTimeFeature(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			GetTimeFeature_call method_call = new GetTimeFeature_call(uid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetTimeFeature_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;

			public GetTimeFeature_call(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetTimeFeature",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetTimeFeature_args args = new GetTimeFeature_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetTimeFeature();
			}
		}

		public void GetNetworkFeature(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			GetNetworkFeature_call method_call = new GetNetworkFeature_call(uid, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetNetworkFeature_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;

			public GetNetworkFeature_call(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetNetworkFeature",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetNetworkFeature_args args = new GetNetworkFeature_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetNetworkFeature();
			}
		}

		public void GetTagStats(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			GetTagStats_call method_call = new GetTagStats_call(uid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetTagStats_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;

			public GetTagStats_call(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetTagStats",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetTagStats_args args = new GetTagStats_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetTagStats();
			}
		}

		public void GetCategoryStats(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			GetCategoryStats_call method_call = new GetCategoryStats_call(uid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetCategoryStats_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;

			public GetCategoryStats_call(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetCategoryStats",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetCategoryStats_args args = new GetCategoryStats_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetCategoryStats();
			}
		}

		public void GetCreateTime(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			GetCreateTime_call method_call = new GetCreateTime_call(uid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetCreateTime_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;

			public GetCreateTime_call(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetCreateTime",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetCreateTime_args args = new GetCreateTime_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetCreateTime();
			}
		}

		public void GetInterest(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			GetInterest_call method_call = new GetInterest_call(uid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetInterest_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;

			public GetInterest_call(String uid, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetInterest",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetInterest_args args = new GetInterest_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetInterest();
			}
		}

		public void SetInterest(String uid, String jsonArray, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			SetInterest_call method_call = new SetInterest_call(uid, jsonArray, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class SetInterest_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;
			private String jsonArray;

			public SetInterest_call(String uid, String jsonArray,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.jsonArray = jsonArray;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetInterest",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				SetInterest_args args = new SetInterest_args();
				args.setUid(uid);
				args.setJsonArray(jsonArray);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public int getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_SetInterest();
			}
		}

		public void GetSourceCount(String uid, String source, String app,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			GetSourceCount_call method_call = new GetSourceCount_call(uid, source, app, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class GetSourceCount_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String uid;
			private String source;
			private String app;

			public GetSourceCount_call(String uid, String source, String app,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.source = source;
				this.app = app;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSourceCount",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				GetSourceCount_args args = new GetSourceCount_args();
				args.setUid(uid);
				args.setSource(source);
				args.setApp(app);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public int getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_GetSourceCount();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("GetWeightedCategories", new GetWeightedCategories());
			processMap.put("GetWeightedTags", new GetWeightedTags());
			processMap.put("GetImpressionTitleTags", new GetImpressionTitleTags());
			processMap.put("GetDislikeTitleTags", new GetDislikeTitleTags());
			processMap.put("GetLdaTopic", new GetLdaTopic());
			processMap.put("GetLastActionTimeOfCategory", new GetLastActionTimeOfCategory());
			processMap.put("GetTimeFeature", new GetTimeFeature());
			processMap.put("GetNetworkFeature", new GetNetworkFeature());
			processMap.put("GetTagStats", new GetTagStats());
			processMap.put("GetCategoryStats", new GetCategoryStats());
			processMap.put("GetCreateTime", new GetCreateTime());
			processMap.put("GetInterest", new GetInterest());
			processMap.put("SetInterest", new SetInterest());
			processMap.put("GetSourceCount", new GetSourceCount());
			return processMap;
		}

		public static class GetWeightedCategories<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetWeightedCategories_args> {
			public GetWeightedCategories() {
				super("GetWeightedCategories");
			}

			public GetWeightedCategories_args getEmptyArgsInstance() {
				return new GetWeightedCategories_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetWeightedCategories_result getResult(I iface, GetWeightedCategories_args args)
					throws org.apache.thrift.TException {
				GetWeightedCategories_result result = new GetWeightedCategories_result();
				result.success = iface.GetWeightedCategories(args.uid, args.version);
				return result;
			}
		}

		public static class GetWeightedTags<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetWeightedTags_args> {
			public GetWeightedTags() {
				super("GetWeightedTags");
			}

			public GetWeightedTags_args getEmptyArgsInstance() {
				return new GetWeightedTags_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetWeightedTags_result getResult(I iface, GetWeightedTags_args args)
					throws org.apache.thrift.TException {
				GetWeightedTags_result result = new GetWeightedTags_result();
				result.success = iface.GetWeightedTags(args.uid, args.version);
				return result;
			}
		}

		public static class GetImpressionTitleTags<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetImpressionTitleTags_args> {
			public GetImpressionTitleTags() {
				super("GetImpressionTitleTags");
			}

			public GetImpressionTitleTags_args getEmptyArgsInstance() {
				return new GetImpressionTitleTags_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetImpressionTitleTags_result getResult(I iface, GetImpressionTitleTags_args args)
					throws org.apache.thrift.TException {
				GetImpressionTitleTags_result result = new GetImpressionTitleTags_result();
				result.success = iface.GetImpressionTitleTags(args.uid, args.version);
				return result;
			}
		}

		public static class GetDislikeTitleTags<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetDislikeTitleTags_args> {
			public GetDislikeTitleTags() {
				super("GetDislikeTitleTags");
			}

			public GetDislikeTitleTags_args getEmptyArgsInstance() {
				return new GetDislikeTitleTags_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetDislikeTitleTags_result getResult(I iface, GetDislikeTitleTags_args args)
					throws org.apache.thrift.TException {
				GetDislikeTitleTags_result result = new GetDislikeTitleTags_result();
				result.success = iface.GetDislikeTitleTags(args.uid, args.version);
				return result;
			}
		}

		public static class GetLdaTopic<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetLdaTopic_args> {
			public GetLdaTopic() {
				super("GetLdaTopic");
			}

			public GetLdaTopic_args getEmptyArgsInstance() {
				return new GetLdaTopic_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetLdaTopic_result getResult(I iface, GetLdaTopic_args args) throws org.apache.thrift.TException {
				GetLdaTopic_result result = new GetLdaTopic_result();
				result.success = iface.GetLdaTopic(args.uid, args.version);
				return result;
			}
		}

		public static class GetLastActionTimeOfCategory<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetLastActionTimeOfCategory_args> {
			public GetLastActionTimeOfCategory() {
				super("GetLastActionTimeOfCategory");
			}

			public GetLastActionTimeOfCategory_args getEmptyArgsInstance() {
				return new GetLastActionTimeOfCategory_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetLastActionTimeOfCategory_result getResult(I iface, GetLastActionTimeOfCategory_args args)
					throws org.apache.thrift.TException {
				GetLastActionTimeOfCategory_result result = new GetLastActionTimeOfCategory_result();
				result.success = iface.GetLastActionTimeOfCategory(args.uid, args.type);
				return result;
			}
		}

		public static class GetTimeFeature<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetTimeFeature_args> {
			public GetTimeFeature() {
				super("GetTimeFeature");
			}

			public GetTimeFeature_args getEmptyArgsInstance() {
				return new GetTimeFeature_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetTimeFeature_result getResult(I iface, GetTimeFeature_args args)
					throws org.apache.thrift.TException {
				GetTimeFeature_result result = new GetTimeFeature_result();
				result.success = iface.GetTimeFeature(args.uid);
				return result;
			}
		}

		public static class GetNetworkFeature<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetNetworkFeature_args> {
			public GetNetworkFeature() {
				super("GetNetworkFeature");
			}

			public GetNetworkFeature_args getEmptyArgsInstance() {
				return new GetNetworkFeature_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetNetworkFeature_result getResult(I iface, GetNetworkFeature_args args)
					throws org.apache.thrift.TException {
				GetNetworkFeature_result result = new GetNetworkFeature_result();
				result.success = iface.GetNetworkFeature(args.uid);
				return result;
			}
		}

		public static class GetTagStats<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetTagStats_args> {
			public GetTagStats() {
				super("GetTagStats");
			}

			public GetTagStats_args getEmptyArgsInstance() {
				return new GetTagStats_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetTagStats_result getResult(I iface, GetTagStats_args args) throws org.apache.thrift.TException {
				GetTagStats_result result = new GetTagStats_result();
				result.success = iface.GetTagStats(args.uid);
				return result;
			}
		}

		public static class GetCategoryStats<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetCategoryStats_args> {
			public GetCategoryStats() {
				super("GetCategoryStats");
			}

			public GetCategoryStats_args getEmptyArgsInstance() {
				return new GetCategoryStats_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetCategoryStats_result getResult(I iface, GetCategoryStats_args args)
					throws org.apache.thrift.TException {
				GetCategoryStats_result result = new GetCategoryStats_result();
				result.success = iface.GetCategoryStats(args.uid);
				return result;
			}
		}

		public static class GetCreateTime<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetCreateTime_args> {
			public GetCreateTime() {
				super("GetCreateTime");
			}

			public GetCreateTime_args getEmptyArgsInstance() {
				return new GetCreateTime_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetCreateTime_result getResult(I iface, GetCreateTime_args args)
					throws org.apache.thrift.TException {
				GetCreateTime_result result = new GetCreateTime_result();
				result.success = iface.GetCreateTime(args.uid);
				return result;
			}
		}

		public static class GetInterest<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetInterest_args> {
			public GetInterest() {
				super("GetInterest");
			}

			public GetInterest_args getEmptyArgsInstance() {
				return new GetInterest_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetInterest_result getResult(I iface, GetInterest_args args) throws org.apache.thrift.TException {
				GetInterest_result result = new GetInterest_result();
				result.success = iface.GetInterest(args.uid);
				return result;
			}
		}

		public static class SetInterest<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, SetInterest_args> {
			public SetInterest() {
				super("SetInterest");
			}

			public SetInterest_args getEmptyArgsInstance() {
				return new SetInterest_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public SetInterest_result getResult(I iface, SetInterest_args args) throws org.apache.thrift.TException {
				SetInterest_result result = new SetInterest_result();
				result.success = iface.SetInterest(args.uid, args.jsonArray);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		public static class GetSourceCount<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, GetSourceCount_args> {
			public GetSourceCount() {
				super("GetSourceCount");
			}

			public GetSourceCount_args getEmptyArgsInstance() {
				return new GetSourceCount_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public GetSourceCount_result getResult(I iface, GetSourceCount_args args)
					throws org.apache.thrift.TException {
				GetSourceCount_result result = new GetSourceCount_result();
				result.success = iface.GetSourceCount(args.uid, args.source, args.app);
				result.setSuccessIsSet(true);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("GetWeightedCategories", new GetWeightedCategories());
			processMap.put("GetWeightedTags", new GetWeightedTags());
			processMap.put("GetImpressionTitleTags", new GetImpressionTitleTags());
			processMap.put("GetDislikeTitleTags", new GetDislikeTitleTags());
			processMap.put("GetLdaTopic", new GetLdaTopic());
			processMap.put("GetLastActionTimeOfCategory", new GetLastActionTimeOfCategory());
			processMap.put("GetTimeFeature", new GetTimeFeature());
			processMap.put("GetNetworkFeature", new GetNetworkFeature());
			processMap.put("GetTagStats", new GetTagStats());
			processMap.put("GetCategoryStats", new GetCategoryStats());
			processMap.put("GetCreateTime", new GetCreateTime());
			processMap.put("GetInterest", new GetInterest());
			processMap.put("SetInterest", new SetInterest());
			processMap.put("GetSourceCount", new GetSourceCount());
			return processMap;
		}

		public static class GetWeightedCategories<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetWeightedCategories_args, String> {
			public GetWeightedCategories() {
				super("GetWeightedCategories");
			}

			public GetWeightedCategories_args getEmptyArgsInstance() {
				return new GetWeightedCategories_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetWeightedCategories_result result = new GetWeightedCategories_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetWeightedCategories_result result = new GetWeightedCategories_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetWeightedCategories_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetWeightedCategories(args.uid, args.version, resultHandler);
			}
		}

		public static class GetWeightedTags<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetWeightedTags_args, String> {
			public GetWeightedTags() {
				super("GetWeightedTags");
			}

			public GetWeightedTags_args getEmptyArgsInstance() {
				return new GetWeightedTags_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetWeightedTags_result result = new GetWeightedTags_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetWeightedTags_result result = new GetWeightedTags_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetWeightedTags_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetWeightedTags(args.uid, args.version, resultHandler);
			}
		}

		public static class GetImpressionTitleTags<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetImpressionTitleTags_args, String> {
			public GetImpressionTitleTags() {
				super("GetImpressionTitleTags");
			}

			public GetImpressionTitleTags_args getEmptyArgsInstance() {
				return new GetImpressionTitleTags_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetImpressionTitleTags_result result = new GetImpressionTitleTags_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetImpressionTitleTags_result result = new GetImpressionTitleTags_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetImpressionTitleTags_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetImpressionTitleTags(args.uid, args.version, resultHandler);
			}
		}

		public static class GetDislikeTitleTags<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetDislikeTitleTags_args, String> {
			public GetDislikeTitleTags() {
				super("GetDislikeTitleTags");
			}

			public GetDislikeTitleTags_args getEmptyArgsInstance() {
				return new GetDislikeTitleTags_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetDislikeTitleTags_result result = new GetDislikeTitleTags_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetDislikeTitleTags_result result = new GetDislikeTitleTags_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetDislikeTitleTags_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetDislikeTitleTags(args.uid, args.version, resultHandler);
			}
		}

		public static class GetLdaTopic<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetLdaTopic_args, String> {
			public GetLdaTopic() {
				super("GetLdaTopic");
			}

			public GetLdaTopic_args getEmptyArgsInstance() {
				return new GetLdaTopic_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetLdaTopic_result result = new GetLdaTopic_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetLdaTopic_result result = new GetLdaTopic_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetLdaTopic_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetLdaTopic(args.uid, args.version, resultHandler);
			}
		}

		public static class GetLastActionTimeOfCategory<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetLastActionTimeOfCategory_args, String> {
			public GetLastActionTimeOfCategory() {
				super("GetLastActionTimeOfCategory");
			}

			public GetLastActionTimeOfCategory_args getEmptyArgsInstance() {
				return new GetLastActionTimeOfCategory_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetLastActionTimeOfCategory_result result = new GetLastActionTimeOfCategory_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetLastActionTimeOfCategory_result result = new GetLastActionTimeOfCategory_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetLastActionTimeOfCategory_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetLastActionTimeOfCategory(args.uid, args.type, resultHandler);
			}
		}

		public static class GetTimeFeature<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetTimeFeature_args, String> {
			public GetTimeFeature() {
				super("GetTimeFeature");
			}

			public GetTimeFeature_args getEmptyArgsInstance() {
				return new GetTimeFeature_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetTimeFeature_result result = new GetTimeFeature_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetTimeFeature_result result = new GetTimeFeature_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetTimeFeature_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetTimeFeature(args.uid, resultHandler);
			}
		}

		public static class GetNetworkFeature<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetNetworkFeature_args, String> {
			public GetNetworkFeature() {
				super("GetNetworkFeature");
			}

			public GetNetworkFeature_args getEmptyArgsInstance() {
				return new GetNetworkFeature_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetNetworkFeature_result result = new GetNetworkFeature_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetNetworkFeature_result result = new GetNetworkFeature_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetNetworkFeature_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetNetworkFeature(args.uid, resultHandler);
			}
		}

		public static class GetTagStats<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetTagStats_args, String> {
			public GetTagStats() {
				super("GetTagStats");
			}

			public GetTagStats_args getEmptyArgsInstance() {
				return new GetTagStats_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetTagStats_result result = new GetTagStats_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetTagStats_result result = new GetTagStats_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetTagStats_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetTagStats(args.uid, resultHandler);
			}
		}

		public static class GetCategoryStats<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetCategoryStats_args, String> {
			public GetCategoryStats() {
				super("GetCategoryStats");
			}

			public GetCategoryStats_args getEmptyArgsInstance() {
				return new GetCategoryStats_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetCategoryStats_result result = new GetCategoryStats_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetCategoryStats_result result = new GetCategoryStats_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetCategoryStats_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetCategoryStats(args.uid, resultHandler);
			}
		}

		public static class GetCreateTime<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetCreateTime_args, String> {
			public GetCreateTime() {
				super("GetCreateTime");
			}

			public GetCreateTime_args getEmptyArgsInstance() {
				return new GetCreateTime_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetCreateTime_result result = new GetCreateTime_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetCreateTime_result result = new GetCreateTime_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetCreateTime_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetCreateTime(args.uid, resultHandler);
			}
		}

		public static class GetInterest<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetInterest_args, String> {
			public GetInterest() {
				super("GetInterest");
			}

			public GetInterest_args getEmptyArgsInstance() {
				return new GetInterest_args();
			}

			public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						GetInterest_result result = new GetInterest_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetInterest_result result = new GetInterest_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetInterest_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
				iface.GetInterest(args.uid, resultHandler);
			}
		}

		public static class SetInterest<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, SetInterest_args, Integer> {
			public SetInterest() {
				super("SetInterest");
			}

			public SetInterest_args getEmptyArgsInstance() {
				return new SetInterest_args();
			}

			public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Integer>() {
					public void onComplete(Integer o) {
						SetInterest_result result = new SetInterest_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						SetInterest_result result = new SetInterest_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, SetInterest_args args,
					org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
				iface.SetInterest(args.uid, args.jsonArray, resultHandler);
			}
		}

		public static class GetSourceCount<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, GetSourceCount_args, Integer> {
			public GetSourceCount() {
				super("GetSourceCount");
			}

			public GetSourceCount_args getEmptyArgsInstance() {
				return new GetSourceCount_args();
			}

			public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Integer>() {
					public void onComplete(Integer o) {
						GetSourceCount_result result = new GetSourceCount_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						GetSourceCount_result result = new GetSourceCount_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, GetSourceCount_args args,
					org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
				iface.GetSourceCount(args.uid, args.source, args.app, resultHandler);
			}
		}

	}

	public static class GetWeightedCategories_args
			implements org.apache.thrift.TBase<GetWeightedCategories_args, GetWeightedCategories_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetWeightedCategories_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetWeightedCategories_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"version", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetWeightedCategories_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetWeightedCategories_argsTupleSchemeFactory());
		}

		public String uid; // required
		public String version; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid"), VERSION((short) 2, "version");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // VERSION
					return VERSION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetWeightedCategories_args.class,
					metaDataMap);
		}

		public GetWeightedCategories_args() {
		}

		public GetWeightedCategories_args(String uid, String version) {
			this();
			this.uid = uid;
			this.version = version;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetWeightedCategories_args(GetWeightedCategories_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetVersion()) {
				this.version = other.version;
			}
		}

		public GetWeightedCategories_args deepCopy() {
			return new GetWeightedCategories_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.version = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetWeightedCategories_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public String getVersion() {
			return this.version;
		}

		public GetWeightedCategories_args setVersion(String version) {
			this.version = version;
			return this;
		}

		public void unsetVersion() {
			this.version = null;
		}

		/**
		 * Returns true if field version is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetVersion() {
			return this.version != null;
		}

		public void setVersionIsSet(boolean value) {
			if (!value) {
				this.version = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			case VERSION:
				if (value == null) {
					unsetVersion();
				} else {
					setVersion((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case VERSION:
				return getVersion();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case VERSION:
				return isSetVersion();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetWeightedCategories_args)
				return this.equals((GetWeightedCategories_args) that);
			return false;
		}

		public boolean equals(GetWeightedCategories_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_version = true && this.isSetVersion();
			boolean that_present_version = true && that.isSetVersion();
			if (this_present_version || that_present_version) {
				if (!(this_present_version && that_present_version))
					return false;
				if (!this.version.equals(that.version))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			boolean present_version = true && (isSetVersion());
			list.add(present_version);
			if (present_version)
				list.add(version);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetWeightedCategories_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVersion()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetWeightedCategories_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("version:");
			if (this.version == null) {
				sb.append("null");
			} else {
				sb.append(this.version);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetWeightedCategories_argsStandardSchemeFactory implements SchemeFactory {
			public GetWeightedCategories_argsStandardScheme getScheme() {
				return new GetWeightedCategories_argsStandardScheme();
			}
		}

		private static class GetWeightedCategories_argsStandardScheme
				extends StandardScheme<GetWeightedCategories_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetWeightedCategories_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // VERSION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.version = iprot.readString();
							struct.setVersionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetWeightedCategories_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.version != null) {
					oprot.writeFieldBegin(VERSION_FIELD_DESC);
					oprot.writeString(struct.version);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetWeightedCategories_argsTupleSchemeFactory implements SchemeFactory {
			public GetWeightedCategories_argsTupleScheme getScheme() {
				return new GetWeightedCategories_argsTupleScheme();
			}
		}

		private static class GetWeightedCategories_argsTupleScheme extends TupleScheme<GetWeightedCategories_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetWeightedCategories_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetVersion()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetVersion()) {
					oprot.writeString(struct.version);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetWeightedCategories_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.version = iprot.readString();
					struct.setVersionIsSet(true);
				}
			}
		}

	}

	public static class GetWeightedCategories_result
			implements org.apache.thrift.TBase<GetWeightedCategories_result, GetWeightedCategories_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetWeightedCategories_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetWeightedCategories_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetWeightedCategories_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetWeightedCategories_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetWeightedCategories_result.class,
					metaDataMap);
		}

		public GetWeightedCategories_result() {
		}

		public GetWeightedCategories_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetWeightedCategories_result(GetWeightedCategories_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetWeightedCategories_result deepCopy() {
			return new GetWeightedCategories_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetWeightedCategories_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetWeightedCategories_result)
				return this.equals((GetWeightedCategories_result) that);
			return false;
		}

		public boolean equals(GetWeightedCategories_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetWeightedCategories_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetWeightedCategories_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetWeightedCategories_resultStandardSchemeFactory implements SchemeFactory {
			public GetWeightedCategories_resultStandardScheme getScheme() {
				return new GetWeightedCategories_resultStandardScheme();
			}
		}

		private static class GetWeightedCategories_resultStandardScheme
				extends StandardScheme<GetWeightedCategories_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetWeightedCategories_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetWeightedCategories_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetWeightedCategories_resultTupleSchemeFactory implements SchemeFactory {
			public GetWeightedCategories_resultTupleScheme getScheme() {
				return new GetWeightedCategories_resultTupleScheme();
			}
		}

		private static class GetWeightedCategories_resultTupleScheme extends TupleScheme<GetWeightedCategories_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetWeightedCategories_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetWeightedCategories_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetWeightedTags_args
			implements org.apache.thrift.TBase<GetWeightedTags_args, GetWeightedTags_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetWeightedTags_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetWeightedTags_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"version", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetWeightedTags_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetWeightedTags_argsTupleSchemeFactory());
		}

		public String uid; // required
		public String version; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid"), VERSION((short) 2, "version");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // VERSION
					return VERSION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetWeightedTags_args.class, metaDataMap);
		}

		public GetWeightedTags_args() {
		}

		public GetWeightedTags_args(String uid, String version) {
			this();
			this.uid = uid;
			this.version = version;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetWeightedTags_args(GetWeightedTags_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetVersion()) {
				this.version = other.version;
			}
		}

		public GetWeightedTags_args deepCopy() {
			return new GetWeightedTags_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.version = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetWeightedTags_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public String getVersion() {
			return this.version;
		}

		public GetWeightedTags_args setVersion(String version) {
			this.version = version;
			return this;
		}

		public void unsetVersion() {
			this.version = null;
		}

		/**
		 * Returns true if field version is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetVersion() {
			return this.version != null;
		}

		public void setVersionIsSet(boolean value) {
			if (!value) {
				this.version = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			case VERSION:
				if (value == null) {
					unsetVersion();
				} else {
					setVersion((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case VERSION:
				return getVersion();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case VERSION:
				return isSetVersion();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetWeightedTags_args)
				return this.equals((GetWeightedTags_args) that);
			return false;
		}

		public boolean equals(GetWeightedTags_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_version = true && this.isSetVersion();
			boolean that_present_version = true && that.isSetVersion();
			if (this_present_version || that_present_version) {
				if (!(this_present_version && that_present_version))
					return false;
				if (!this.version.equals(that.version))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			boolean present_version = true && (isSetVersion());
			list.add(present_version);
			if (present_version)
				list.add(version);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetWeightedTags_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVersion()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetWeightedTags_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("version:");
			if (this.version == null) {
				sb.append("null");
			} else {
				sb.append(this.version);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetWeightedTags_argsStandardSchemeFactory implements SchemeFactory {
			public GetWeightedTags_argsStandardScheme getScheme() {
				return new GetWeightedTags_argsStandardScheme();
			}
		}

		private static class GetWeightedTags_argsStandardScheme extends StandardScheme<GetWeightedTags_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetWeightedTags_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // VERSION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.version = iprot.readString();
							struct.setVersionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetWeightedTags_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.version != null) {
					oprot.writeFieldBegin(VERSION_FIELD_DESC);
					oprot.writeString(struct.version);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetWeightedTags_argsTupleSchemeFactory implements SchemeFactory {
			public GetWeightedTags_argsTupleScheme getScheme() {
				return new GetWeightedTags_argsTupleScheme();
			}
		}

		private static class GetWeightedTags_argsTupleScheme extends TupleScheme<GetWeightedTags_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetWeightedTags_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetVersion()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetVersion()) {
					oprot.writeString(struct.version);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetWeightedTags_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.version = iprot.readString();
					struct.setVersionIsSet(true);
				}
			}
		}

	}

	public static class GetWeightedTags_result
			implements org.apache.thrift.TBase<GetWeightedTags_result, GetWeightedTags_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetWeightedTags_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetWeightedTags_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetWeightedTags_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetWeightedTags_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetWeightedTags_result.class, metaDataMap);
		}

		public GetWeightedTags_result() {
		}

		public GetWeightedTags_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetWeightedTags_result(GetWeightedTags_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetWeightedTags_result deepCopy() {
			return new GetWeightedTags_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetWeightedTags_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetWeightedTags_result)
				return this.equals((GetWeightedTags_result) that);
			return false;
		}

		public boolean equals(GetWeightedTags_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetWeightedTags_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetWeightedTags_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetWeightedTags_resultStandardSchemeFactory implements SchemeFactory {
			public GetWeightedTags_resultStandardScheme getScheme() {
				return new GetWeightedTags_resultStandardScheme();
			}
		}

		private static class GetWeightedTags_resultStandardScheme extends StandardScheme<GetWeightedTags_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetWeightedTags_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetWeightedTags_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetWeightedTags_resultTupleSchemeFactory implements SchemeFactory {
			public GetWeightedTags_resultTupleScheme getScheme() {
				return new GetWeightedTags_resultTupleScheme();
			}
		}

		private static class GetWeightedTags_resultTupleScheme extends TupleScheme<GetWeightedTags_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetWeightedTags_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetWeightedTags_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetImpressionTitleTags_args
			implements org.apache.thrift.TBase<GetImpressionTitleTags_args, GetImpressionTitleTags_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetImpressionTitleTags_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetImpressionTitleTags_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"version", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetImpressionTitleTags_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetImpressionTitleTags_argsTupleSchemeFactory());
		}

		public String uid; // required
		public String version; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid"), VERSION((short) 2, "version");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // VERSION
					return VERSION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetImpressionTitleTags_args.class,
					metaDataMap);
		}

		public GetImpressionTitleTags_args() {
		}

		public GetImpressionTitleTags_args(String uid, String version) {
			this();
			this.uid = uid;
			this.version = version;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetImpressionTitleTags_args(GetImpressionTitleTags_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetVersion()) {
				this.version = other.version;
			}
		}

		public GetImpressionTitleTags_args deepCopy() {
			return new GetImpressionTitleTags_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.version = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetImpressionTitleTags_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public String getVersion() {
			return this.version;
		}

		public GetImpressionTitleTags_args setVersion(String version) {
			this.version = version;
			return this;
		}

		public void unsetVersion() {
			this.version = null;
		}

		/**
		 * Returns true if field version is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetVersion() {
			return this.version != null;
		}

		public void setVersionIsSet(boolean value) {
			if (!value) {
				this.version = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			case VERSION:
				if (value == null) {
					unsetVersion();
				} else {
					setVersion((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case VERSION:
				return getVersion();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case VERSION:
				return isSetVersion();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetImpressionTitleTags_args)
				return this.equals((GetImpressionTitleTags_args) that);
			return false;
		}

		public boolean equals(GetImpressionTitleTags_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_version = true && this.isSetVersion();
			boolean that_present_version = true && that.isSetVersion();
			if (this_present_version || that_present_version) {
				if (!(this_present_version && that_present_version))
					return false;
				if (!this.version.equals(that.version))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			boolean present_version = true && (isSetVersion());
			list.add(present_version);
			if (present_version)
				list.add(version);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetImpressionTitleTags_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVersion()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetImpressionTitleTags_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("version:");
			if (this.version == null) {
				sb.append("null");
			} else {
				sb.append(this.version);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetImpressionTitleTags_argsStandardSchemeFactory implements SchemeFactory {
			public GetImpressionTitleTags_argsStandardScheme getScheme() {
				return new GetImpressionTitleTags_argsStandardScheme();
			}
		}

		private static class GetImpressionTitleTags_argsStandardScheme
				extends StandardScheme<GetImpressionTitleTags_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetImpressionTitleTags_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // VERSION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.version = iprot.readString();
							struct.setVersionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetImpressionTitleTags_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.version != null) {
					oprot.writeFieldBegin(VERSION_FIELD_DESC);
					oprot.writeString(struct.version);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetImpressionTitleTags_argsTupleSchemeFactory implements SchemeFactory {
			public GetImpressionTitleTags_argsTupleScheme getScheme() {
				return new GetImpressionTitleTags_argsTupleScheme();
			}
		}

		private static class GetImpressionTitleTags_argsTupleScheme extends TupleScheme<GetImpressionTitleTags_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetImpressionTitleTags_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetVersion()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetVersion()) {
					oprot.writeString(struct.version);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetImpressionTitleTags_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.version = iprot.readString();
					struct.setVersionIsSet(true);
				}
			}
		}

	}

	public static class GetImpressionTitleTags_result
			implements org.apache.thrift.TBase<GetImpressionTitleTags_result, GetImpressionTitleTags_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetImpressionTitleTags_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetImpressionTitleTags_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetImpressionTitleTags_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetImpressionTitleTags_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetImpressionTitleTags_result.class,
					metaDataMap);
		}

		public GetImpressionTitleTags_result() {
		}

		public GetImpressionTitleTags_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetImpressionTitleTags_result(GetImpressionTitleTags_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetImpressionTitleTags_result deepCopy() {
			return new GetImpressionTitleTags_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetImpressionTitleTags_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetImpressionTitleTags_result)
				return this.equals((GetImpressionTitleTags_result) that);
			return false;
		}

		public boolean equals(GetImpressionTitleTags_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetImpressionTitleTags_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetImpressionTitleTags_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetImpressionTitleTags_resultStandardSchemeFactory implements SchemeFactory {
			public GetImpressionTitleTags_resultStandardScheme getScheme() {
				return new GetImpressionTitleTags_resultStandardScheme();
			}
		}

		private static class GetImpressionTitleTags_resultStandardScheme
				extends StandardScheme<GetImpressionTitleTags_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetImpressionTitleTags_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetImpressionTitleTags_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetImpressionTitleTags_resultTupleSchemeFactory implements SchemeFactory {
			public GetImpressionTitleTags_resultTupleScheme getScheme() {
				return new GetImpressionTitleTags_resultTupleScheme();
			}
		}

		private static class GetImpressionTitleTags_resultTupleScheme
				extends TupleScheme<GetImpressionTitleTags_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetImpressionTitleTags_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetImpressionTitleTags_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetDislikeTitleTags_args
			implements org.apache.thrift.TBase<GetDislikeTitleTags_args, GetDislikeTitleTags_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetDislikeTitleTags_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetDislikeTitleTags_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"version", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetDislikeTitleTags_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetDislikeTitleTags_argsTupleSchemeFactory());
		}

		public String uid; // required
		public String version; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid"), VERSION((short) 2, "version");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // VERSION
					return VERSION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetDislikeTitleTags_args.class, metaDataMap);
		}

		public GetDislikeTitleTags_args() {
		}

		public GetDislikeTitleTags_args(String uid, String version) {
			this();
			this.uid = uid;
			this.version = version;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetDislikeTitleTags_args(GetDislikeTitleTags_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetVersion()) {
				this.version = other.version;
			}
		}

		public GetDislikeTitleTags_args deepCopy() {
			return new GetDislikeTitleTags_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.version = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetDislikeTitleTags_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public String getVersion() {
			return this.version;
		}

		public GetDislikeTitleTags_args setVersion(String version) {
			this.version = version;
			return this;
		}

		public void unsetVersion() {
			this.version = null;
		}

		/**
		 * Returns true if field version is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetVersion() {
			return this.version != null;
		}

		public void setVersionIsSet(boolean value) {
			if (!value) {
				this.version = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			case VERSION:
				if (value == null) {
					unsetVersion();
				} else {
					setVersion((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case VERSION:
				return getVersion();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case VERSION:
				return isSetVersion();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetDislikeTitleTags_args)
				return this.equals((GetDislikeTitleTags_args) that);
			return false;
		}

		public boolean equals(GetDislikeTitleTags_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_version = true && this.isSetVersion();
			boolean that_present_version = true && that.isSetVersion();
			if (this_present_version || that_present_version) {
				if (!(this_present_version && that_present_version))
					return false;
				if (!this.version.equals(that.version))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			boolean present_version = true && (isSetVersion());
			list.add(present_version);
			if (present_version)
				list.add(version);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetDislikeTitleTags_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVersion()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetDislikeTitleTags_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("version:");
			if (this.version == null) {
				sb.append("null");
			} else {
				sb.append(this.version);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetDislikeTitleTags_argsStandardSchemeFactory implements SchemeFactory {
			public GetDislikeTitleTags_argsStandardScheme getScheme() {
				return new GetDislikeTitleTags_argsStandardScheme();
			}
		}

		private static class GetDislikeTitleTags_argsStandardScheme extends StandardScheme<GetDislikeTitleTags_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetDislikeTitleTags_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // VERSION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.version = iprot.readString();
							struct.setVersionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetDislikeTitleTags_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.version != null) {
					oprot.writeFieldBegin(VERSION_FIELD_DESC);
					oprot.writeString(struct.version);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetDislikeTitleTags_argsTupleSchemeFactory implements SchemeFactory {
			public GetDislikeTitleTags_argsTupleScheme getScheme() {
				return new GetDislikeTitleTags_argsTupleScheme();
			}
		}

		private static class GetDislikeTitleTags_argsTupleScheme extends TupleScheme<GetDislikeTitleTags_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetDislikeTitleTags_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetVersion()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetVersion()) {
					oprot.writeString(struct.version);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetDislikeTitleTags_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.version = iprot.readString();
					struct.setVersionIsSet(true);
				}
			}
		}

	}

	public static class GetDislikeTitleTags_result
			implements org.apache.thrift.TBase<GetDislikeTitleTags_result, GetDislikeTitleTags_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetDislikeTitleTags_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetDislikeTitleTags_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetDislikeTitleTags_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetDislikeTitleTags_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetDislikeTitleTags_result.class,
					metaDataMap);
		}

		public GetDislikeTitleTags_result() {
		}

		public GetDislikeTitleTags_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetDislikeTitleTags_result(GetDislikeTitleTags_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetDislikeTitleTags_result deepCopy() {
			return new GetDislikeTitleTags_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetDislikeTitleTags_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetDislikeTitleTags_result)
				return this.equals((GetDislikeTitleTags_result) that);
			return false;
		}

		public boolean equals(GetDislikeTitleTags_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetDislikeTitleTags_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetDislikeTitleTags_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetDislikeTitleTags_resultStandardSchemeFactory implements SchemeFactory {
			public GetDislikeTitleTags_resultStandardScheme getScheme() {
				return new GetDislikeTitleTags_resultStandardScheme();
			}
		}

		private static class GetDislikeTitleTags_resultStandardScheme
				extends StandardScheme<GetDislikeTitleTags_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetDislikeTitleTags_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetDislikeTitleTags_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetDislikeTitleTags_resultTupleSchemeFactory implements SchemeFactory {
			public GetDislikeTitleTags_resultTupleScheme getScheme() {
				return new GetDislikeTitleTags_resultTupleScheme();
			}
		}

		private static class GetDislikeTitleTags_resultTupleScheme extends TupleScheme<GetDislikeTitleTags_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetDislikeTitleTags_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetDislikeTitleTags_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetLdaTopic_args implements org.apache.thrift.TBase<GetLdaTopic_args, GetLdaTopic_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetLdaTopic_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetLdaTopic_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"version", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetLdaTopic_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetLdaTopic_argsTupleSchemeFactory());
		}

		public String uid; // required
		public String version; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid"), VERSION((short) 2, "version");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // VERSION
					return VERSION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLdaTopic_args.class, metaDataMap);
		}

		public GetLdaTopic_args() {
		}

		public GetLdaTopic_args(String uid, String version) {
			this();
			this.uid = uid;
			this.version = version;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetLdaTopic_args(GetLdaTopic_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetVersion()) {
				this.version = other.version;
			}
		}

		public GetLdaTopic_args deepCopy() {
			return new GetLdaTopic_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.version = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetLdaTopic_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public String getVersion() {
			return this.version;
		}

		public GetLdaTopic_args setVersion(String version) {
			this.version = version;
			return this;
		}

		public void unsetVersion() {
			this.version = null;
		}

		/**
		 * Returns true if field version is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetVersion() {
			return this.version != null;
		}

		public void setVersionIsSet(boolean value) {
			if (!value) {
				this.version = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			case VERSION:
				if (value == null) {
					unsetVersion();
				} else {
					setVersion((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case VERSION:
				return getVersion();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case VERSION:
				return isSetVersion();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetLdaTopic_args)
				return this.equals((GetLdaTopic_args) that);
			return false;
		}

		public boolean equals(GetLdaTopic_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_version = true && this.isSetVersion();
			boolean that_present_version = true && that.isSetVersion();
			if (this_present_version || that_present_version) {
				if (!(this_present_version && that_present_version))
					return false;
				if (!this.version.equals(that.version))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			boolean present_version = true && (isSetVersion());
			list.add(present_version);
			if (present_version)
				list.add(version);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetLdaTopic_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVersion()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetLdaTopic_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("version:");
			if (this.version == null) {
				sb.append("null");
			} else {
				sb.append(this.version);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetLdaTopic_argsStandardSchemeFactory implements SchemeFactory {
			public GetLdaTopic_argsStandardScheme getScheme() {
				return new GetLdaTopic_argsStandardScheme();
			}
		}

		private static class GetLdaTopic_argsStandardScheme extends StandardScheme<GetLdaTopic_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetLdaTopic_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // VERSION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.version = iprot.readString();
							struct.setVersionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetLdaTopic_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.version != null) {
					oprot.writeFieldBegin(VERSION_FIELD_DESC);
					oprot.writeString(struct.version);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetLdaTopic_argsTupleSchemeFactory implements SchemeFactory {
			public GetLdaTopic_argsTupleScheme getScheme() {
				return new GetLdaTopic_argsTupleScheme();
			}
		}

		private static class GetLdaTopic_argsTupleScheme extends TupleScheme<GetLdaTopic_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetLdaTopic_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetVersion()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetVersion()) {
					oprot.writeString(struct.version);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetLdaTopic_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.version = iprot.readString();
					struct.setVersionIsSet(true);
				}
			}
		}

	}

	public static class GetLdaTopic_result
			implements org.apache.thrift.TBase<GetLdaTopic_result, GetLdaTopic_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<GetLdaTopic_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetLdaTopic_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetLdaTopic_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetLdaTopic_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLdaTopic_result.class, metaDataMap);
		}

		public GetLdaTopic_result() {
		}

		public GetLdaTopic_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetLdaTopic_result(GetLdaTopic_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetLdaTopic_result deepCopy() {
			return new GetLdaTopic_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetLdaTopic_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetLdaTopic_result)
				return this.equals((GetLdaTopic_result) that);
			return false;
		}

		public boolean equals(GetLdaTopic_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetLdaTopic_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetLdaTopic_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetLdaTopic_resultStandardSchemeFactory implements SchemeFactory {
			public GetLdaTopic_resultStandardScheme getScheme() {
				return new GetLdaTopic_resultStandardScheme();
			}
		}

		private static class GetLdaTopic_resultStandardScheme extends StandardScheme<GetLdaTopic_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetLdaTopic_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetLdaTopic_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetLdaTopic_resultTupleSchemeFactory implements SchemeFactory {
			public GetLdaTopic_resultTupleScheme getScheme() {
				return new GetLdaTopic_resultTupleScheme();
			}
		}

		private static class GetLdaTopic_resultTupleScheme extends TupleScheme<GetLdaTopic_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetLdaTopic_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetLdaTopic_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetLastActionTimeOfCategory_args implements
			org.apache.thrift.TBase<GetLastActionTimeOfCategory_args, GetLastActionTimeOfCategory_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetLastActionTimeOfCategory_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetLastActionTimeOfCategory_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"type", org.apache.thrift.protocol.TType.I32, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetLastActionTimeOfCategory_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetLastActionTimeOfCategory_argsTupleSchemeFactory());
		}

		public String uid; // required
		/**
		 * 
		 * @see ActionType
		 */
		public ActionType type; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid"),
			/**
			 * 
			 * @see ActionType
			 */
			TYPE((short) 2, "type");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // TYPE
					return TYPE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TYPE,
					new org.apache.thrift.meta_data.FieldMetaData("type",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
									ActionType.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLastActionTimeOfCategory_args.class,
					metaDataMap);
		}

		public GetLastActionTimeOfCategory_args() {
		}

		public GetLastActionTimeOfCategory_args(String uid, ActionType type) {
			this();
			this.uid = uid;
			this.type = type;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetLastActionTimeOfCategory_args(GetLastActionTimeOfCategory_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetType()) {
				this.type = other.type;
			}
		}

		public GetLastActionTimeOfCategory_args deepCopy() {
			return new GetLastActionTimeOfCategory_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.type = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetLastActionTimeOfCategory_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		/**
		 * 
		 * @see ActionType
		 */
		public ActionType getType() {
			return this.type;
		}

		/**
		 * 
		 * @see ActionType
		 */
		public GetLastActionTimeOfCategory_args setType(ActionType type) {
			this.type = type;
			return this;
		}

		public void unsetType() {
			this.type = null;
		}

		/**
		 * Returns true if field type is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetType() {
			return this.type != null;
		}

		public void setTypeIsSet(boolean value) {
			if (!value) {
				this.type = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			case TYPE:
				if (value == null) {
					unsetType();
				} else {
					setType((ActionType) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case TYPE:
				return getType();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case TYPE:
				return isSetType();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetLastActionTimeOfCategory_args)
				return this.equals((GetLastActionTimeOfCategory_args) that);
			return false;
		}

		public boolean equals(GetLastActionTimeOfCategory_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_type = true && this.isSetType();
			boolean that_present_type = true && that.isSetType();
			if (this_present_type || that_present_type) {
				if (!(this_present_type && that_present_type))
					return false;
				if (!this.type.equals(that.type))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			boolean present_type = true && (isSetType());
			list.add(present_type);
			if (present_type)
				list.add(type.getValue());

			return list.hashCode();
		}

		@Override
		public int compareTo(GetLastActionTimeOfCategory_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetType()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetLastActionTimeOfCategory_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("type:");
			if (this.type == null) {
				sb.append("null");
			} else {
				sb.append(this.type);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetLastActionTimeOfCategory_argsStandardSchemeFactory implements SchemeFactory {
			public GetLastActionTimeOfCategory_argsStandardScheme getScheme() {
				return new GetLastActionTimeOfCategory_argsStandardScheme();
			}
		}

		private static class GetLastActionTimeOfCategory_argsStandardScheme
				extends StandardScheme<GetLastActionTimeOfCategory_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetLastActionTimeOfCategory_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // TYPE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.type = com.inveno.bigdata.query.data.util.thrift.ufs.ActionType
									.findByValue(iprot.readI32());
							struct.setTypeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetLastActionTimeOfCategory_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.type != null) {
					oprot.writeFieldBegin(TYPE_FIELD_DESC);
					oprot.writeI32(struct.type.getValue());
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetLastActionTimeOfCategory_argsTupleSchemeFactory implements SchemeFactory {
			public GetLastActionTimeOfCategory_argsTupleScheme getScheme() {
				return new GetLastActionTimeOfCategory_argsTupleScheme();
			}
		}

		private static class GetLastActionTimeOfCategory_argsTupleScheme
				extends TupleScheme<GetLastActionTimeOfCategory_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetLastActionTimeOfCategory_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetType()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetType()) {
					oprot.writeI32(struct.type.getValue());
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetLastActionTimeOfCategory_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.type = com.inveno.bigdata.query.data.util.thrift.ufs.ActionType.findByValue(iprot.readI32());
					struct.setTypeIsSet(true);
				}
			}
		}

	}

	public static class GetLastActionTimeOfCategory_result implements
			org.apache.thrift.TBase<GetLastActionTimeOfCategory_result, GetLastActionTimeOfCategory_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetLastActionTimeOfCategory_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetLastActionTimeOfCategory_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetLastActionTimeOfCategory_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetLastActionTimeOfCategory_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLastActionTimeOfCategory_result.class,
					metaDataMap);
		}

		public GetLastActionTimeOfCategory_result() {
		}

		public GetLastActionTimeOfCategory_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetLastActionTimeOfCategory_result(GetLastActionTimeOfCategory_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetLastActionTimeOfCategory_result deepCopy() {
			return new GetLastActionTimeOfCategory_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetLastActionTimeOfCategory_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetLastActionTimeOfCategory_result)
				return this.equals((GetLastActionTimeOfCategory_result) that);
			return false;
		}

		public boolean equals(GetLastActionTimeOfCategory_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetLastActionTimeOfCategory_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetLastActionTimeOfCategory_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetLastActionTimeOfCategory_resultStandardSchemeFactory implements SchemeFactory {
			public GetLastActionTimeOfCategory_resultStandardScheme getScheme() {
				return new GetLastActionTimeOfCategory_resultStandardScheme();
			}
		}

		private static class GetLastActionTimeOfCategory_resultStandardScheme
				extends StandardScheme<GetLastActionTimeOfCategory_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetLastActionTimeOfCategory_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetLastActionTimeOfCategory_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetLastActionTimeOfCategory_resultTupleSchemeFactory implements SchemeFactory {
			public GetLastActionTimeOfCategory_resultTupleScheme getScheme() {
				return new GetLastActionTimeOfCategory_resultTupleScheme();
			}
		}

		private static class GetLastActionTimeOfCategory_resultTupleScheme
				extends TupleScheme<GetLastActionTimeOfCategory_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetLastActionTimeOfCategory_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetLastActionTimeOfCategory_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetTimeFeature_args
			implements org.apache.thrift.TBase<GetTimeFeature_args, GetTimeFeature_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<GetTimeFeature_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetTimeFeature_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetTimeFeature_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetTimeFeature_argsTupleSchemeFactory());
		}

		public String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTimeFeature_args.class, metaDataMap);
		}

		public GetTimeFeature_args() {
		}

		public GetTimeFeature_args(String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetTimeFeature_args(GetTimeFeature_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public GetTimeFeature_args deepCopy() {
			return new GetTimeFeature_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetTimeFeature_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetTimeFeature_args)
				return this.equals((GetTimeFeature_args) that);
			return false;
		}

		public boolean equals(GetTimeFeature_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetTimeFeature_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetTimeFeature_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetTimeFeature_argsStandardSchemeFactory implements SchemeFactory {
			public GetTimeFeature_argsStandardScheme getScheme() {
				return new GetTimeFeature_argsStandardScheme();
			}
		}

		private static class GetTimeFeature_argsStandardScheme extends StandardScheme<GetTimeFeature_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetTimeFeature_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetTimeFeature_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetTimeFeature_argsTupleSchemeFactory implements SchemeFactory {
			public GetTimeFeature_argsTupleScheme getScheme() {
				return new GetTimeFeature_argsTupleScheme();
			}
		}

		private static class GetTimeFeature_argsTupleScheme extends TupleScheme<GetTimeFeature_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetTimeFeature_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetTimeFeature_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}
		}

	}

	public static class GetTimeFeature_result
			implements org.apache.thrift.TBase<GetTimeFeature_result, GetTimeFeature_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetTimeFeature_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetTimeFeature_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetTimeFeature_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetTimeFeature_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTimeFeature_result.class, metaDataMap);
		}

		public GetTimeFeature_result() {
		}

		public GetTimeFeature_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetTimeFeature_result(GetTimeFeature_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetTimeFeature_result deepCopy() {
			return new GetTimeFeature_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetTimeFeature_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetTimeFeature_result)
				return this.equals((GetTimeFeature_result) that);
			return false;
		}

		public boolean equals(GetTimeFeature_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetTimeFeature_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetTimeFeature_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetTimeFeature_resultStandardSchemeFactory implements SchemeFactory {
			public GetTimeFeature_resultStandardScheme getScheme() {
				return new GetTimeFeature_resultStandardScheme();
			}
		}

		private static class GetTimeFeature_resultStandardScheme extends StandardScheme<GetTimeFeature_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetTimeFeature_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetTimeFeature_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetTimeFeature_resultTupleSchemeFactory implements SchemeFactory {
			public GetTimeFeature_resultTupleScheme getScheme() {
				return new GetTimeFeature_resultTupleScheme();
			}
		}

		private static class GetTimeFeature_resultTupleScheme extends TupleScheme<GetTimeFeature_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetTimeFeature_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetTimeFeature_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetNetworkFeature_args
			implements org.apache.thrift.TBase<GetNetworkFeature_args, GetNetworkFeature_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetNetworkFeature_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetNetworkFeature_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetNetworkFeature_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetNetworkFeature_argsTupleSchemeFactory());
		}

		public String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNetworkFeature_args.class, metaDataMap);
		}

		public GetNetworkFeature_args() {
		}

		public GetNetworkFeature_args(String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetNetworkFeature_args(GetNetworkFeature_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public GetNetworkFeature_args deepCopy() {
			return new GetNetworkFeature_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetNetworkFeature_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetNetworkFeature_args)
				return this.equals((GetNetworkFeature_args) that);
			return false;
		}

		public boolean equals(GetNetworkFeature_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetNetworkFeature_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetNetworkFeature_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetNetworkFeature_argsStandardSchemeFactory implements SchemeFactory {
			public GetNetworkFeature_argsStandardScheme getScheme() {
				return new GetNetworkFeature_argsStandardScheme();
			}
		}

		private static class GetNetworkFeature_argsStandardScheme extends StandardScheme<GetNetworkFeature_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetNetworkFeature_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetNetworkFeature_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetNetworkFeature_argsTupleSchemeFactory implements SchemeFactory {
			public GetNetworkFeature_argsTupleScheme getScheme() {
				return new GetNetworkFeature_argsTupleScheme();
			}
		}

		private static class GetNetworkFeature_argsTupleScheme extends TupleScheme<GetNetworkFeature_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetNetworkFeature_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetNetworkFeature_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}
		}

	}

	public static class GetNetworkFeature_result
			implements org.apache.thrift.TBase<GetNetworkFeature_result, GetNetworkFeature_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetNetworkFeature_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetNetworkFeature_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetNetworkFeature_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetNetworkFeature_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetNetworkFeature_result.class, metaDataMap);
		}

		public GetNetworkFeature_result() {
		}

		public GetNetworkFeature_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetNetworkFeature_result(GetNetworkFeature_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetNetworkFeature_result deepCopy() {
			return new GetNetworkFeature_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetNetworkFeature_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetNetworkFeature_result)
				return this.equals((GetNetworkFeature_result) that);
			return false;
		}

		public boolean equals(GetNetworkFeature_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetNetworkFeature_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetNetworkFeature_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetNetworkFeature_resultStandardSchemeFactory implements SchemeFactory {
			public GetNetworkFeature_resultStandardScheme getScheme() {
				return new GetNetworkFeature_resultStandardScheme();
			}
		}

		private static class GetNetworkFeature_resultStandardScheme extends StandardScheme<GetNetworkFeature_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetNetworkFeature_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetNetworkFeature_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetNetworkFeature_resultTupleSchemeFactory implements SchemeFactory {
			public GetNetworkFeature_resultTupleScheme getScheme() {
				return new GetNetworkFeature_resultTupleScheme();
			}
		}

		private static class GetNetworkFeature_resultTupleScheme extends TupleScheme<GetNetworkFeature_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetNetworkFeature_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetNetworkFeature_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetTagStats_args implements org.apache.thrift.TBase<GetTagStats_args, GetTagStats_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetTagStats_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetTagStats_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetTagStats_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetTagStats_argsTupleSchemeFactory());
		}

		public String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTagStats_args.class, metaDataMap);
		}

		public GetTagStats_args() {
		}

		public GetTagStats_args(String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetTagStats_args(GetTagStats_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public GetTagStats_args deepCopy() {
			return new GetTagStats_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetTagStats_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetTagStats_args)
				return this.equals((GetTagStats_args) that);
			return false;
		}

		public boolean equals(GetTagStats_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetTagStats_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetTagStats_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetTagStats_argsStandardSchemeFactory implements SchemeFactory {
			public GetTagStats_argsStandardScheme getScheme() {
				return new GetTagStats_argsStandardScheme();
			}
		}

		private static class GetTagStats_argsStandardScheme extends StandardScheme<GetTagStats_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetTagStats_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetTagStats_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetTagStats_argsTupleSchemeFactory implements SchemeFactory {
			public GetTagStats_argsTupleScheme getScheme() {
				return new GetTagStats_argsTupleScheme();
			}
		}

		private static class GetTagStats_argsTupleScheme extends TupleScheme<GetTagStats_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetTagStats_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetTagStats_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}
		}

	}

	public static class GetTagStats_result
			implements org.apache.thrift.TBase<GetTagStats_result, GetTagStats_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<GetTagStats_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetTagStats_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetTagStats_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetTagStats_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTagStats_result.class, metaDataMap);
		}

		public GetTagStats_result() {
		}

		public GetTagStats_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetTagStats_result(GetTagStats_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetTagStats_result deepCopy() {
			return new GetTagStats_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetTagStats_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetTagStats_result)
				return this.equals((GetTagStats_result) that);
			return false;
		}

		public boolean equals(GetTagStats_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetTagStats_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetTagStats_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetTagStats_resultStandardSchemeFactory implements SchemeFactory {
			public GetTagStats_resultStandardScheme getScheme() {
				return new GetTagStats_resultStandardScheme();
			}
		}

		private static class GetTagStats_resultStandardScheme extends StandardScheme<GetTagStats_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetTagStats_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetTagStats_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetTagStats_resultTupleSchemeFactory implements SchemeFactory {
			public GetTagStats_resultTupleScheme getScheme() {
				return new GetTagStats_resultTupleScheme();
			}
		}

		private static class GetTagStats_resultTupleScheme extends TupleScheme<GetTagStats_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetTagStats_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetTagStats_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetCategoryStats_args
			implements org.apache.thrift.TBase<GetCategoryStats_args, GetCategoryStats_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetCategoryStats_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetCategoryStats_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetCategoryStats_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetCategoryStats_argsTupleSchemeFactory());
		}

		public String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCategoryStats_args.class, metaDataMap);
		}

		public GetCategoryStats_args() {
		}

		public GetCategoryStats_args(String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetCategoryStats_args(GetCategoryStats_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public GetCategoryStats_args deepCopy() {
			return new GetCategoryStats_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetCategoryStats_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetCategoryStats_args)
				return this.equals((GetCategoryStats_args) that);
			return false;
		}

		public boolean equals(GetCategoryStats_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetCategoryStats_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetCategoryStats_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetCategoryStats_argsStandardSchemeFactory implements SchemeFactory {
			public GetCategoryStats_argsStandardScheme getScheme() {
				return new GetCategoryStats_argsStandardScheme();
			}
		}

		private static class GetCategoryStats_argsStandardScheme extends StandardScheme<GetCategoryStats_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetCategoryStats_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetCategoryStats_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetCategoryStats_argsTupleSchemeFactory implements SchemeFactory {
			public GetCategoryStats_argsTupleScheme getScheme() {
				return new GetCategoryStats_argsTupleScheme();
			}
		}

		private static class GetCategoryStats_argsTupleScheme extends TupleScheme<GetCategoryStats_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetCategoryStats_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetCategoryStats_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}
		}

	}

	public static class GetCategoryStats_result
			implements org.apache.thrift.TBase<GetCategoryStats_result, GetCategoryStats_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetCategoryStats_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetCategoryStats_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetCategoryStats_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetCategoryStats_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCategoryStats_result.class, metaDataMap);
		}

		public GetCategoryStats_result() {
		}

		public GetCategoryStats_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetCategoryStats_result(GetCategoryStats_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetCategoryStats_result deepCopy() {
			return new GetCategoryStats_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetCategoryStats_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetCategoryStats_result)
				return this.equals((GetCategoryStats_result) that);
			return false;
		}

		public boolean equals(GetCategoryStats_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetCategoryStats_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetCategoryStats_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetCategoryStats_resultStandardSchemeFactory implements SchemeFactory {
			public GetCategoryStats_resultStandardScheme getScheme() {
				return new GetCategoryStats_resultStandardScheme();
			}
		}

		private static class GetCategoryStats_resultStandardScheme extends StandardScheme<GetCategoryStats_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetCategoryStats_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetCategoryStats_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetCategoryStats_resultTupleSchemeFactory implements SchemeFactory {
			public GetCategoryStats_resultTupleScheme getScheme() {
				return new GetCategoryStats_resultTupleScheme();
			}
		}

		private static class GetCategoryStats_resultTupleScheme extends TupleScheme<GetCategoryStats_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetCategoryStats_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetCategoryStats_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetCreateTime_args
			implements org.apache.thrift.TBase<GetCreateTime_args, GetCreateTime_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<GetCreateTime_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetCreateTime_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetCreateTime_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetCreateTime_argsTupleSchemeFactory());
		}

		public String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCreateTime_args.class, metaDataMap);
		}

		public GetCreateTime_args() {
		}

		public GetCreateTime_args(String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetCreateTime_args(GetCreateTime_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public GetCreateTime_args deepCopy() {
			return new GetCreateTime_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetCreateTime_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetCreateTime_args)
				return this.equals((GetCreateTime_args) that);
			return false;
		}

		public boolean equals(GetCreateTime_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetCreateTime_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetCreateTime_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetCreateTime_argsStandardSchemeFactory implements SchemeFactory {
			public GetCreateTime_argsStandardScheme getScheme() {
				return new GetCreateTime_argsStandardScheme();
			}
		}

		private static class GetCreateTime_argsStandardScheme extends StandardScheme<GetCreateTime_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetCreateTime_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetCreateTime_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetCreateTime_argsTupleSchemeFactory implements SchemeFactory {
			public GetCreateTime_argsTupleScheme getScheme() {
				return new GetCreateTime_argsTupleScheme();
			}
		}

		private static class GetCreateTime_argsTupleScheme extends TupleScheme<GetCreateTime_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetCreateTime_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetCreateTime_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}
		}

	}

	public static class GetCreateTime_result
			implements org.apache.thrift.TBase<GetCreateTime_result, GetCreateTime_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetCreateTime_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetCreateTime_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetCreateTime_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetCreateTime_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCreateTime_result.class, metaDataMap);
		}

		public GetCreateTime_result() {
		}

		public GetCreateTime_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetCreateTime_result(GetCreateTime_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetCreateTime_result deepCopy() {
			return new GetCreateTime_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetCreateTime_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetCreateTime_result)
				return this.equals((GetCreateTime_result) that);
			return false;
		}

		public boolean equals(GetCreateTime_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetCreateTime_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetCreateTime_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetCreateTime_resultStandardSchemeFactory implements SchemeFactory {
			public GetCreateTime_resultStandardScheme getScheme() {
				return new GetCreateTime_resultStandardScheme();
			}
		}

		private static class GetCreateTime_resultStandardScheme extends StandardScheme<GetCreateTime_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetCreateTime_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetCreateTime_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetCreateTime_resultTupleSchemeFactory implements SchemeFactory {
			public GetCreateTime_resultTupleScheme getScheme() {
				return new GetCreateTime_resultTupleScheme();
			}
		}

		private static class GetCreateTime_resultTupleScheme extends TupleScheme<GetCreateTime_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetCreateTime_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetCreateTime_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetInterest_args implements org.apache.thrift.TBase<GetInterest_args, GetInterest_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetInterest_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetInterest_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetInterest_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetInterest_argsTupleSchemeFactory());
		}

		public String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetInterest_args.class, metaDataMap);
		}

		public GetInterest_args() {
		}

		public GetInterest_args(String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetInterest_args(GetInterest_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public GetInterest_args deepCopy() {
			return new GetInterest_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetInterest_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetInterest_args)
				return this.equals((GetInterest_args) that);
			return false;
		}

		public boolean equals(GetInterest_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetInterest_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetInterest_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetInterest_argsStandardSchemeFactory implements SchemeFactory {
			public GetInterest_argsStandardScheme getScheme() {
				return new GetInterest_argsStandardScheme();
			}
		}

		private static class GetInterest_argsStandardScheme extends StandardScheme<GetInterest_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetInterest_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetInterest_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetInterest_argsTupleSchemeFactory implements SchemeFactory {
			public GetInterest_argsTupleScheme getScheme() {
				return new GetInterest_argsTupleScheme();
			}
		}

		private static class GetInterest_argsTupleScheme extends TupleScheme<GetInterest_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetInterest_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetInterest_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}
		}

	}

	public static class GetInterest_result
			implements org.apache.thrift.TBase<GetInterest_result, GetInterest_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<GetInterest_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetInterest_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetInterest_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetInterest_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetInterest_result.class, metaDataMap);
		}

		public GetInterest_result() {
		}

		public GetInterest_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetInterest_result(GetInterest_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public GetInterest_result deepCopy() {
			return new GetInterest_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public GetInterest_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetInterest_result)
				return this.equals((GetInterest_result) that);
			return false;
		}

		public boolean equals(GetInterest_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetInterest_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetInterest_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetInterest_resultStandardSchemeFactory implements SchemeFactory {
			public GetInterest_resultStandardScheme getScheme() {
				return new GetInterest_resultStandardScheme();
			}
		}

		private static class GetInterest_resultStandardScheme extends StandardScheme<GetInterest_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetInterest_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetInterest_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetInterest_resultTupleSchemeFactory implements SchemeFactory {
			public GetInterest_resultTupleScheme getScheme() {
				return new GetInterest_resultTupleScheme();
			}
		}

		private static class GetInterest_resultTupleScheme extends TupleScheme<GetInterest_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetInterest_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetInterest_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class SetInterest_args implements org.apache.thrift.TBase<SetInterest_args, SetInterest_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<SetInterest_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"SetInterest_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField JSON_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"jsonArray", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SetInterest_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SetInterest_argsTupleSchemeFactory());
		}

		public String uid; // required
		public String jsonArray; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid"), JSON_ARRAY((short) 2, "jsonArray");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // JSON_ARRAY
					return JSON_ARRAY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.JSON_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("jsonArray",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetInterest_args.class, metaDataMap);
		}

		public SetInterest_args() {
		}

		public SetInterest_args(String uid, String jsonArray) {
			this();
			this.uid = uid;
			this.jsonArray = jsonArray;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SetInterest_args(SetInterest_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetJsonArray()) {
				this.jsonArray = other.jsonArray;
			}
		}

		public SetInterest_args deepCopy() {
			return new SetInterest_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.jsonArray = null;
		}

		public String getUid() {
			return this.uid;
		}

		public SetInterest_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public String getJsonArray() {
			return this.jsonArray;
		}

		public SetInterest_args setJsonArray(String jsonArray) {
			this.jsonArray = jsonArray;
			return this;
		}

		public void unsetJsonArray() {
			this.jsonArray = null;
		}

		/**
		 * Returns true if field jsonArray is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetJsonArray() {
			return this.jsonArray != null;
		}

		public void setJsonArrayIsSet(boolean value) {
			if (!value) {
				this.jsonArray = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			case JSON_ARRAY:
				if (value == null) {
					unsetJsonArray();
				} else {
					setJsonArray((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case JSON_ARRAY:
				return getJsonArray();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case JSON_ARRAY:
				return isSetJsonArray();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SetInterest_args)
				return this.equals((SetInterest_args) that);
			return false;
		}

		public boolean equals(SetInterest_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_jsonArray = true && this.isSetJsonArray();
			boolean that_present_jsonArray = true && that.isSetJsonArray();
			if (this_present_jsonArray || that_present_jsonArray) {
				if (!(this_present_jsonArray && that_present_jsonArray))
					return false;
				if (!this.jsonArray.equals(that.jsonArray))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			boolean present_jsonArray = true && (isSetJsonArray());
			list.add(present_jsonArray);
			if (present_jsonArray)
				list.add(jsonArray);

			return list.hashCode();
		}

		@Override
		public int compareTo(SetInterest_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetJsonArray()).compareTo(other.isSetJsonArray());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetJsonArray()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonArray, other.jsonArray);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SetInterest_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("jsonArray:");
			if (this.jsonArray == null) {
				sb.append("null");
			} else {
				sb.append(this.jsonArray);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SetInterest_argsStandardSchemeFactory implements SchemeFactory {
			public SetInterest_argsStandardScheme getScheme() {
				return new SetInterest_argsStandardScheme();
			}
		}

		private static class SetInterest_argsStandardScheme extends StandardScheme<SetInterest_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SetInterest_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // JSON_ARRAY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.jsonArray = iprot.readString();
							struct.setJsonArrayIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SetInterest_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.jsonArray != null) {
					oprot.writeFieldBegin(JSON_ARRAY_FIELD_DESC);
					oprot.writeString(struct.jsonArray);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SetInterest_argsTupleSchemeFactory implements SchemeFactory {
			public SetInterest_argsTupleScheme getScheme() {
				return new SetInterest_argsTupleScheme();
			}
		}

		private static class SetInterest_argsTupleScheme extends TupleScheme<SetInterest_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SetInterest_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetJsonArray()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetJsonArray()) {
					oprot.writeString(struct.jsonArray);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SetInterest_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.jsonArray = iprot.readString();
					struct.setJsonArrayIsSet(true);
				}
			}
		}

	}

	public static class SetInterest_result
			implements org.apache.thrift.TBase<SetInterest_result, SetInterest_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<SetInterest_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"SetInterest_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new SetInterest_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new SetInterest_resultTupleSchemeFactory());
		}

		public int success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetInterest_result.class, metaDataMap);
		}

		public SetInterest_result() {
		}

		public SetInterest_result(int success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public SetInterest_result(SetInterest_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public SetInterest_result deepCopy() {
			return new SetInterest_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess() {
			return this.success;
		}

		public SetInterest_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof SetInterest_result)
				return this.equals((SetInterest_result) that);
			return false;
		}

		public boolean equals(SetInterest_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(SetInterest_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("SetInterest_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class SetInterest_resultStandardSchemeFactory implements SchemeFactory {
			public SetInterest_resultStandardScheme getScheme() {
				return new SetInterest_resultStandardScheme();
			}
		}

		private static class SetInterest_resultStandardScheme extends StandardScheme<SetInterest_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, SetInterest_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, SetInterest_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class SetInterest_resultTupleSchemeFactory implements SchemeFactory {
			public SetInterest_resultTupleScheme getScheme() {
				return new SetInterest_resultTupleScheme();
			}
		}

		private static class SetInterest_resultTupleScheme extends TupleScheme<SetInterest_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, SetInterest_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, SetInterest_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class GetSourceCount_args
			implements org.apache.thrift.TBase<GetSourceCount_args, GetSourceCount_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<GetSourceCount_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetSourceCount_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"source", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField APP_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"app", org.apache.thrift.protocol.TType.STRING, (short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetSourceCount_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetSourceCount_argsTupleSchemeFactory());
		}

		public String uid; // required
		public String source; // required
		public String app; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			UID((short) 1, "uid"), SOURCE((short) 2, "source"), APP((short) 3, "app");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // SOURCE
					return SOURCE;
				case 3: // APP
					return APP;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.APP, new org.apache.thrift.meta_data.FieldMetaData("app",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSourceCount_args.class, metaDataMap);
		}

		public GetSourceCount_args() {
		}

		public GetSourceCount_args(String uid, String source, String app) {
			this();
			this.uid = uid;
			this.source = source;
			this.app = app;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetSourceCount_args(GetSourceCount_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetSource()) {
				this.source = other.source;
			}
			if (other.isSetApp()) {
				this.app = other.app;
			}
		}

		public GetSourceCount_args deepCopy() {
			return new GetSourceCount_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.source = null;
			this.app = null;
		}

		public String getUid() {
			return this.uid;
		}

		public GetSourceCount_args setUid(String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public String getSource() {
			return this.source;
		}

		public GetSourceCount_args setSource(String source) {
			this.source = source;
			return this;
		}

		public void unsetSource() {
			this.source = null;
		}

		/**
		 * Returns true if field source is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSource() {
			return this.source != null;
		}

		public void setSourceIsSet(boolean value) {
			if (!value) {
				this.source = null;
			}
		}

		public String getApp() {
			return this.app;
		}

		public GetSourceCount_args setApp(String app) {
			this.app = app;
			return this;
		}

		public void unsetApp() {
			this.app = null;
		}

		/**
		 * Returns true if field app is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetApp() {
			return this.app != null;
		}

		public void setAppIsSet(boolean value) {
			if (!value) {
				this.app = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				} else {
					setUid((String) value);
				}
				break;

			case SOURCE:
				if (value == null) {
					unsetSource();
				} else {
					setSource((String) value);
				}
				break;

			case APP:
				if (value == null) {
					unsetApp();
				} else {
					setApp((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case SOURCE:
				return getSource();

			case APP:
				return getApp();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case SOURCE:
				return isSetSource();
			case APP:
				return isSetApp();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetSourceCount_args)
				return this.equals((GetSourceCount_args) that);
			return false;
		}

		public boolean equals(GetSourceCount_args that) {
			if (that == null)
				return false;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_source = true && this.isSetSource();
			boolean that_present_source = true && that.isSetSource();
			if (this_present_source || that_present_source) {
				if (!(this_present_source && that_present_source))
					return false;
				if (!this.source.equals(that.source))
					return false;
			}

			boolean this_present_app = true && this.isSetApp();
			boolean that_present_app = true && that.isSetApp();
			if (this_present_app || that_present_app) {
				if (!(this_present_app && that_present_app))
					return false;
				if (!this.app.equals(that.app))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_uid = true && (isSetUid());
			list.add(present_uid);
			if (present_uid)
				list.add(uid);

			boolean present_source = true && (isSetSource());
			list.add(present_source);
			if (present_source)
				list.add(source);

			boolean present_app = true && (isSetApp());
			list.add(present_app);
			if (present_app)
				list.add(app);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetSourceCount_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSource()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetApp()).compareTo(other.isSetApp());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetApp()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app, other.app);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetSourceCount_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			} else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("source:");
			if (this.source == null) {
				sb.append("null");
			} else {
				sb.append(this.source);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("app:");
			if (this.app == null) {
				sb.append("null");
			} else {
				sb.append(this.app);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetSourceCount_argsStandardSchemeFactory implements SchemeFactory {
			public GetSourceCount_argsStandardScheme getScheme() {
				return new GetSourceCount_argsStandardScheme();
			}
		}

		private static class GetSourceCount_argsStandardScheme extends StandardScheme<GetSourceCount_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetSourceCount_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // SOURCE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.source = iprot.readString();
							struct.setSourceIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // APP
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.app = iprot.readString();
							struct.setAppIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetSourceCount_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.source != null) {
					oprot.writeFieldBegin(SOURCE_FIELD_DESC);
					oprot.writeString(struct.source);
					oprot.writeFieldEnd();
				}
				if (struct.app != null) {
					oprot.writeFieldBegin(APP_FIELD_DESC);
					oprot.writeString(struct.app);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetSourceCount_argsTupleSchemeFactory implements SchemeFactory {
			public GetSourceCount_argsTupleScheme getScheme() {
				return new GetSourceCount_argsTupleScheme();
			}
		}

		private static class GetSourceCount_argsTupleScheme extends TupleScheme<GetSourceCount_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetSourceCount_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetSource()) {
					optionals.set(1);
				}
				if (struct.isSetApp()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetSource()) {
					oprot.writeString(struct.source);
				}
				if (struct.isSetApp()) {
					oprot.writeString(struct.app);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetSourceCount_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.source = iprot.readString();
					struct.setSourceIsSet(true);
				}
				if (incoming.get(2)) {
					struct.app = iprot.readString();
					struct.setAppIsSet(true);
				}
			}
		}

	}

	public static class GetSourceCount_result
			implements org.apache.thrift.TBase<GetSourceCount_result, GetSourceCount_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<GetSourceCount_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"GetSourceCount_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new GetSourceCount_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new GetSourceCount_resultTupleSchemeFactory());
		}

		public int success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSourceCount_result.class, metaDataMap);
		}

		public GetSourceCount_result() {
		}

		public GetSourceCount_result(int success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public GetSourceCount_result(GetSourceCount_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public GetSourceCount_result deepCopy() {
			return new GetSourceCount_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess() {
			return this.success;
		}

		public GetSourceCount_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof GetSourceCount_result)
				return this.equals((GetSourceCount_result) that);
			return false;
		}

		public boolean equals(GetSourceCount_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(GetSourceCount_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("GetSourceCount_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class GetSourceCount_resultStandardSchemeFactory implements SchemeFactory {
			public GetSourceCount_resultStandardScheme getScheme() {
				return new GetSourceCount_resultStandardScheme();
			}
		}

		private static class GetSourceCount_resultStandardScheme extends StandardScheme<GetSourceCount_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, GetSourceCount_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, GetSourceCount_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class GetSourceCount_resultTupleSchemeFactory implements SchemeFactory {
			public GetSourceCount_resultTupleScheme getScheme() {
				return new GetSourceCount_resultTupleScheme();
			}
		}

		private static class GetSourceCount_resultTupleScheme extends TupleScheme<GetSourceCount_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, GetSourceCount_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, GetSourceCount_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
