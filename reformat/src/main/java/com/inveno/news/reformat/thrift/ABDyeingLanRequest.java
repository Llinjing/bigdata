package com.inveno.news.reformat.thrift;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-23")
public class ABDyeingLanRequest implements org.apache.thrift.TBase<ABDyeingLanRequest, ABDyeingLanRequest._Fields>,
		java.io.Serializable, Cloneable, Comparable<ABDyeingLanRequest> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ABDyeingLanRequest");

	private static final org.apache.thrift.protocol.TField APP_FIELD_DESC = new org.apache.thrift.protocol.TField("app",
			org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField APP_VER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"app_ver", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField APP_LAN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"app_lan", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField _TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"_types", org.apache.thrift.protocol.TType.LIST, (short) 4);
	private static final org.apache.thrift.protocol.TField APP_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"app_platform", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new ABDyeingLanRequestStandardSchemeFactory());
		schemes.put(TupleScheme.class, new ABDyeingLanRequestTupleSchemeFactory());
	}

	public String app; // required
	public String app_ver; // required
	public String app_lan; // required
	public List<String> _types; // required
	public String app_platform; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		APP((short) 1, "app"), APP_VER((short) 2, "app_ver"), APP_LAN((short) 3, "app_lan"), _TYPES((short) 4,
				"_types"), APP_PLATFORM((short) 5, "app_platform");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // APP
				return APP;
			case 2: // APP_VER
				return APP_VER;
			case 3: // APP_LAN
				return APP_LAN;
			case 4: // _TYPES
				return _TYPES;
			case 5: // APP_PLATFORM
				return APP_PLATFORM;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final _Fields optionals[] = { _Fields.APP_PLATFORM };
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.APP,
				new org.apache.thrift.meta_data.FieldMetaData("app", org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.APP_VER,
				new org.apache.thrift.meta_data.FieldMetaData("app_ver",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.APP_LAN,
				new org.apache.thrift.meta_data.FieldMetaData("app_lan",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields._TYPES, new org.apache.thrift.meta_data.FieldMetaData("_types",
				org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		tmpMap.put(_Fields.APP_PLATFORM,
				new org.apache.thrift.meta_data.FieldMetaData("app_platform",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ABDyeingLanRequest.class, metaDataMap);
	}

	public ABDyeingLanRequest() {
	}

	public ABDyeingLanRequest(String app, String app_ver, String app_lan, List<String> _types) {
		this();
		this.app = app;
		this.app_ver = app_ver;
		this.app_lan = app_lan;
		this._types = _types;
	}

	public ABDyeingLanRequest(String app, String app_ver, String app_lan, List<String> _types, String app_platform) {
		this();
		this.app = app;
		this.app_ver = app_ver;
		this.app_lan = app_lan;
		this._types = _types;
		this.app_platform = app_platform;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ABDyeingLanRequest(ABDyeingLanRequest other) {
		if (other.isSetApp()) {
			this.app = other.app;
		}
		if (other.isSetApp_ver()) {
			this.app_ver = other.app_ver;
		}
		if (other.isSetApp_lan()) {
			this.app_lan = other.app_lan;
		}
		if (other.isSet_types()) {
			List<String> __this___types = new ArrayList<String>(other._types);
			this._types = __this___types;
		}
		if (other.isSetApp_platform()) {
			this.app_platform = other.app_platform;
		}
	}

	public ABDyeingLanRequest deepCopy() {
		return new ABDyeingLanRequest(this);
	}

	@Override
	public void clear() {
		this.app = null;
		this.app_ver = null;
		this.app_lan = null;
		this._types = null;
		this.app_platform = null;
	}

	public String getApp() {
		return this.app;
	}

	public ABDyeingLanRequest setApp(String app) {
		this.app = app;
		return this;
	}

	public void unsetApp() {
		this.app = null;
	}

	/**
	 * Returns true if field app is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetApp() {
		return this.app != null;
	}

	public void setAppIsSet(boolean value) {
		if (!value) {
			this.app = null;
		}
	}

	public String getApp_ver() {
		return this.app_ver;
	}

	public ABDyeingLanRequest setApp_ver(String app_ver) {
		this.app_ver = app_ver;
		return this;
	}

	public void unsetApp_ver() {
		this.app_ver = null;
	}

	/**
	 * Returns true if field app_ver is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetApp_ver() {
		return this.app_ver != null;
	}

	public void setApp_verIsSet(boolean value) {
		if (!value) {
			this.app_ver = null;
		}
	}

	public String getApp_lan() {
		return this.app_lan;
	}

	public ABDyeingLanRequest setApp_lan(String app_lan) {
		this.app_lan = app_lan;
		return this;
	}

	public void unsetApp_lan() {
		this.app_lan = null;
	}

	/**
	 * Returns true if field app_lan is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetApp_lan() {
		return this.app_lan != null;
	}

	public void setApp_lanIsSet(boolean value) {
		if (!value) {
			this.app_lan = null;
		}
	}

	public int get_typesSize() {
		return (this._types == null) ? 0 : this._types.size();
	}

	public java.util.Iterator<String> get_typesIterator() {
		return (this._types == null) ? null : this._types.iterator();
	}

	public void addTo_types(String elem) {
		if (this._types == null) {
			this._types = new ArrayList<String>();
		}
		this._types.add(elem);
	}

	public List<String> get_types() {
		return this._types;
	}

	public ABDyeingLanRequest set_types(List<String> _types) {
		this._types = _types;
		return this;
	}

	public void unset_types() {
		this._types = null;
	}

	/**
	 * Returns true if field _types is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSet_types() {
		return this._types != null;
	}

	public void set_typesIsSet(boolean value) {
		if (!value) {
			this._types = null;
		}
	}

	public String getApp_platform() {
		return this.app_platform;
	}

	public ABDyeingLanRequest setApp_platform(String app_platform) {
		this.app_platform = app_platform;
		return this;
	}

	public void unsetApp_platform() {
		this.app_platform = null;
	}

	/**
	 * Returns true if field app_platform is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetApp_platform() {
		return this.app_platform != null;
	}

	public void setApp_platformIsSet(boolean value) {
		if (!value) {
			this.app_platform = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case APP:
			if (value == null) {
				unsetApp();
			} else {
				setApp((String) value);
			}
			break;

		case APP_VER:
			if (value == null) {
				unsetApp_ver();
			} else {
				setApp_ver((String) value);
			}
			break;

		case APP_LAN:
			if (value == null) {
				unsetApp_lan();
			} else {
				setApp_lan((String) value);
			}
			break;

		case _TYPES:
			if (value == null) {
				unset_types();
			} else {
				set_types((List<String>) value);
			}
			break;

		case APP_PLATFORM:
			if (value == null) {
				unsetApp_platform();
			} else {
				setApp_platform((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case APP:
			return getApp();

		case APP_VER:
			return getApp_ver();

		case APP_LAN:
			return getApp_lan();

		case _TYPES:
			return get_types();

		case APP_PLATFORM:
			return getApp_platform();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case APP:
			return isSetApp();
		case APP_VER:
			return isSetApp_ver();
		case APP_LAN:
			return isSetApp_lan();
		case _TYPES:
			return isSet_types();
		case APP_PLATFORM:
			return isSetApp_platform();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof ABDyeingLanRequest)
			return this.equals((ABDyeingLanRequest) that);
		return false;
	}

	public boolean equals(ABDyeingLanRequest that) {
		if (that == null)
			return false;

		boolean this_present_app = true && this.isSetApp();
		boolean that_present_app = true && that.isSetApp();
		if (this_present_app || that_present_app) {
			if (!(this_present_app && that_present_app))
				return false;
			if (!this.app.equals(that.app))
				return false;
		}

		boolean this_present_app_ver = true && this.isSetApp_ver();
		boolean that_present_app_ver = true && that.isSetApp_ver();
		if (this_present_app_ver || that_present_app_ver) {
			if (!(this_present_app_ver && that_present_app_ver))
				return false;
			if (!this.app_ver.equals(that.app_ver))
				return false;
		}

		boolean this_present_app_lan = true && this.isSetApp_lan();
		boolean that_present_app_lan = true && that.isSetApp_lan();
		if (this_present_app_lan || that_present_app_lan) {
			if (!(this_present_app_lan && that_present_app_lan))
				return false;
			if (!this.app_lan.equals(that.app_lan))
				return false;
		}

		boolean this_present__types = true && this.isSet_types();
		boolean that_present__types = true && that.isSet_types();
		if (this_present__types || that_present__types) {
			if (!(this_present__types && that_present__types))
				return false;
			if (!this._types.equals(that._types))
				return false;
		}

		boolean this_present_app_platform = true && this.isSetApp_platform();
		boolean that_present_app_platform = true && that.isSetApp_platform();
		if (this_present_app_platform || that_present_app_platform) {
			if (!(this_present_app_platform && that_present_app_platform))
				return false;
			if (!this.app_platform.equals(that.app_platform))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_app = true && (isSetApp());
		list.add(present_app);
		if (present_app)
			list.add(app);

		boolean present_app_ver = true && (isSetApp_ver());
		list.add(present_app_ver);
		if (present_app_ver)
			list.add(app_ver);

		boolean present_app_lan = true && (isSetApp_lan());
		list.add(present_app_lan);
		if (present_app_lan)
			list.add(app_lan);

		boolean present__types = true && (isSet_types());
		list.add(present__types);
		if (present__types)
			list.add(_types);

		boolean present_app_platform = true && (isSetApp_platform());
		list.add(present_app_platform);
		if (present_app_platform)
			list.add(app_platform);

		return list.hashCode();
	}

	@Override
	public int compareTo(ABDyeingLanRequest other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetApp()).compareTo(other.isSetApp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app, other.app);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetApp_ver()).compareTo(other.isSetApp_ver());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApp_ver()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_ver, other.app_ver);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetApp_lan()).compareTo(other.isSetApp_lan());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApp_lan()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_lan, other.app_lan);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSet_types()).compareTo(other.isSet_types());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSet_types()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._types, other._types);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetApp_platform()).compareTo(other.isSetApp_platform());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApp_platform()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_platform, other.app_platform);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("ABDyeingLanRequest(");
		boolean first = true;

		sb.append("app:");
		if (this.app == null) {
			sb.append("null");
		} else {
			sb.append(this.app);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("app_ver:");
		if (this.app_ver == null) {
			sb.append("null");
		} else {
			sb.append(this.app_ver);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("app_lan:");
		if (this.app_lan == null) {
			sb.append("null");
		} else {
			sb.append(this.app_lan);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("_types:");
		if (this._types == null) {
			sb.append("null");
		} else {
			sb.append(this._types);
		}
		first = false;
		if (isSetApp_platform()) {
			if (!first)
				sb.append(", ");
			sb.append("app_platform:");
			if (this.app_platform == null) {
				sb.append("null");
			} else {
				sb.append(this.app_platform);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (app == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'app' was not present! Struct: " + toString());
		}
		if (app_ver == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'app_ver' was not present! Struct: " + toString());
		}
		if (app_lan == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'app_lan' was not present! Struct: " + toString());
		}
		if (_types == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field '_types' was not present! Struct: " + toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ABDyeingLanRequestStandardSchemeFactory implements SchemeFactory {
		public ABDyeingLanRequestStandardScheme getScheme() {
			return new ABDyeingLanRequestStandardScheme();
		}
	}

	private static class ABDyeingLanRequestStandardScheme extends StandardScheme<ABDyeingLanRequest> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ABDyeingLanRequest struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // APP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.app = iprot.readString();
						struct.setAppIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // APP_VER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.app_ver = iprot.readString();
						struct.setApp_verIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // APP_LAN
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.app_lan = iprot.readString();
						struct.setApp_lanIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // _TYPES
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
							struct._types = new ArrayList<String>(_list8.size);
							String _elem9;
							for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
								_elem9 = iprot.readString();
								struct._types.add(_elem9);
							}
							iprot.readListEnd();
						}
						struct.set_typesIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // APP_PLATFORM
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.app_platform = iprot.readString();
						struct.setApp_platformIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ABDyeingLanRequest struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.app != null) {
				oprot.writeFieldBegin(APP_FIELD_DESC);
				oprot.writeString(struct.app);
				oprot.writeFieldEnd();
			}
			if (struct.app_ver != null) {
				oprot.writeFieldBegin(APP_VER_FIELD_DESC);
				oprot.writeString(struct.app_ver);
				oprot.writeFieldEnd();
			}
			if (struct.app_lan != null) {
				oprot.writeFieldBegin(APP_LAN_FIELD_DESC);
				oprot.writeString(struct.app_lan);
				oprot.writeFieldEnd();
			}
			if (struct._types != null) {
				oprot.writeFieldBegin(_TYPES_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,
							struct._types.size()));
					for (String _iter11 : struct._types) {
						oprot.writeString(_iter11);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.app_platform != null) {
				if (struct.isSetApp_platform()) {
					oprot.writeFieldBegin(APP_PLATFORM_FIELD_DESC);
					oprot.writeString(struct.app_platform);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ABDyeingLanRequestTupleSchemeFactory implements SchemeFactory {
		public ABDyeingLanRequestTupleScheme getScheme() {
			return new ABDyeingLanRequestTupleScheme();
		}
	}

	private static class ABDyeingLanRequestTupleScheme extends TupleScheme<ABDyeingLanRequest> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ABDyeingLanRequest struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.app);
			oprot.writeString(struct.app_ver);
			oprot.writeString(struct.app_lan);
			{
				oprot.writeI32(struct._types.size());
				for (String _iter12 : struct._types) {
					oprot.writeString(_iter12);
				}
			}
			BitSet optionals = new BitSet();
			if (struct.isSetApp_platform()) {
				optionals.set(0);
			}
			oprot.writeBitSet(optionals, 1);
			if (struct.isSetApp_platform()) {
				oprot.writeString(struct.app_platform);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ABDyeingLanRequest struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.app = iprot.readString();
			struct.setAppIsSet(true);
			struct.app_ver = iprot.readString();
			struct.setApp_verIsSet(true);
			struct.app_lan = iprot.readString();
			struct.setApp_lanIsSet(true);
			{
				org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(
						org.apache.thrift.protocol.TType.STRING, iprot.readI32());
				struct._types = new ArrayList<String>(_list13.size);
				String _elem14;
				for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
					_elem14 = iprot.readString();
					struct._types.add(_elem14);
				}
			}
			struct.set_typesIsSet(true);
			BitSet incoming = iprot.readBitSet(1);
			if (incoming.get(0)) {
				struct.app_platform = iprot.readString();
				struct.setApp_platformIsSet(true);
			}
		}
	}

}
